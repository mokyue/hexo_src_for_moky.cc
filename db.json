{"Asset":[{"_id":"themes\\pacman\\source\\img\\author.jpg","path":"img/author.jpg","modified":true},{"_id":"themes\\pacman\\source\\img\\favicon.ico","path":"img/favicon.ico","modified":true},{"_id":"themes\\pacman\\source\\img\\logo.svg","path":"img/logo.svg","modified":true},{"_id":"themes\\pacman\\source\\img\\pacman.jpg","path":"img/pacman.jpg","modified":true},{"_id":"themes\\pacman\\source\\img\\to_top.png","path":"img/to_top.png","modified":true},{"_id":"themes\\pacman\\source\\font\\FontAwesome.otf","path":"font/FontAwesome.otf","modified":true},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":true},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":true},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":true},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":true},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":true},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":true},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":true},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":true},{"_id":"themes\\pacman\\source\\js\\jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":true},{"_id":"themes\\pacman\\source\\js\\to_top.js","path":"js/to_top.js","modified":true},{"_id":"themes\\pacman\\source\\css\\style.styl","path":"css/style.styl","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\blank.gif","path":"fancybox/blank.gif","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":true},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南\\687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png","path":"2015/02/03/Python正则表达式指南/687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png","modified":true,"post_id":"qlwn48lzjwxl9q78","post_path":"2015/02/03/Python正则表达式指南/"},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南\\687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png","path":"2015/02/03/Python正则表达式指南/687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png","modified":true,"post_id":"qlwn48lzjwxl9q78","post_path":"2015/02/03/Python正则表达式指南/"},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio\\5e22d182jw1eowhbmlgsxj20m80gotcg.jpg","path":"2015/02/03/One-night-in-Mok-s-Studio/5e22d182jw1eowhbmlgsxj20m80gotcg.jpg","modified":true,"post_id":"r0ltv1z2tfcyojj0","post_path":"2015/02/03/One-night-in-Mok-s-Studio/"},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio\\5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg","path":"2015/02/03/One-night-in-Mok-s-Studio/5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg","modified":true,"post_id":"r0ltv1z2tfcyojj0","post_path":"2015/02/03/One-night-in-Mok-s-Studio/"},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考\\9213b07eca8065387d4c671896dda144ad348213.jpg","path":"2015/02/03/ASCII-字符表参考/9213b07eca8065387d4c671896dda144ad348213.jpg","modified":true,"post_id":"7bqwxzirdecrnd2o","post_path":"2015/02/03/ASCII-字符表参考/"},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考\\fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg","path":"2015/02/03/ASCII-字符表参考/fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg","modified":true,"post_id":"7bqwxzirdecrnd2o","post_path":"2015/02/03/ASCII-字符表参考/"},{"_id":"source\\_posts\\2015-01-19-Qt字体大小的计算\\110211082116831.jpg","path":"2015/01/19/Qt字体大小的计算/110211082116831.jpg","modified":true,"post_id":"yjm3zab61uyblg5p","post_path":"2015/01/19/Qt字体大小的计算/"}],"Cache":[{"_id":"scaffolds\\draft.md","mtime":1421640489000},{"_id":"scaffolds\\photo.md","mtime":1421640489000},{"_id":"scaffolds\\page.md","mtime":1421640489000},{"_id":"scaffolds\\post.md","mtime":1421640489000},{"_id":"source\\_posts\\2015-01-15-JSON解析器小练习.md","mtime":1423052442000},{"_id":"source\\_posts\\2015-01-19-Qt字体大小的计算.md","mtime":1422957474000},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考.md","mtime":1422970575000},{"_id":"source\\_posts\\2015-02-03-Linux-Shell-获取当前正在执行脚本的绝对路径.md","mtime":1422953055000},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio.md","mtime":1422969561000},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南.md","mtime":1422957459000},{"_id":"source\\_posts\\2015-02-04-Python-中-if-name-main-用法解析.md","mtime":1423032955000},{"_id":"source\\_posts\\2015-01-19-Qt字体大小的计算\\110211082116831.jpg","mtime":1422956783000},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考\\9213b07eca8065387d4c671896dda144ad348213.jpg","mtime":1421375358000},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考\\fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg","mtime":1421375364000},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南\\687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png","mtime":1422957052000},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南\\687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png","mtime":1422957084000},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio\\5e22d182jw1eowhbmlgsxj20m80gotcg.jpg","mtime":1422969454000},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio\\5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg","mtime":1422969461000},{"_id":"themes\\pacman\\LICENSE","mtime":1421649321000},{"_id":"themes\\pacman\\README.md","mtime":1421649321000},{"_id":"themes\\pacman\\_config.yml","mtime":1422956225000},{"_id":"themes\\pacman\\languages\\default.yml","mtime":1421649321000},{"_id":"themes\\pacman\\languages\\zh-TW.yml","mtime":1421649321000},{"_id":"themes\\pacman\\languages\\zh-CN.yml","mtime":1421649321000},{"_id":"themes\\pacman\\scripts\\fancybox.js","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\archive.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\category.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\index.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\layout.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\page.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\post.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\tag.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_widget\\archive.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_widget\\category.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_widget\\rss.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_widget\\links.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_widget\\tag.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_widget\\tagcloud.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\after_footer.ejs","mtime":1423022399000},{"_id":"themes\\pacman\\layout\\_partial\\archive.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\categories.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\google_analytics.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\footer.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\head.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\pagination.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\search.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\sidebar.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\tags.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\to_top.ejs","mtime":1423041508000},{"_id":"themes\\pacman\\layout\\_partial\\header.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\article.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\article.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\catetags.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\footer.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\comment.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\gallery.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\header.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\pagination.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\jiathis.ejs","mtime":1423020011000},{"_id":"themes\\pacman\\source\\img\\author.jpg","mtime":1421649321000},{"_id":"themes\\pacman\\source\\img\\favicon.ico","mtime":1421649321000},{"_id":"themes\\pacman\\source\\img\\logo.svg","mtime":1421649321000},{"_id":"themes\\pacman\\source\\img\\pacman.jpg","mtime":1421649321000},{"_id":"themes\\pacman\\source\\img\\to_top.png","mtime":1423036142000},{"_id":"themes\\pacman\\source\\font\\FontAwesome.otf","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.eot","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.svg","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.ttf","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.woff","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.eot","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.svg","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.ttf","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.woff","mtime":1421649321000},{"_id":"themes\\pacman\\source\\js\\jquery-2.1.0.min.js","mtime":1421649321000},{"_id":"themes\\pacman\\source\\js\\to_top.js","mtime":1423026582000},{"_id":"themes\\pacman\\source\\css\\style.styl","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\_base\\code.styl","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\_base\\font.styl","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\_base\\public.styl","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\_base\\variable.styl","mtime":1423049278000},{"_id":"themes\\pacman\\source\\css\\_partial\\article.styl","mtime":1423055101000},{"_id":"themes\\pacman\\source\\css\\_partial\\aside.styl","mtime":1423053919000},{"_id":"themes\\pacman\\source\\css\\_partial\\duoshuo.styl","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\_partial\\footer.styl","mtime":1423052738000},{"_id":"themes\\pacman\\source\\css\\_partial\\gallery.styl","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\_partial\\header.styl","mtime":1423054365000},{"_id":"themes\\pacman\\source\\css\\_partial\\helper.styl","mtime":1423054975000},{"_id":"themes\\pacman\\source\\css\\_partial\\index.styl","mtime":1423054192000},{"_id":"themes\\pacman\\source\\fancybox\\blank.gif","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_loading.gif","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_overlay.png","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_sprite.png","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.css","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.js","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\fancybox_buttons.png","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-media.js","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","mtime":1421649321000}],"Category":[{"name":"Linux","_id":"1d2jyw311n43r3gh","posts":["3csah714gcc42lcp"]},{"name":"猿人日常","_id":"oyou130b2hk1iwcb","posts":["r0ltv1z2tfcyojj0"]},{"name":"Python","_id":"jb4sz867ukgewpug","posts":["qlwn48lzjwxl9q78","8heotxof9snjtz3r","pm5cxs6e0l7xzx8h"]},{"name":"杂类","_id":"1kuk49q421w6a79d","posts":["7bqwxzirdecrnd2o"]},{"name":"Qt","_id":"f589bd5a8hcx0n9v","posts":["yjm3zab61uyblg5p"]}],"Page":[],"Post":[{"title":"Linux Shell 获取当前正在执行脚本的绝对路径","date":1422934710000,"categories":["1d2jyw311n43r3gh"],"tags":["c7753p669x3pxbjm","l8u31r763bi9c1e2"],"content":"<p>不知道为什么，以前经常使用的一些Linux命令或者使用技巧经常忘记。虽说在汇丰软件一年半都有使用Linux命令，照常理这些是记得很清楚的，但是我就是依赖笔记。每次忘记了就拿出个笔记看一下，命令复制粘贴。<br>哎~现在那一年半积累写下的笔记，早已随我的离开而烟消云散。<code>涉及前公司的保密协议和商业风险，电子版笔记一律不准拷贝出公司电脑。</code>所以在以后的日子里，我会把我学到的东西在<code>One Night In Mok&#39;s Studio</code>。<br>这里记录回以前经常忘记的一条Linux命令：<br>转自： <a href=\"http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm\" title=\"http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm\" target=\"_blank\" rel=\"external\">http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"shebang\">#!/bin/bash</span></div><div class=\"line\">basepath=$(<span class=\"built_in\">cd</span> `dirname <span class=\"variable\">$0</span>` && <span class=\"built_in\">pwd</span>)</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$basepath</span></div></pre></td></tr></table></figure>\n\n<p>常见的一种误区，是使用pwd命令，该命令的作用是“print name of current/working directory”，这才是此命令的真实含义，当前的工作目录，这里没有任何意思说明，这个目录就是脚本存放的目录。所以，这是不对的。</p>\n<p>另一个误人子弟的答案，是$0，这个也是不对的，这个$0是Bash环境下的特殊变量，其真实含义是：</p>\n<blockquote>\n<p>Expands to the name of the shell or shell script. This is set at shell initialization. If bash is invoked with a file of commands, $0 is set to the name of that file. If bash is started with the -c option, then $0 is set to the first argument after the string to be executed, if one is present. Otherwise, it is set to the file name used to invoke bash, as given by argument zero.</p>\n</blockquote>\n<p>这个$0有可能是好几种值，跟调用的方式有关系：</p>\n<blockquote>\n<ol>\n<li>使用一个文件调用bash，那$0的值，是那个文件的名字（没说是绝对路径噢）</li>\n<li>使用-c选项启动bash的话，真正执行的命令会从一个字符串中读取，字符串后面如果还有别的参数的话，使用从$0开始的特殊变量引用（跟路径无关了）</li>\n<li>除此以外，$0会被设置成调用bash的那个文件的名字（没说是绝对路径）</li>\n</ol>\n</blockquote>\n<p>很靠近了，但是还是不对，最后，我们说一下上面的脚本是什么意思，从里往外看：</p>\n<blockquote>\n<p><strong>dirname $0</strong> 取得当前执行的脚本文件的父目录<br><strong>cd `dirname $0`</strong> 进入这个目录（切换当前工作目录）<br><strong>pwd</strong> 显示当前工作目录（cd执行后的）</p>\n</blockquote>\n<p>由此，我们获得了当前正在执行的脚本的存放路径。</p>\n","source":"_posts/2015-02-03-Linux-Shell-获取当前正在执行脚本的绝对路径.md","raw":"title: Linux Shell 获取当前正在执行脚本的绝对路径\ndate: 2015-02-03 11:38:30\ncategories:\n- Linux\ntags:\n- Shell\n- 获取运行路径\n---\n不知道为什么，以前经常使用的一些Linux命令或者使用技巧经常忘记。虽说在汇丰软件一年半都有使用Linux命令，照常理这些是记得很清楚的，但是我就是依赖笔记。每次忘记了就拿出个笔记看一下，命令复制粘贴。\n哎~现在那一年半积累写下的笔记，早已随我的离开而烟消云散。`涉及前公司的保密协议和商业风险，电子版笔记一律不准拷贝出公司电脑。`所以在以后的日子里，我会把我学到的东西在`One Night In Mok's Studio`。\n这里记录回以前经常忘记的一条Linux命令：\n转自： [http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm](http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm \"http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm\")\n\n```bash\n#!/bin/bash\nbasepath=$(cd `dirname $0` && pwd)\necho $basepath\n```\n常见的一种误区，是使用pwd命令，该命令的作用是“print name of current/working directory”，这才是此命令的真实含义，当前的工作目录，这里没有任何意思说明，这个目录就是脚本存放的目录。所以，这是不对的。\n\n另一个误人子弟的答案，是$0，这个也是不对的，这个$0是Bash环境下的特殊变量，其真实含义是：\n\n>Expands to the name of the shell or shell script. This is set at shell initialization. If bash is invoked with a file of commands, $0 is set to the name of that file. If bash is started with the -c option, then $0 is set to the first argument after the string to be executed, if one is present. Otherwise, it is set to the file name used to invoke bash, as given by argument zero.\n\n这个$0有可能是好几种值，跟调用的方式有关系：\n>1. 使用一个文件调用bash，那$0的值，是那个文件的名字（没说是绝对路径噢）\n>2. 使用-c选项启动bash的话，真正执行的命令会从一个字符串中读取，字符串后面如果还有别的参数的话，使用从$0开始的特殊变量引用（跟路径无关了）\n>3. 除此以外，$0会被设置成调用bash的那个文件的名字（没说是绝对路径）\n\n很靠近了，但是还是不对，最后，我们说一下上面的脚本是什么意思，从里往外看：\n>**dirname $0** 取得当前执行的脚本文件的父目录\n>**cd \\`dirname $0\\`** 进入这个目录（切换当前工作目录）\n>**pwd** 显示当前工作目录（cd执行后的）\n\n由此，我们获得了当前正在执行的脚本的存放路径。\n","slug":"Linux-Shell-获取当前正在执行脚本的绝对路径","updated":1422953055000,"excerpt":"","_id":"3csah714gcc42lcp","comments":true,"layout":"post","photos":[],"link":""},{"title":"One Night in Mok's Studio","date":1422962463000,"categories":["oyou130b2hk1iwcb"],"tags":["hu9ajexky7qu3ch6","r0f3g5xkdbw1oie7"],"content":"<p>想了很久，实在是想不到应该帮我的个人网站起个怎样的名字。本人不喜欢高富帅或者屌丝的命名风格，也不喜欢不够特别的命名。思考良久，我想还是用回以前想到的一个名字吧 - <strong><code>One Night in Mok&#39;s Studio</code></strong>。许多灵感都是在不经意间来的，<strong><code>One Night in Mok&#39;s Studio</code></strong> 记录了我一次又一次不经意间萌发的灵感，没有多复杂的意思，这就是我以此命名的原因。<br><br>近日，我终于入手了<code>moky.cc</code>这个域名，这一买就是十年。说到买这个域名，其实我都拖了整整四年。四年前，我就计划要搞个人网站，但毕竟人都是有惰性的，当时也不断有其他事情干，于是就这样慢慢淡出了这个计划。直到最近，我才狠下心来好好做，虽然最近比以前还忙，但我总会留出一点时间去准备网站。<br><br>最近生活变化挺大的，以至于我特别想静下心去记录一下。很多东西，错过了也不值得留恋，有的东西却想好好地记录下来，以后再拿出来留念。2015年1月12日，这是我在我第一家公司<code>汇丰软件</code>工作的最后一天。那天我没有因此而特别高兴，因为我不仅面临新公司更大的挑战，而且要和我相处一年半的好同事好朋友告别了，我想我这辈子也不会忘记我在<code>汇丰软件</code>工作的这段深刻回忆。<br><img src=\"5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg\" alt=\"\"></p>\n<p><img src=\"5e22d182jw1eowhbmlgsxj20m80gotcg.jpg\" alt=\"\"></p>\n<p>我发现我有一个非常好的习惯，那就是记笔记。干我们程序猿这一行，用到的技术使用技巧和知识要点是非常多的，而我的记性是非常不好的，所以我就逐渐养成了记笔记的习惯。记得我在以前公司，用的就是<code>OneNote</code>，但是出于公司信息安全，这个1G多的笔记并没有随我离开公司，现在我的心血应该已经随电脑硬盘格式化了。所以以后的笔记，我只会记录在这个网站里，我希望这既可以方便自己也可以帮助别人。<br><br>来到新公司，对于我来说是一个新的起点，在接下来的日子里，用两个字概括 - <code>奋斗</code>。我一直都相信，念念不忘，必有回响。上一个念念不忘已经有所回响，下一个念念不忘会因为我的努力而有所回响么？</p>\n","source":"_posts/2015-02-03-One-night-in-Mok-s-Studio.md","raw":"title: \"One Night in Mok's Studio\"\ndate: 2015-02-03 19:21:03\ncategories:\n- 猿人日常\ntags:\n- 新起点\n- 奋斗\n---\n想了很久，实在是想不到应该帮我的个人网站起个怎样的名字。本人不喜欢高富帅或者屌丝的命名风格，也不喜欢不够特别的命名。思考良久，我想还是用回以前想到的一个名字吧 - **`One Night in Mok's Studio`**。许多灵感都是在不经意间来的，**`One Night in Mok's Studio`** 记录了我一次又一次不经意间萌发的灵感，没有多复杂的意思，这就是我以此命名的原因。<br>\n近日，我终于入手了`moky.cc`这个域名，这一买就是十年。说到买这个域名，其实我都拖了整整四年。四年前，我就计划要搞个人网站，但毕竟人都是有惰性的，当时也不断有其他事情干，于是就这样慢慢淡出了这个计划。直到最近，我才狠下心来好好做，虽然最近比以前还忙，但我总会留出一点时间去准备网站。<br>\n最近生活变化挺大的，以至于我特别想静下心去记录一下。很多东西，错过了也不值得留恋，有的东西却想好好地记录下来，以后再拿出来留念。2015年1月12日，这是我在我第一家公司`汇丰软件`工作的最后一天。那天我没有因此而特别高兴，因为我不仅面临新公司更大的挑战，而且要和我相处一年半的好同事好朋友告别了，我想我这辈子也不会忘记我在`汇丰软件`工作的这段深刻回忆。\n![](5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg)\n\n![](5e22d182jw1eowhbmlgsxj20m80gotcg.jpg)\n\n我发现我有一个非常好的习惯，那就是记笔记。干我们程序猿这一行，用到的技术使用技巧和知识要点是非常多的，而我的记性是非常不好的，所以我就逐渐养成了记笔记的习惯。记得我在以前公司，用的就是`OneNote`，但是出于公司信息安全，这个1G多的笔记并没有随我离开公司，现在我的心血应该已经随电脑硬盘格式化了。所以以后的笔记，我只会记录在这个网站里，我希望这既可以方便自己也可以帮助别人。<br>\n来到新公司，对于我来说是一个新的起点，在接下来的日子里，用两个字概括 - `奋斗`。我一直都相信，念念不忘，必有回响。上一个念念不忘已经有所回响，下一个念念不忘会因为我的努力而有所回响么？","slug":"One-night-in-Mok-s-Studio","updated":1422969561000,"excerpt":"","_id":"r0ltv1z2tfcyojj0","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python正则表达式指南","date":1422934710000,"categories":["jb4sz867ukgewpug"],"tags":["9byqrzf9s31ju1gn","ag976g7st2qxri0c"],"content":"<blockquote>\n<p>本文介绍了Python对于正则表达式的支持，包括正则表达式基础以及Python正则表达式标准库的完整介绍及使用示例。本文的内容不包括如何编写高效的正则表达式、如何优化正则表达式，这些主题请查看其他教程。</p>\n<p>注意：本文基于Python2.4完成；如果看到不明白的词汇请记得百度谷歌或维基，whatever。</p>\n<p><code>尊重作者的劳动，转载请注明作者及原文地址</code>:<br><a href=\"http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html\" title=\"http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html</a></p>\n</blockquote>\n<h3 id=\"1-_正则表达式基础\">1. 正则表达式基础</h3>\n<h4 id=\"1-1-_简单介绍\">1.1. 简单介绍</h4>\n<p>正则表达式并不是Python的一部分。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。如果已经在其他语言里使用过正则表达式，只需要简单看一看就可以上手了。</p>\n<p>下图展示了使用正则表达式进行匹配的流程：<br><img src=\"687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png\" alt=\"\"></p>\n<p>正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。如果表达式中有量词或边界，这个过程会稍微有一些不同，但也是很好理解的，看下图中的示例以及自己多使用几次就能明白。</p>\n<p>下图列出了Python支持的正则表达式元字符和语法：<br><img src=\"687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png\" alt=\"\"></p>\n<h4 id=\"1-2-_数量词的贪婪模式与非贪婪模式\">1.2. 数量词的贪婪模式与非贪婪模式</h4>\n<p>正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式”ab*“如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab*?”，将找到”a”。</p>\n<h4 id=\"1-3-_反斜杠的困扰\">1.3. 反斜杠的困扰</h4>\n<p>与大多数编程语言相同，正则表达式里使用”\\”作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\\\\“：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r”\\“表示。同样，匹配一个数字的”\\d”可以写成r”\\d”。有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。</p>\n<h4 id=\"1-4-_匹配模式\">1.4. 匹配模式</h4>\n<p>正则表达式提供了一些可用的匹配模式，比如忽略大小写、多行匹配等，这部分内容将在Pattern类的工厂方法<code>re.compile(pattern[, flags])</code>中一起介绍。</p>\n<p><br></p>\n<h3 id=\"2-_re模块\">2. re模块</h3>\n<h4 id=\"2-1-_开始使用re\">2.1. 开始使用re</h4>\n<p>Python通过re模块提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># encoding: UTF-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将正则表达式编译成Pattern对象</span></div><div class=\"line\">pattern = re.compile(<span class=\"string\">r'hello'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None</span></div><div class=\"line\">match = pattern.match(<span class=\"string\">'hello world!'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> match:</div><div class=\"line\">    <span class=\"comment\"># 使用Match获得分组信息</span></div><div class=\"line\">    <span class=\"keyword\">print</span> match.group()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### 输出 ###</span></div><div class=\"line\"><span class=\"comment\"># hello</span></div></pre></td></tr></table></figure>\n\n<p><code>re.compile(strPattern[, flag]):</code><br>这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。 第二个参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如<code>re.I | re.M</code>另外，你也可以在regex字符串中指定模式，比如<code>re.compile(&#39;pattern&#39;, re.I | re.M)与re.compile(&#39;(?im)pattern&#39;)</code>是等价的。</p>\n<p>可选值有：</p>\n<ul>\n<li><code>re.I(re.IGNORECASE)</code>: 忽略大小写（括号内是完整写法，下同）</li>\n<li><code>M(MULTILINE)</code>: 多行模式，改变’^’和’$’的行为（参见上图）</li>\n<li><code>S(DOTALL)</code>: 点任意匹配模式，改变’.’的行为</li>\n<li><code>L(LOCALE)</code>: 使预定字符类 \\w \\W \\b \\B \\s \\S 取决于当前区域设定</li>\n<li><code>U(UNICODE)</code>: 使预定字符类 \\w \\W \\b \\B \\s \\S \\d \\D 取决于unicode定义的字符属性</li>\n<li><code>X(VERBOSE)</code>: 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。以下两个正则表达式是等价的：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = re.compile(<span class=\"string\">r\"\"\"\\d +  # the integral part</span></div><div class=\"line\">                   \\.    # the decimal point</div><div class=\"line\">                   \\d *  # some fractional digits\"\"\", re.X)</div><div class=\"line\">b = re.compile(<span class=\"string\">r\"\\d+\\.\\d*\"</span></div></pre></td></tr></table></figure>\n\n<p>re提供了众多模块方法用于完成正则表达式的功能。这些方法可以使用Pattern实例的相应方法替代，唯一的好处是少写一行re.compile()代码，但同时也无法复用编译后的Pattern对象。这些方法将在Pattern类的实例方法部分一起介绍。如上面这个例子可以简写为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">m = re.match(<span class=\"string\">r'hello'</span>, <span class=\"string\">'hello world!'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> m.group()</div></pre></td></tr></table></figure>\n\n<p>re模块还提供了一个方法escape(string)，用于将string中的正则表达式元字符如*/+/?等之前加上转义符再返回，在需要大量匹配元字符时有那么一点用。</p>\n<h4 id=\"2-2-_Match\">2.2. Match</h4>\n<p>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p>\n<p>属性：</p>\n<ul>\n<li><code>string</code>: 匹配时使用的文本。</li>\n<li><code>re</code>: 匹配时使用的Pattern对象。</li>\n<li><code>pos</code>: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</li>\n<li><code>endpos</code>: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</li>\n<li><code>lastindex</code>: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</li>\n<li><code>lastgroup</code>: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</li>\n</ul>\n<p>方法：</p>\n<ul>\n<li><code>group([group1, …])</code>: 获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。</li>\n<li><code>groups([default])</code>: 以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。</li>\n<li><code>groupdict([default])</code>: 返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</li>\n<li><code>start([group])</code>: 返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</li>\n<li><code>end([group])</code>: 返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</li>\n<li><code>span([group])</code>: 返回(start(group), end(group))。</li>\n<li><code>expand(template)</code>: 将匹配到的分组代入template中然后返回。template中可以使用\\id或\\g<id>、\\g<name>引用分组，但不能使用编号0。\\id与\\g<id>是等价的；但\\10将被认为是第10个分组，如果你想表达\\1之后是字符’0’，只能使用\\g<1>0。</1></id></name></id></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\">m = re.match(<span class=\"string\">r'(\\w+) (\\w+)(?P&lt;sign&gt;.*)'</span>, <span class=\"string\">'hello world!'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.string:\"</span>, m.string</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.re:\"</span>, m.re</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.pos:\"</span>, m.pos</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.endpos:\"</span>, m.endpos</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.lastindex:\"</span>, m.lastindex</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.lastgroup:\"</span>, m.lastgroup</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.group(1,2):\"</span>, m.group(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.groups():\"</span>, m.groups()</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.groupdict():\"</span>, m.groupdict()</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.start(2):\"</span>, m.start(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.end(2):\"</span>, m.end(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.span(2):\"</span>, m.span(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">r\"m.expand(r'\\2 \\1\\3'):\"</span>, m.expand(<span class=\"string\">r'\\2 \\1\\3'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># m.string: hello world!</span></div><div class=\"line\"><span class=\"comment\"># m.re: &lt;_sre.SRE_Pattern object at 0x016E1A38&gt;</span></div><div class=\"line\"><span class=\"comment\"># m.pos: 0</span></div><div class=\"line\"><span class=\"comment\"># m.endpos: 12</span></div><div class=\"line\"><span class=\"comment\"># m.lastindex: 3</span></div><div class=\"line\"><span class=\"comment\"># m.lastgroup: sign</span></div><div class=\"line\"><span class=\"comment\"># m.group(1,2): ('hello', 'world')</span></div><div class=\"line\"><span class=\"comment\"># m.groups(): ('hello', 'world', '!')</span></div><div class=\"line\"><span class=\"comment\"># m.groupdict(): {'sign': '!'}</span></div><div class=\"line\"><span class=\"comment\"># m.start(2): 6</span></div><div class=\"line\"><span class=\"comment\"># m.end(2): 11</span></div><div class=\"line\"><span class=\"comment\"># m.span(2): (6, 11)</span></div><div class=\"line\"><span class=\"comment\"># m.expand(r'\\2 \\1\\3'): world hello!</span></div></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-_Pattern\">2.3. Pattern</h4>\n<p>Pattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。<br>Pattern不能直接实例化，必须使用re.compile()进行构造。<br>Pattern提供了几个可读属性用于获取表达式的相关信息：</p>\n<ul>\n<li><code>pattern</code>: 编译时用的表达式字符串。</li>\n<li><code>flags</code>: 编译时用的匹配模式。数字形式。</li>\n<li><code>groups</code>: 表达式中分组的数量。</li>\n<li><code>groupindex</code>: 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\">p = re.compile(<span class=\"string\">r'(\\w+) (\\w+)(?P&lt;sign&gt;.*)'</span>, re.DOTALL)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"p.pattern:\"</span>, p.pattern</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"p.flags:\"</span>, p.flags</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"p.groups:\"</span>, p.groups</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"p.groupindex:\"</span>, p.groupindex</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># p.pattern: (\\w+) (\\w+)(?P&lt;sign&gt;.*)</span></div><div class=\"line\"><span class=\"comment\"># p.flags: 16</span></div><div class=\"line\"><span class=\"comment\"># p.groups: 3</span></div><div class=\"line\"><span class=\"comment\"># p.groupindex: {'sign': 3}</span></div></pre></td></tr></table></figure>\n\n<p>实例方法[ | re模块方法]：</p>\n<ul>\n<li><code>match(string[, pos[, endpos]]) | re.match(pattern, string[, flags])</code>:<br><br>这个方法将从string的pos下标处起尝试匹配pattern；如果pattern结束时仍可匹配，则返回一个Match对象；如果匹配过程中pattern无法匹配，或者匹配未结束就已到达endpos，则返回None。<br><br>pos和endpos的默认值分别为0和len(string)；re.match()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。<br><br>注意：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符’$’。<br><br>示例参见2.1小节。</li>\n<li><code>search(string[, pos[, endpos]]) | re.search(pattern, string[, flags])</code>:<br><br>这个方法用于查找字符串中可以匹配成功的子串。从string的pos下标处起尝试匹配pattern，如果pattern结束时仍可匹配，则返回一个Match对象；若无法匹配，则将pos加1后重新尝试匹配；直到pos=endpos时仍无法匹配则返回None。<br><br>pos和endpos的默认值分别为0和len(string))；re.search()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># encoding: UTF-8 </span></div><div class=\"line\"><span class=\"keyword\">import</span> re </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将正则表达式编译成Pattern对象 </span></div><div class=\"line\">pattern = re.compile(<span class=\"string\">r'world'</span>) </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 使用search()查找匹配的子串，不存在能匹配的子串时将返回None </span></div><div class=\"line\"><span class=\"comment\"># 这个例子中使用match()无法成功匹配 </span></div><div class=\"line\">match = pattern.search(<span class=\"string\">'hello world!'</span>) </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> match: </div><div class=\"line\">    <span class=\"comment\"># 使用Match获得分组信息 </span></div><div class=\"line\">    <span class=\"keyword\">print</span> match.group() </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### 输出 ### </span></div><div class=\"line\"><span class=\"comment\"># world</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>split(string[, maxsplit]) | re.split(pattern, string[, maxsplit])</code>:<br><br>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> p.split(<span class=\"string\">'one1two2three3four4'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># ['one', 'two', 'three', 'four', '']</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags])</code>:<br><br>搜索string，以列表形式返回全部能匹配的子串。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> p.findall(<span class=\"string\">'one1two2three3four4'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># ['1', '2', '3', '4']</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags])</code>:<br><br>搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> p.finditer(<span class=\"string\">'one1two2three3four4'</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> m.group(),</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># 1 2 3 4</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>sub(repl, string[, count]) | re.sub(pattern, repl, string[, count])</code>:<br><br>使用repl替换string中每一个匹配的子串后返回替换后的字符串。<br><br>当repl是一个字符串时，可以使用\\id或\\g<id>、\\g<name>引用分组，但不能使用编号0。<br><br>当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。<br><br>count用于指定最多替换次数，不指定时全部替换。</name></id></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'(\\w+) (\\w+)'</span>)</div><div class=\"line\">s = <span class=\"string\">'i say, hello world!'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> p.sub(<span class=\"string\">r'\\2 \\1'</span>, s)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(m)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> m.group(<span class=\"number\">1</span>).title() + <span class=\"string\">' '</span> + m.group(<span class=\"number\">2</span>).title()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> p.sub(func, s)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># say i, world hello!</span></div><div class=\"line\"><span class=\"comment\"># I Say, Hello World!</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>subn(repl, string[, count]) |re.sub(pattern, repl, string[, count])</code>:<br><br>返回 (sub(repl, string[, count]), 替换次数)。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'(\\w+) (\\w+)'</span>)</div><div class=\"line\">s = <span class=\"string\">'i say, hello world!'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> p.subn(<span class=\"string\">r'\\2 \\1'</span>, s)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(m)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> m.group(<span class=\"number\">1</span>).title() + <span class=\"string\">' '</span> + m.group(<span class=\"number\">2</span>).title()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> p.subn(func, s)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># ('say i, world hello!', 2)</span></div><div class=\"line\"><span class=\"comment\"># ('I Say, Hello World!', 2)</span></div></pre></td></tr></table></figure>\n\n<p>以上就是Python对于正则表达式的支持。熟练掌握正则表达式是每一个程序员必须具备的技能，这年头没有不与字符串打交道的程序了。笔者也处于初级阶段，与君共勉，^_^</p>\n<p>另外，图中的特殊构造部分没有举出例子，用到这些的正则表达式是具有一定难度的。有兴趣可以思考一下，如何匹配不是以abc开头的单词，^_^</p>\n<p>全文结束</p>\n","source":"_posts/2015-02-03-Python正则表达式指南.md","raw":"title: Python正则表达式指南\ndate: 2015-02-03 11:38:30\ncategories:\n- Python\ntags:\n- Python\n- 正则表达式\n---\n>本文介绍了Python对于正则表达式的支持，包括正则表达式基础以及Python正则表达式标准库的完整介绍及使用示例。本文的内容不包括如何编写高效的正则表达式、如何优化正则表达式，这些主题请查看其他教程。\n>\n>注意：本文基于Python2.4完成；如果看到不明白的词汇请记得百度谷歌或维基，whatever。\n\n>`尊重作者的劳动，转载请注明作者及原文地址`:\n>[http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html](http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html \"http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html\")\n\n### 1. 正则表达式基础\n#### 1.1. 简单介绍\n正则表达式并不是Python的一部分。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。如果已经在其他语言里使用过正则表达式，只需要简单看一看就可以上手了。\n\n下图展示了使用正则表达式进行匹配的流程：\n![](687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png)\n\n正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。如果表达式中有量词或边界，这个过程会稍微有一些不同，但也是很好理解的，看下图中的示例以及自己多使用几次就能明白。\n\n下图列出了Python支持的正则表达式元字符和语法：\n![](687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png)\n\n#### 1.2. 数量词的贪婪模式与非贪婪模式\n正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式\"ab\\*\"如果用于查找\"abbbc\"，将找到\"abbb\"。而如果使用非贪婪的数量词\"ab\\*?\"，将找到\"a\"。\n\n#### 1.3. 反斜杠的困扰\n与大多数编程语言相同，正则表达式里使用\"\\\"作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符\"\\\"，那么使用编程语言表示的正则表达式里将需要4个反斜杠\"\\\\\\\\\"：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r\"\\\\\"表示。同样，匹配一个数字的\"\\\\d\"可以写成r\"\\d\"。有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。\n\n#### 1.4. 匹配模式\n正则表达式提供了一些可用的匹配模式，比如忽略大小写、多行匹配等，这部分内容将在Pattern类的工厂方法`re.compile(pattern[, flags])`中一起介绍。\n\n<br>\n### 2. re模块\n#### 2.1. 开始使用re\nPython通过re模块提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。\n```python\n# encoding: UTF-8\nimport re\n \n# 将正则表达式编译成Pattern对象\npattern = re.compile(r'hello')\n \n# 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None\nmatch = pattern.match('hello world!')\n \nif match:\n    # 使用Match获得分组信息\n    print match.group()\n \n### 输出 ###\n# hello\n```\n`re.compile(strPattern[, flag]):`\n这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。 第二个参数flag是匹配模式，取值可以使用按位或运算符'|'表示同时生效，比如`re.I | re.M`另外，你也可以在regex字符串中指定模式，比如`re.compile('pattern', re.I | re.M)与re.compile('(?im)pattern')`是等价的。\n\n可选值有：\n- `re.I(re.IGNORECASE)`: 忽略大小写（括号内是完整写法，下同）\n- `M(MULTILINE)`: 多行模式，改变'^'和'$'的行为（参见上图）\n- `S(DOTALL)`: 点任意匹配模式，改变'.'的行为\n- `L(LOCALE)`: 使预定字符类 \\w \\W \\b \\B \\s \\S 取决于当前区域设定\n- `U(UNICODE)`: 使预定字符类 \\w \\W \\b \\B \\s \\S \\d \\D 取决于unicode定义的字符属性\n- `X(VERBOSE)`: 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。以下两个正则表达式是等价的：\n```python\na = re.compile(r\"\"\"\\d +  # the integral part\n                   \\.    # the decimal point\n                   \\d *  # some fractional digits\"\"\", re.X)\nb = re.compile(r\"\\d+\\.\\d*\"\n```\n\nre提供了众多模块方法用于完成正则表达式的功能。这些方法可以使用Pattern实例的相应方法替代，唯一的好处是少写一行re.compile()代码，但同时也无法复用编译后的Pattern对象。这些方法将在Pattern类的实例方法部分一起介绍。如上面这个例子可以简写为：\n```python\nm = re.match(r'hello', 'hello world!')\nprint m.group()\n```\n\nre模块还提供了一个方法escape(string)，用于将string中的正则表达式元字符如*/+/?等之前加上转义符再返回，在需要大量匹配元字符时有那么一点用。\n\n#### 2.2. Match\nMatch对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。\n\n属性：\n- `string`: 匹配时使用的文本。\n- `re`: 匹配时使用的Pattern对象。\n- `pos`: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。\n- `endpos`: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。\n- `lastindex`: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。\n- `lastgroup`: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。\n\n方法：\n- `group([group1, …])`: 获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。\n- `groups([default])`: 以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。\n- `groupdict([default])`: 返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。\n- `start([group])`: 返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。\n- `end([group])`: 返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。\n- `span([group])`: 返回(start(group), end(group))。\n- `expand(template)`: 将匹配到的分组代入template中然后返回。template中可以使用\\id或\\g<id>、\\g<name>引用分组，但不能使用编号0。\\id与\\g<id>是等价的；但\\10将被认为是第10个分组，如果你想表达\\1之后是字符'0'，只能使用\\g<1>0。\n```python\nimport re\nm = re.match(r'(\\w+) (\\w+)(?P<sign>.*)', 'hello world!')\n \nprint \"m.string:\", m.string\nprint \"m.re:\", m.re\nprint \"m.pos:\", m.pos\nprint \"m.endpos:\", m.endpos\nprint \"m.lastindex:\", m.lastindex\nprint \"m.lastgroup:\", m.lastgroup\n \nprint \"m.group(1,2):\", m.group(1, 2)\nprint \"m.groups():\", m.groups()\nprint \"m.groupdict():\", m.groupdict()\nprint \"m.start(2):\", m.start(2)\nprint \"m.end(2):\", m.end(2)\nprint \"m.span(2):\", m.span(2)\nprint r\"m.expand(r'\\2 \\1\\3'):\", m.expand(r'\\2 \\1\\3')\n \n### output ###\n# m.string: hello world!\n# m.re: <_sre.SRE_Pattern object at 0x016E1A38>\n# m.pos: 0\n# m.endpos: 12\n# m.lastindex: 3\n# m.lastgroup: sign\n# m.group(1,2): ('hello', 'world')\n# m.groups(): ('hello', 'world', '!')\n# m.groupdict(): {'sign': '!'}\n# m.start(2): 6\n# m.end(2): 11\n# m.span(2): (6, 11)\n# m.expand(r'\\2 \\1\\3'): world hello!\n```\n\n#### 2.3. Pattern\nPattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。\nPattern不能直接实例化，必须使用re.compile()进行构造。\nPattern提供了几个可读属性用于获取表达式的相关信息：\n- `pattern`: 编译时用的表达式字符串。\n- `flags`: 编译时用的匹配模式。数字形式。\n- `groups`: 表达式中分组的数量。\n- `groupindex`: 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。\n```python\nimport re\np = re.compile(r'(\\w+) (\\w+)(?P<sign>.*)', re.DOTALL)\n \nprint \"p.pattern:\", p.pattern\nprint \"p.flags:\", p.flags\nprint \"p.groups:\", p.groups\nprint \"p.groupindex:\", p.groupindex\n \n### output ###\n# p.pattern: (\\w+) (\\w+)(?P<sign>.*)\n# p.flags: 16\n# p.groups: 3\n# p.groupindex: {'sign': 3}\n```\n实例方法[ | re模块方法]：\n\n- `match(string[, pos[, endpos]]) | re.match(pattern, string[, flags])`:\n<br>这个方法将从string的pos下标处起尝试匹配pattern；如果pattern结束时仍可匹配，则返回一个Match对象；如果匹配过程中pattern无法匹配，或者匹配未结束就已到达endpos，则返回None。\n<br>pos和endpos的默认值分别为0和len(string)；re.match()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。\n<br>注意：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符'$'。\n<br>示例参见2.1小节。\n- `search(string[, pos[, endpos]]) | re.search(pattern, string[, flags])`:\n<br>这个方法用于查找字符串中可以匹配成功的子串。从string的pos下标处起尝试匹配pattern，如果pattern结束时仍可匹配，则返回一个Match对象；若无法匹配，则将pos加1后重新尝试匹配；直到pos=endpos时仍无法匹配则返回None。\n<br>pos和endpos的默认值分别为0和len(string))；re.search()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。\n```python\n# encoding: UTF-8 \nimport re \n \n# 将正则表达式编译成Pattern对象 \npattern = re.compile(r'world') \n \n# 使用search()查找匹配的子串，不存在能匹配的子串时将返回None \n# 这个例子中使用match()无法成功匹配 \nmatch = pattern.search('hello world!') \n \nif match: \n    # 使用Match获得分组信息 \n    print match.group() \n \n### 输出 ### \n# world\n```\n- `split(string[, maxsplit]) | re.split(pattern, string[, maxsplit])`:\n<br>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。\n```python\nimport re\n \np = re.compile(r'\\d+')\nprint p.split('one1two2three3four4')\n \n### output ###\n# ['one', 'two', 'three', 'four', '']\n```\n- `findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags])`:\n<br>搜索string，以列表形式返回全部能匹配的子串。\n```python\nimport re\n \np = re.compile(r'\\d+')\nprint p.findall('one1two2three3four4')\n \n### output ###\n# ['1', '2', '3', '4']\n```\n- `finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags])`:\n<br>搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。\n```python\nimport re\n \np = re.compile(r'\\d+')\nfor m in p.finditer('one1two2three3four4'):\n    print m.group(),\n \n### output ###\n# 1 2 3 4\n```\n- `sub(repl, string[, count]) | re.sub(pattern, repl, string[, count])`:\n<br>使用repl替换string中每一个匹配的子串后返回替换后的字符串。\n<br>当repl是一个字符串时，可以使用\\id或\\g<id>、\\g<name>引用分组，但不能使用编号0。\n<br>当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。\n<br>count用于指定最多替换次数，不指定时全部替换。\n```python\nimport re\n \np = re.compile(r'(\\w+) (\\w+)')\ns = 'i say, hello world!'\n \nprint p.sub(r'\\2 \\1', s)\n \ndef func(m):\n    return m.group(1).title() + ' ' + m.group(2).title()\n \nprint p.sub(func, s)\n \n### output ###\n# say i, world hello!\n# I Say, Hello World!\n```\n- `subn(repl, string[, count]) |re.sub(pattern, repl, string[, count])`:\n<br>返回 (sub(repl, string[, count]), 替换次数)。\n```python\nimport re\n \np = re.compile(r'(\\w+) (\\w+)')\ns = 'i say, hello world!'\n \nprint p.subn(r'\\2 \\1', s)\n \ndef func(m):\n    return m.group(1).title() + ' ' + m.group(2).title()\n \nprint p.subn(func, s)\n \n### output ###\n# ('say i, world hello!', 2)\n# ('I Say, Hello World!', 2)\n```\n以上就是Python对于正则表达式的支持。熟练掌握正则表达式是每一个程序员必须具备的技能，这年头没有不与字符串打交道的程序了。笔者也处于初级阶段，与君共勉，^_^\n\n另外，图中的特殊构造部分没有举出例子，用到这些的正则表达式是具有一定难度的。有兴趣可以思考一下，如何匹配不是以abc开头的单词，^_^\n\n全文结束\n","slug":"Python正则表达式指南","updated":1422957459000,"excerpt":"","_id":"qlwn48lzjwxl9q78","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python 中if  _name _ == ' _main _'：用法解析","date":1423031926000,"categories":["jb4sz867ukgewpug"],"tags":["9byqrzf9s31ju1gn","jj3o2f9t8venvl61"],"content":"<blockquote>\n<p>原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。<br><a href=\"http://keliang.blog.51cto.com/3359430/649318\" title=\"http://keliang.blog.51cto.com/3359430/649318\" target=\"_blank\" rel=\"external\">http://keliang.blog.51cto.com/3359430/649318</a></p>\n</blockquote>\n<p>想必很多初次接触python的同学都会见到这样一个语句，if __name__ == “__main__“：</p>\n<p>那么这个语句到底是做什么用的呢？在解释之前，首先要声明的是，不管你是多么小白，你一定要知道的是：</p>\n<ol>\n<li>python文件的后缀为.py；</li>\n<li>py文件既可以用来直接执行，就像一个小程序一样，也可以用来作为模块被导入（比如360安全卫士，就是依靠一个个功能模块来实现的，好比360安全卫士本身框架是一个桌面，而上面的图标就是快捷方式，这些快捷方式所指向的就是这一个个功能模块）</li>\n<li>在python中导入模块一般使用的是import</li>\n</ol>\n<p>好了，在确定知道以上几点之后，就可以开始解释if __name__ == “__main__“：这个语句了。</p>\n<p>首先解释一下if，顾名思义，if就是如果的意思，在句子开始处加上if，就说明，这个句子是一个条件语句。学习if语句的使用是很简单的，当然想要真正灵活运用还需大量的实践。</p>\n<p>接着是 __name__，__name__作为模块的内置属性，简单点说呢，就是.py文件的调用方式。</p>\n<p>最后是__main__，刚才我也提过，.py文件有两种使用方式：作为模块被调用和直接使用。如果它等于”__main__“就表示是直接执行。</p>\n<p>总结：在if __name__ == “__main__“：之后的语句作为模块被调用的时候，语句之后的代码不执行；直接使用的时候，语句之后的代码执行。通常，此语句用于模块测试中使用。</p>\n","source":"_posts/2015-02-04-Python-中-if-name-main-用法解析.md","raw":"title: \"Python 中if \\__name\\__ == '\\__main\\__'：用法解析\"\ndate: 2015-02-04 14:38:46\ncategories:\n- Python\ntags:\n- Python\n- main\n---\n\n>原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n>[http://keliang.blog.51cto.com/3359430/649318](http://keliang.blog.51cto.com/3359430/649318 \"http://keliang.blog.51cto.com/3359430/649318\")\n\n想必很多初次接触python的同学都会见到这样一个语句，if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"：\n\n那么这个语句到底是做什么用的呢？在解释之前，首先要声明的是，不管你是多么小白，你一定要知道的是：\n\n1. python文件的后缀为.py；\n2. py文件既可以用来直接执行，就像一个小程序一样，也可以用来作为模块被导入（比如360安全卫士，就是依靠一个个功能模块来实现的，好比360安全卫士本身框架是一个桌面，而上面的图标就是快捷方式，这些快捷方式所指向的就是这一个个功能模块）\n3. 在python中导入模块一般使用的是import\n\n好了，在确定知道以上几点之后，就可以开始解释if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"：这个语句了。\n\n首先解释一下if，顾名思义，if就是如果的意思，在句子开始处加上if，就说明，这个句子是一个条件语句。学习if语句的使用是很简单的，当然想要真正灵活运用还需大量的实践。\n\n接着是 \\_\\_name\\_\\_，\\_\\_name\\_\\_作为模块的内置属性，简单点说呢，就是.py文件的调用方式。\n\n最后是\\_\\_main\\_\\_，刚才我也提过，.py文件有两种使用方式：作为模块被调用和直接使用。如果它等于\"\\_\\_main\\_\\_\"就表示是直接执行。\n\n总结：在if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"：之后的语句作为模块被调用的时候，语句之后的代码不执行；直接使用的时候，语句之后的代码执行。通常，此语句用于模块测试中使用。\n","slug":"Python-中-if-name-main-用法解析","updated":1423032955000,"excerpt":"","_id":"8heotxof9snjtz3r","comments":true,"layout":"post","photos":[],"link":""},{"title":"JSON解析器小练习","date":1421286601000,"categories":["jb4sz867ukgewpug"],"tags":["9byqrzf9s31ju1gn","q8esjac9kvw8nn1t","rtitidmvuochqoex"],"content":"<blockquote>\n<p>原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。</p>\n</blockquote>\n<p>来到网易的第三天，我还是在Python的学习阶段，不过对Python一些理论性的东西已经有所理解。与此同时，主管也有给我一些小练习，让我边做边熟悉。是的，学习一种新的编程语言最有效率的方法就是边看书边打代码做小练习，这在我之前的学习中深有体会。</p>\n","source":"_posts/2015-01-15-JSON解析器小练习.md","raw":"title: \"JSON解析器小练习\"\ndate: 2015-01-15 09:50:01\ncategories:\n- Python\ntags:\n- Python\n- JSON\n- 解析器\n---\n>原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n\n来到网易的第三天，我还是在Python的学习阶段，不过对Python一些理论性的东西已经有所理解。与此同时，主管也有给我一些小练习，让我边做边熟悉。是的，学习一种新的编程语言最有效率的方法就是边看书边打代码做小练习，这在我之前的学习中深有体会。","slug":"JSON解析器小练习","updated":1423052442000,"excerpt":"","_id":"pm5cxs6e0l7xzx8h","comments":true,"layout":"post","photos":[],"link":""},{"title":"ASCII 字符表参考","date":1422970347000,"categories":["1kuk49q421w6a79d"],"tags":["av6lf6zkdddav393"],"content":"<p>经常会用到的<code>ASCII</code>字符表，记录一下，免得每次都百度了。</p>\n<p><img src=\"9213b07eca8065387d4c671896dda144ad348213.jpg\" alt=\"\"></p>\n<p><img src=\"fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg\" alt=\"\"></p>\n","source":"_posts/2015-02-03-ASCII-字符表参考.md","raw":"title: ASCII 字符表参考\ndate: 2015-02-03 21:32:27\ncategories:\n- 杂类\ntags:\n- ASCII\n---\n经常会用到的`ASCII`字符表，记录一下，免得每次都百度了。\n\n![](9213b07eca8065387d4c671896dda144ad348213.jpg)\n\n![](fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg)\n","slug":"ASCII-字符表参考","updated":1422970575000,"excerpt":"","_id":"7bqwxzirdecrnd2o","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt 字体大小的计算","date":1421635030000,"categories":["f589bd5a8hcx0n9v"],"tags":["fucehg2ejyjnd81k","bxeffjtszvvj4fxd"],"content":"<p><br></p>\n<h2 id=\"计算字符串或者字符宽度的系统函数有：\">计算字符串或者字符宽度的系统函数有：</h2>\n<h3 id=\"QLabel::fontMetrics()-width(QString_s):_获取字符串s的总像素宽度。\">QLabel::fontMetrics().width(QString s): 获取字符串s的总像素宽度。</h3>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">int QFontMetrics::width ( const QString & <span class=\"keyword\">text</span>, int <span class=\"built_in\">len</span> = -<span class=\"number\">1</span> ) const</div><div class=\"line\"></div><div class=\"line\">Returns <span class=\"operator\">the</span> width <span class=\"operator\">in</span> pixels <span class=\"operator\">of</span> <span class=\"operator\">the</span> <span class=\"keyword\">first</span> <span class=\"built_in\">len</span> <span class=\"keyword\">characters</span> <span class=\"operator\">of</span> <span class=\"keyword\">text</span>. If <span class=\"built_in\">len</span> is negative (<span class=\"operator\">the</span> default), <span class=\"operator\">the</span> entire <span class=\"keyword\">string</span> is used.</div><div class=\"line\"></div><div class=\"line\">Note that this <span class=\"built_in\">value</span> is <span class=\"operator\">not</span> equal <span class=\"built_in\">to</span> boundingRect().width(); boundingRect() returns <span class=\"operator\">a</span> rectangle describing <span class=\"operator\">the</span> pixels this <span class=\"keyword\">string</span> will cover whereas width() returns <span class=\"operator\">the</span> distance <span class=\"built_in\">to</span> where <span class=\"operator\">the</span> next <span class=\"keyword\">string</span> should be drawn.</div><div class=\"line\"></div><div class=\"line\">See also boundingRect().</div></pre></td></tr></table></figure>\n\n<h3 id=\"QLabel::fontMetrics()-height():_获取字体的高度。\">QLabel::fontMetrics().height(): 获取字体的高度。</h3>\n<p>int QFontMetrics::height () const</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Returns <span class=\"operator\">the</span> height <span class=\"operator\">of</span> <span class=\"operator\">the</span> font.</div><div class=\"line\"></div><div class=\"line\">This is always equal <span class=\"built_in\">to</span> ascent()+descent()+<span class=\"number\">1</span> (<span class=\"operator\">the</span> <span class=\"number\">1</span> is <span class=\"keyword\">for</span> <span class=\"operator\">the</span> base <span class=\"built_in\">line</span>).</div><div class=\"line\"></div><div class=\"line\">See also leading() <span class=\"operator\">and</span> lineSpacing().</div></pre></td></tr></table></figure>\n\n<h3 id=\"QLabel::fontMetrics()-lineSpacing():_获取字体的高度，包括文字的实际宽度和行距。\">QLabel::fontMetrics().lineSpacing(): 获取字体的高度，包括文字的实际宽度和行距。</h3>\n<h3 id=\"QLabel::fontMetrics()-leading():_行间距\">QLabel::fontMetrics().leading(): 行间距</h3>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">int QFontMetrics::leading () const</div><div class=\"line\"></div><div class=\"line\">Returns <span class=\"operator\">the</span> leading <span class=\"operator\">of</span> <span class=\"operator\">the</span> font.</div><div class=\"line\"></div><div class=\"line\">This is <span class=\"operator\">the</span> natural inter-<span class=\"built_in\">line</span> spacing.</div><div class=\"line\"></div><div class=\"line\">See also height() <span class=\"operator\">and</span> lineSpacing().</div></pre></td></tr></table></figure>\n\n<h3 id=\"QT内部计算字体、像素和字符宽度之间的方法是：\">QT内部计算字体、像素和字符宽度之间的方法是：</h3>\n<p>见地址：<a href=\"http://losemyheaven.blog.163.com/blog/static/17071980920111283934557/\" target=\"_blank\" rel=\"external\">http://losemyheaven.blog.163.com/blog/static/17071980920111283934557/</a></p>\n<blockquote>\n<p>在QFont当中有两种方式设置字体大小，一种是PixelSize，另一种是PointSize</p>\n<p>Point实际是磅，也就是 1/72 inch</p>\n<p>我们可以从PainterDevice中得到当前DPI(Dot per inch)。因此 Pixel = DPI * Point / 72</p>\n<p>例如设置字体为20Point。 那么字体的像素大小是 90 * 20 / 72 约等于 25.</p>\n<p>可以将字体设置为25Pixel，看到字体的大小就是20Point和25Pixel大小是一样的。</p>\n<p>QFont当中设置的大小，实际上字体的高度，由如下组成。<br><img src=\"110211082116831.jpg\" alt=\"\"></p>\n<p>由PixelSize设置的高度，实际是Asent + 1像素(baseline的高度)。</p>\n<p>在字体大小中涉及了以下知识：</p>\n<p>DPI: Dot per inch，在显示器上也就是每英寸包含的像素。英尺的换算为 1 cm = 0.39 inch, 1 inch = 2.54 cm。</p>\n<p>DPI 可以通过如下计算得来：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">水平 dpi = 水平 resolution * <span class=\"number\">2.54</span> / 显示器宽度</div><div class=\"line\">垂直 dpi = 垂直 resolution * <span class=\"number\">2.54</span> / 显示器高度</div><div class=\"line\">pixel pitch（点距）: 像素点间距离。可以用<span class=\"number\">25.4</span>mm / DPI得到。</div><div class=\"line\">字体在屏幕上的实际大小 = 字体像素大小 * 点距</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>大部分显示器的DPI为90.6左右，垂直和水平点距可能不一样。但windows为了方便就同一了点距，为96。我当前使用的Ubuntu的点距也是96。因此如果想要看到更大的字体可以使用更大的点距。</p>\n<p>终于弄明白了 pixel size 是所占的像素大小  这样有一个缺点 有些显示器的分辨率(dpi)比较大  那么单位长度中的像素点就比较多 这样一个字所占的长度就会比较少</p>\n<p>而 point size 则规定了实际中我们肉眼看到的字体的大小 他和pixel无关的～ 他和显示器无关  不管在什么样上的显示器上 规定大小是多少&gt;就是多少…</p>\n</blockquote>\n","source":"_posts/2015-01-19-Qt字体大小的计算.md","raw":"title: Qt 字体大小的计算\ndate: 2015-01-19 10:37:10\ncategories:\n- Qt\ntags:\n- Qt\n- QFontMetrics\n---\n<br>\n## 计算字符串或者字符宽度的系统函数有：\n\n### QLabel::fontMetrics().width(QString s): 获取字符串s的总像素宽度。\n``` cplusplus\nint QFontMetrics::width ( const QString & text, int len = -1 ) const\n\nReturns the width in pixels of the first len characters of text. If len is negative (the default), the entire string is used.\n\nNote that this value is not equal to boundingRect().width(); boundingRect() returns a rectangle describing the pixels this string will cover whereas width() returns the distance to where the next string should be drawn.\n\nSee also boundingRect().\n```\n\n### QLabel::fontMetrics().height(): 获取字体的高度。\n\nint QFontMetrics::height () const\n``` cplusplus\nReturns the height of the font.\n\nThis is always equal to ascent()+descent()+1 (the 1 is for the base line).\n\nSee also leading() and lineSpacing().\n```\n### QLabel::fontMetrics().lineSpacing(): 获取字体的高度，包括文字的实际宽度和行距。\n\n### QLabel::fontMetrics().leading(): 行间距\n``` cplusplus\nint QFontMetrics::leading () const\n\nReturns the leading of the font.\n\nThis is the natural inter-line spacing.\n\nSee also height() and lineSpacing().\n```\n\n### QT内部计算字体、像素和字符宽度之间的方法是：\n\n见地址：http://losemyheaven.blog.163.com/blog/static/17071980920111283934557/\n\n>在QFont当中有两种方式设置字体大小，一种是PixelSize，另一种是PointSize\n\n>Point实际是磅，也就是 1/72 inch\n>\n>我们可以从PainterDevice中得到当前DPI(Dot per inch)。因此 Pixel = DPI * Point / 72\n>\n>例如设置字体为20Point。 那么字体的像素大小是 90 * 20 / 72 约等于 25.\n>\n>可以将字体设置为25Pixel，看到字体的大小就是20Point和25Pixel大小是一样的。\n>\n>QFont当中设置的大小，实际上字体的高度，由如下组成。\n>![](110211082116831.jpg)\n>\n>由PixelSize设置的高度，实际是Asent + 1像素(baseline的高度)。\n>\n>在字体大小中涉及了以下知识：\n>\n>DPI: Dot per inch，在显示器上也就是每英寸包含的像素。英尺的换算为 1 cm = 0.39 inch, 1 inch = 2.54 cm。\n>\n>DPI 可以通过如下计算得来：\n```bash\n水平 dpi = 水平 resolution * 2.54 / 显示器宽度\n垂直 dpi = 垂直 resolution * 2.54 / 显示器高度\npixel pitch（点距）: 像素点间距离。可以用25.4mm / DPI得到。\n字体在屏幕上的实际大小 = 字体像素大小 * 点距\n```\n>大部分显示器的DPI为90.6左右，垂直和水平点距可能不一样。但windows为了方便就同一了点距，为96。我当前使用的Ubuntu的点距也是96。因此如果想要看到更大的字体可以使用更大的点距。\n>\n>终于弄明白了 pixel size 是所占的像素大小  这样有一个缺点 有些显示器的分辨率(dpi)比较大  那么单位长度中的像素点就比较多 这样一个字所占的长度就会比较少\n>\n>而 point size 则规定了实际中我们肉眼看到的字体的大小 他和pixel无关的～ 他和显示器无关  不管在什么样上的显示器上 规定大小是多少>就是多少...\n","slug":"Qt字体大小的计算","updated":1422957474000,"excerpt":"","_id":"yjm3zab61uyblg5p","comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"Shell","_id":"c7753p669x3pxbjm","posts":["3csah714gcc42lcp"]},{"name":"获取运行路径","_id":"l8u31r763bi9c1e2","posts":["3csah714gcc42lcp"]},{"name":"新起点","_id":"hu9ajexky7qu3ch6","posts":["r0ltv1z2tfcyojj0"]},{"name":"奋斗","_id":"r0f3g5xkdbw1oie7","posts":["r0ltv1z2tfcyojj0"]},{"name":"Python","_id":"9byqrzf9s31ju1gn","posts":["qlwn48lzjwxl9q78","8heotxof9snjtz3r","pm5cxs6e0l7xzx8h"]},{"name":"正则表达式","_id":"ag976g7st2qxri0c","posts":["qlwn48lzjwxl9q78"]},{"name":"main","_id":"jj3o2f9t8venvl61","posts":["8heotxof9snjtz3r"]},{"name":"JSON","_id":"q8esjac9kvw8nn1t","posts":["pm5cxs6e0l7xzx8h"]},{"name":"解析器","_id":"rtitidmvuochqoex","posts":["pm5cxs6e0l7xzx8h"]},{"name":"ASCII","_id":"av6lf6zkdddav393","posts":["7bqwxzirdecrnd2o"]},{"name":"Qt","_id":"fucehg2ejyjnd81k","posts":["yjm3zab61uyblg5p"]},{"name":"QFontMetrics","_id":"bxeffjtszvvj4fxd","posts":["yjm3zab61uyblg5p"]}]}
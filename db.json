{"Asset":[{"_id":"themes\\pacman\\source\\font\\FontAwesome.otf","path":"font/FontAwesome.otf","modified":true},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":true},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":true},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":true},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":true},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":true},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":true},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":true},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":true},{"_id":"themes\\pacman\\source\\img\\author.jpg","path":"img/author.jpg","modified":true},{"_id":"themes\\pacman\\source\\img\\copy_right.png","path":"img/copy_right.png","modified":true},{"_id":"themes\\pacman\\source\\img\\favicon.ico","path":"img/favicon.ico","modified":true},{"_id":"themes\\pacman\\source\\img\\logo.svg","path":"img/logo.svg","modified":true},{"_id":"themes\\pacman\\source\\img\\pacman.jpg","path":"img/pacman.jpg","modified":true},{"_id":"themes\\pacman\\source\\img\\to_top.png","path":"img/to_top.png","modified":true},{"_id":"themes\\pacman\\source\\js\\jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":true},{"_id":"themes\\pacman\\source\\js\\to_top.js","path":"js/to_top.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\blank.gif","path":"fancybox/blank.gif","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":true},{"_id":"themes\\pacman\\source\\css\\style.styl","path":"css/style.styl","modified":true},{"_id":"source\\_posts\\2015-01-19-Qt字体大小的计算\\110211082116831.jpg","path":"2015/01/19/Qt字体大小的计算/110211082116831.jpg","modified":true,"post_id":"ox3mcmopnjgge0sm","post_path":"2015/01/19/Qt字体大小的计算/"},{"_id":"source\\_posts\\2015-01-17-PyQt之自定义无边框窗口遮盖任务栏显示问题\\2011091922270416.jpg","path":"2015/01/17/PyQt之自定义无边框窗口遮盖任务栏显示问题/2011091922270416.jpg","modified":true,"post_id":"m36sxb7zv6hst1vo","post_path":"2015/01/17/PyQt之自定义无边框窗口遮盖任务栏显示问题/"},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考\\9213b07eca8065387d4c671896dda144ad348213.jpg","path":"2015/02/03/ASCII-字符表参考/9213b07eca8065387d4c671896dda144ad348213.jpg","modified":true,"post_id":"cpe4a5pngrq3mnvs","post_path":"2015/02/03/ASCII-字符表参考/"},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考\\fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg","path":"2015/02/03/ASCII-字符表参考/fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg","modified":true,"post_id":"cpe4a5pngrq3mnvs","post_path":"2015/02/03/ASCII-字符表参考/"},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio\\5e22d182jw1eowhbmlgsxj20m80gotcg.jpg","path":"2015/02/03/One-night-in-Mok-s-Studio/5e22d182jw1eowhbmlgsxj20m80gotcg.jpg","modified":true,"post_id":"jqgtkotx1itxj908","post_path":"2015/02/03/One-night-in-Mok-s-Studio/"},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio\\5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg","path":"2015/02/03/One-night-in-Mok-s-Studio/5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg","modified":true,"post_id":"jqgtkotx1itxj908","post_path":"2015/02/03/One-night-in-Mok-s-Studio/"},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南\\687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png","path":"2015/02/03/Python正则表达式指南/687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png","modified":true,"post_id":"dgo03wo8kud7ck86","post_path":"2015/02/03/Python正则表达式指南/"},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南\\687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png","path":"2015/02/03/Python正则表达式指南/687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png","modified":true,"post_id":"dgo03wo8kud7ck86","post_path":"2015/02/03/Python正则表达式指南/"}],"Cache":[{"_id":"scaffolds\\draft.md","mtime":1423750740000},{"_id":"scaffolds\\page.md","mtime":1421640489000},{"_id":"scaffolds\\photo.md","mtime":1423750731000},{"_id":"scaffolds\\post.md","mtime":1423750721000},{"_id":"scaffolds\\repost.md","mtime":1424002522000},{"_id":"source\\_posts\\2015-01-14-Python经验总结.md","mtime":1423748984000},{"_id":"source\\_posts\\2015-01-15-JSON解析器小练习.md","mtime":1423134716000},{"_id":"source\\_posts\\2015-01-16-PyQt4中使用qrc资源文件.md","mtime":1423137446000},{"_id":"source\\_posts\\2015-01-17-PyQt之自定义无边框窗口遮盖任务栏显示问题.md","mtime":1423829687000},{"_id":"source\\_posts\\2015-01-18-开发管理中的版本管理Trunk-Branch和Tags.md","mtime":1423829692000},{"_id":"source\\_posts\\2015-01-19-Qt字体大小的计算.md","mtime":1422957474000},{"_id":"source\\_posts\\2015-01-21-Qt-QLabel-显示网络图片.md","mtime":1424005808000},{"_id":"source\\_posts\\2015-01-20-Qt-之-show-hide-setVisible-setHidden-close-等小结.md","mtime":1424005478000},{"_id":"source\\_posts\\2015-01-22-QLabel几种小技巧.md","mtime":1424006295000},{"_id":"source\\_posts\\2015-01-23-Qt开发者关于QThread的咆哮.md","mtime":1424006809000},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考.md","mtime":1422970575000},{"_id":"source\\_posts\\2015-02-03-Linux-Shell-获取当前正在执行脚本的绝对路径.md","mtime":1422953055000},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio.md","mtime":1422969561000},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南.md","mtime":1423202091000},{"_id":"source\\_posts\\2015-02-04-Python-中-if-name-main-用法解析.md","mtime":1423829722000},{"_id":"source\\_posts\\2015-02-05-PyQt-窗口风格.md","mtime":1423136571000},{"_id":"source\\_posts\\2015-02-06-Python-assert-用法.md","mtime":1423199907000},{"_id":"source\\_posts\\2015-02-12-为上云而备案.md","mtime":1423744811000},{"_id":"source\\_posts\\2015-02-12-从Qt的delete说开来.md","mtime":1423829660000},{"_id":"source\\_posts\\2015-02-13-QtWebkit-使用方法.md","mtime":1423830660000},{"_id":"source\\_posts\\2015-02-15-Git-add-命令.md","mtime":1424003278000},{"_id":"source\\_posts\\2015-02-15-Qt中槽函数如何获取按钮QPushButton的按钮文本.md","mtime":1424003671000},{"_id":"source\\_posts\\2015-01-17-PyQt之自定义无边框窗口遮盖任务栏显示问题\\2011091922270416.jpg","mtime":1423142061000},{"_id":"source\\_posts\\2015-01-19-Qt字体大小的计算\\110211082116831.jpg","mtime":1422956783000},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考\\9213b07eca8065387d4c671896dda144ad348213.jpg","mtime":1421375358000},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考\\fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg","mtime":1421375364000},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio\\5e22d182jw1eowhbmlgsxj20m80gotcg.jpg","mtime":1422969454000},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio\\5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg","mtime":1422969461000},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南\\687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png","mtime":1422957052000},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南\\687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png","mtime":1422957084000},{"_id":"themes\\pacman\\_config.yml","mtime":1422956225000},{"_id":"themes\\pacman\\LICENSE","mtime":1421649321000},{"_id":"themes\\pacman\\README.md","mtime":1421649321000},{"_id":"themes\\pacman\\languages\\zh-CN.yml","mtime":1421649321000},{"_id":"themes\\pacman\\languages\\default.yml","mtime":1421649321000},{"_id":"themes\\pacman\\languages\\zh-TW.yml","mtime":1421649321000},{"_id":"themes\\pacman\\scripts\\fancybox.js","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\archive.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\category.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\layout.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\index.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\page.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\post.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\tag.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_widget\\archive.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_widget\\category.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_widget\\links.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_widget\\rss.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_widget\\tag.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_widget\\tagcloud.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\after_footer.ejs","mtime":1423022399000},{"_id":"themes\\pacman\\layout\\_partial\\archive.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\article.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\categories.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\footer.ejs","mtime":1423739904000},{"_id":"themes\\pacman\\layout\\_partial\\google_analytics.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\head.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\header.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\pagination.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\search.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\sidebar.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\tags.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\to_top.ejs","mtime":1423041508000},{"_id":"themes\\pacman\\layout\\_partial\\post\\article.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\comment.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\footer.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\gallery.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\catetags.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\header.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\layout\\_partial\\post\\jiathis.ejs","mtime":1423020011000},{"_id":"themes\\pacman\\layout\\_partial\\post\\pagination.ejs","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\FontAwesome.otf","mtime":1371429118000},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.eot","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.svg","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.ttf","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.woff","mtime":1421649321000},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.eot","mtime":1371429118000},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.svg","mtime":1371429118000},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.ttf","mtime":1371429118000},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.woff","mtime":1371429118000},{"_id":"themes\\pacman\\source\\img\\author.jpg","mtime":1421649321000},{"_id":"themes\\pacman\\source\\img\\copy_right.png","mtime":1423468741000},{"_id":"themes\\pacman\\source\\img\\favicon.ico","mtime":1421649321000},{"_id":"themes\\pacman\\source\\img\\logo.svg","mtime":1421649321000},{"_id":"themes\\pacman\\source\\img\\pacman.jpg","mtime":1421649321000},{"_id":"themes\\pacman\\source\\img\\to_top.png","mtime":1423036142000},{"_id":"themes\\pacman\\source\\js\\jquery-2.1.0.min.js","mtime":1421649321000},{"_id":"themes\\pacman\\source\\js\\to_top.js","mtime":1423026582000},{"_id":"themes\\pacman\\source\\fancybox\\blank.gif","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_loading.gif","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_overlay.png","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_sprite.png","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.css","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.js","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\fancybox_buttons.png","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-media.js","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","mtime":1421649321000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\style.styl","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\_base\\code.styl","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\_base\\font.styl","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\_base\\public.styl","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\_base\\variable.styl","mtime":1423049278000},{"_id":"themes\\pacman\\source\\css\\_partial\\article.styl","mtime":1423115288000},{"_id":"themes\\pacman\\source\\css\\_partial\\aside.styl","mtime":1423201304000},{"_id":"themes\\pacman\\source\\css\\_partial\\duoshuo.styl","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\_partial\\footer.styl","mtime":1423740224000},{"_id":"themes\\pacman\\source\\css\\_partial\\header.styl","mtime":1424005962000},{"_id":"themes\\pacman\\source\\css\\_partial\\gallery.styl","mtime":1421649321000},{"_id":"themes\\pacman\\source\\css\\_partial\\helper.styl","mtime":1423054975000},{"_id":"themes\\pacman\\source\\css\\_partial\\index.styl","mtime":1423200521000}],"Category":[{"name":"Python","_id":"rvl3oybnnfrinfn1","posts":["r59tahv35u5bsagz","dgo03wo8kud7ck86","im8thm5mpmxwahta","a4b50agl6ahqqw36"]},{"name":"猿人日常","_id":"c61972kcum9igcta","posts":["cmpp03dhu2168hum","jqgtkotx1itxj908","wygxm5b4rhsxjfwf"]},{"name":"PyQt","_id":"qjrjijfq46k5bzcm","posts":["lps0z94lgfqg8to8","m36sxb7zv6hst1vo","iojqbtoeapyouq6r"]},{"name":"SVN","_id":"1fzoemunfy1khuj2","posts":["8repd459bhfezxrr"]},{"name":"Qt","_id":"wq9t0ozhm3vpjc5j","posts":["ox3mcmopnjgge0sm","qbpm0blzp45xwkrm","933rhb2uqq92pz8s","n20avqzmna7uq9nj","q90zt77pcyyu1vva","xl211dtj01b2lpwb","ywlr643oxwdpds1a","v71pjf7p082fpda7"]},{"name":"杂类","_id":"3m001amw3k070uq1","posts":["cpe4a5pngrq3mnvs"]},{"name":"Linux","_id":"pxz401it7n749u4v","posts":["83t46ret8vk0ow9p"]},{"name":"Git","_id":"ucl7x2934t6qnav2","posts":["u5srw1edrsyau2y3"]}],"Page":[],"Post":[{"title":"Python经验总结","date":1421213720000,"categories":["rvl3oybnnfrinfn1"],"tags":["2gj15pr1hjo2nk4i","9snvrpqugy5bh3af"],"content":"<ul>\n<li>连续空格替换为1个空格</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">s = <span class=\"string\">' 1    3 579'</span></div><div class=\"line\">s = <span class=\"string\">' '</span>.join(s.split())</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>获取文件名、当前路径、python所在路径</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">filename = os.path.basename(path_filename)</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">print</span> os.getcwd() </div><div class=\"line\"><span class=\"keyword\">print</span> sys.executable</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>时间格式化</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\">time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</div></pre></td></tr></table></figure>\n\n<h6 id=\"时间戳_—&gt;_时间字符串_‘%Y-%m-%d_%H:%M:%S’\">时间戳 —&gt;  时间字符串 ‘%Y-%m-%d %H:%M:%S’</h6>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">timestamp = time.time()</div><div class=\"line\">time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>, time.localtime(timestamp))</div></pre></td></tr></table></figure>\n\n\n<h6 id=\"时间字符串_—&gt;_时间戳_1407934120-0\">时间字符串 —&gt; 时间戳 1407934120.0</h6>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">str_time = <span class=\"string\">\"2014-08-13 20:48:40\"</span></div><div class=\"line\">time.mktime(time.strptime(str_time, <span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>))</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>字典反转</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> izip </div><div class=\"line\">dict(izip(d.itervalues(), d.iterkeys()))</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>字典排序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sortDict</span><span class=\"params\">(adict)</span>:</span></div><div class=\"line\">    l_keys = adict.keys()</div><div class=\"line\">    l_keys.sort()</div><div class=\"line\">    _dict = {}</div><div class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> l_keys:</div><div class=\"line\">        _dict[k] = adict[k]</div><div class=\"line\">    <span class=\"keyword\">return</span> _dict</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>合并字典</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_dict</span><span class=\"params\">(d1, d2)</span>:</span></div><div class=\"line\">    d3 = {}</div><div class=\"line\">    <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> d1.iteritems():</div><div class=\"line\">        d3[k] = v</div><div class=\"line\">    <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> d2.iteritems():</div><div class=\"line\">        <span class=\"keyword\">if</span> k <span class=\"keyword\">in</span> d3.keys():</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'d1 & d2 has the same key.'</span></div><div class=\"line\">        d3[k] = v</div><div class=\"line\">    <span class=\"keyword\">return</span> d3</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>判断文件或目录是否存在</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\">os.path.isfile(<span class=\"string\">'test.txt'</span>) <span class=\"comment\">#如果不存在就返回False</span></div><div class=\"line\">os.path.exists(directory) <span class=\"comment\">#如果目录不存在就返回False</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>二分法查找/插入元素的index</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> bisect</div><div class=\"line\">L = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>]</div><div class=\"line\">x = <span class=\"number\">6</span></div><div class=\"line\">a = bisect.bisect_left(L, x)</div><div class=\"line\">b = bisect.bisect_right(L, x)</div><div class=\"line\"><span class=\"keyword\">print</span> a,b</div><div class=\"line\">x = <span class=\"number\">7</span></div><div class=\"line\">a = bisect.bisect_left(L, x)</div><div class=\"line\">b = bisect.bisect_right(L, x)</div><div class=\"line\"><span class=\"keyword\">print</span> a,b</div><div class=\"line\">L = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>]</div><div class=\"line\">a = bisect.insort_left(L, x)</div><div class=\"line\"><span class=\"keyword\">print</span> L</div><div class=\"line\">L = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>]</div><div class=\"line\">b = bisect.insort_right(L, x)</div><div class=\"line\"><span class=\"keyword\">print</span> L</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-01-14-Python经验总结.md","raw":"title: Python经验总结\ndate: 2015-01-14 13:35:20\ncategories:\n- Python\ntags:\n- Python\n- 经验总结\n---\n- 连续空格替换为1个空格\n```python\ns = ' 1    3 579'\ns = ' '.join(s.split())\n```\n<br>\n- 获取文件名、当前路径、python所在路径\n```python\nfilename = os.path.basename(path_filename)\nimport os\nimport sys\nprint os.getcwd() \nprint sys.executable\n```\n<br>\n- 时间格式化\n```python\nimport time\ntime.strftime('%Y-%m-%d %H:%M:%S')\n```\n###### 时间戳 -->  时间字符串 '%Y-%m-%d %H:%M:%S'\n```python\ntimestamp = time.time()\ntime.strftime('%Y-%m-%d %H:%M:%S', time.localtime(timestamp)) \n```\n \n###### 时间字符串 --> 时间戳 1407934120.0\n```python\nstr_time = \"2014-08-13 20:48:40\"\ntime.mktime(time.strptime(str_time, \"%Y-%m-%d %H:%M:%S\"))\n```\n<br>\n- 字典反转\n```python\nfrom itertools import izip \ndict(izip(d.itervalues(), d.iterkeys()))\n```\n<br>\n- 字典排序\n```python\ndef sortDict(adict):\n    l_keys = adict.keys()\n    l_keys.sort()\n    _dict = {}\n    for k in l_keys:\n        _dict[k] = adict[k]\n    return _dict\n```\n<br>\n- 合并字典\n```python\ndef merge_dict(d1, d2):\n    d3 = {}\n    for k,v in d1.iteritems():\n        d3[k] = v\n    for k,v in d2.iteritems():\n        if k in d3.keys():\n            print 'd1 & d2 has the same key.'\n        d3[k] = v\n    return d3\n```\n<br>\n- 判断文件或目录是否存在\n```python\nimport os\nos.path.isfile('test.txt') #如果不存在就返回False\nos.path.exists(directory) #如果目录不存在就返回False\n```\n<br>\n- 二分法查找/插入元素的index\n```python\nimport bisect\nL = [1,3,5,7,9]\nx = 6\na = bisect.bisect_left(L, x)\nb = bisect.bisect_right(L, x)\nprint a,b\nx = 7\na = bisect.bisect_left(L, x)\nb = bisect.bisect_right(L, x)\nprint a,b\nL = [1,3,5,7,9]\na = bisect.insort_left(L, x)\nprint L\nL = [1,3,5,7,9]\nb = bisect.insort_right(L, x)\nprint L\n```\n","slug":"Python经验总结","updated":1423748984000,"excerpt":"","_id":"r59tahv35u5bsagz","comments":true,"layout":"post","photos":[],"link":""},{"title":"JSON解析器小练习","date":1421286601000,"categories":["c61972kcum9igcta"],"tags":["2gj15pr1hjo2nk4i","vpyhogdns9y7m1je","vpmvwz4t35989vn4"],"content":"<blockquote>\n<p>原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。</p>\n</blockquote>\n<p>来到网易的第三天，我还是在Python的学习阶段，不过对Python一些理论性的东西已经有所理解。与此同时，主管也有给我一些小练习，让我边做边熟悉。是的，学习一种新的编程语言最有效率的方法就是边看书边打代码做小练习，这在我之前的学习中也深有体会。</p>\n<p>在此顺便记录一下小练习<code>JSON Parser</code>的代码：<code>初学勿喷</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> string</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonParser</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.data_json = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># JSON type: null, true and false.</span></div><div class=\"line\">    __list_jdt = [<span class=\"string\">u'null'</span>, <span class=\"string\">u'true'</span>, <span class=\"string\">u'false'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Read a string JSON data into the class, with no return value.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load</span><span class=\"params\">(self, s)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">u'[INFO] Load JSON string.'</span>)</div><div class=\"line\">        json_type = JsonParser.__get_json_obj_type(s)</div><div class=\"line\">        <span class=\"keyword\">if</span> json_type == list:</div><div class=\"line\">            self.data_json = list()</div><div class=\"line\">        <span class=\"keyword\">elif</span> json_type == dict:</div><div class=\"line\">            self.data_json = dict()</div><div class=\"line\">        self.__build_json_data(self.data_json, self.__parse_json_objects(s), json_type)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Reference to the dictionary data and return the JSON string.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dump</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> str(self.data_json)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Build with parent and child relationship, to align the JSON data structure, with no return value.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__build_json_data</span><span class=\"params\">(self, parent, obj, typ)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> typ == dict:</div><div class=\"line\">            count_bb = <span class=\"number\">0</span></div><div class=\"line\">            count_sb = <span class=\"number\">0</span></div><div class=\"line\">            obj_key = <span class=\"string\">''</span></div><div class=\"line\">            obj_value = []</div><div class=\"line\">            flg_d = <span class=\"keyword\">True</span></div><div class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(obj)):</div><div class=\"line\">                <span class=\"keyword\">if</span> flg_d:</div><div class=\"line\">                    <span class=\"keyword\">if</span> obj[i] == <span class=\"string\">':'</span>:</div><div class=\"line\">                        flg_d = <span class=\"keyword\">not</span> flg_d</div><div class=\"line\">                        obj_key = obj[i - <span class=\"number\">1</span>].replace(<span class=\"string\">'\"'</span>, <span class=\"string\">''</span>)</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    count_bb, count_sb = JsonParser.__cal_brackets(obj[i], count_bb, count_sb)</div><div class=\"line\">                    obj_value.append(obj[i])</div><div class=\"line\">                    <span class=\"keyword\">if</span> count_bb + count_sb == <span class=\"number\">0</span>:</div><div class=\"line\">                        flg_d = <span class=\"keyword\">not</span> flg_d</div><div class=\"line\">                        self.__build_dict(parent, obj_key, obj_value)</div><div class=\"line\">                        obj_key = <span class=\"string\">''</span></div><div class=\"line\">                        obj_value = []</div><div class=\"line\">        <span class=\"keyword\">elif</span> typ == list:</div><div class=\"line\">            count_bb = <span class=\"number\">0</span></div><div class=\"line\">            count_sb = <span class=\"number\">0</span></div><div class=\"line\">            list_obj = []</div><div class=\"line\">            <span class=\"keyword\">del</span> obj[<span class=\"number\">0</span>]</div><div class=\"line\">            <span class=\"keyword\">del</span> obj[len(obj) - <span class=\"number\">1</span>]</div><div class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(obj)):</div><div class=\"line\">                count_bb, count_sb = JsonParser.__cal_brackets(obj[i], count_bb, count_sb)</div><div class=\"line\">                list_obj.append(obj[i])</div><div class=\"line\">                <span class=\"keyword\">if</span> count_bb + count_sb == <span class=\"number\">0</span>:</div><div class=\"line\">                    self.__build_list(parent, list_obj)</div><div class=\"line\">                    list_obj = []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Build list data</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__build_list</span><span class=\"params\">(self, parent, list_obj)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> list_obj[<span class=\"number\">0</span>] != <span class=\"string\">','</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> list_obj[<span class=\"number\">0</span>] == <span class=\"string\">'{'</span>:</div><div class=\"line\">                parent.append(list_obj)</div><div class=\"line\">                parent[len(parent) - <span class=\"number\">1</span>] = dict()</div><div class=\"line\">                self.__build_json_data(parent[len(parent) - <span class=\"number\">1</span>], list_obj, dict)</div><div class=\"line\">            <span class=\"keyword\">elif</span> list_obj[<span class=\"number\">0</span>] == <span class=\"string\">'['</span>:</div><div class=\"line\">                parent.append(list_obj)</div><div class=\"line\">                parent[len(parent) - <span class=\"number\">1</span>] = list()</div><div class=\"line\">                self.__build_json_data(parent[len(parent) - <span class=\"number\">1</span>], list_obj, list)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Build dictionary data</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__build_dict</span><span class=\"params\">(self, parent, obj_key, obj_value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> obj_value[<span class=\"number\">0</span>] == <span class=\"string\">'{'</span>:</div><div class=\"line\">            parent[obj_key] = dict()</div><div class=\"line\">            self.__build_json_data(parent[obj_key], obj_value, dict)</div><div class=\"line\">        <span class=\"keyword\">elif</span> obj_value[<span class=\"number\">0</span>] == <span class=\"string\">'['</span>:</div><div class=\"line\">            parent[obj_key] = list()</div><div class=\"line\">            self.__build_json_data(parent[obj_key], obj_value, list)</div><div class=\"line\">        <span class=\"keyword\">elif</span> len(obj_value) == <span class=\"number\">1</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> obj_value[<span class=\"number\">0</span>] <span class=\"keyword\">in</span> self.__list_jdt:</div><div class=\"line\">                <span class=\"keyword\">if</span> obj_value[<span class=\"number\">0</span>] == self.__list_jdt[<span class=\"number\">0</span>]:</div><div class=\"line\">                    parent[obj_key] = <span class=\"keyword\">None</span></div><div class=\"line\">                <span class=\"keyword\">elif</span> obj_value[<span class=\"number\">0</span>] == self.__list_jdt[<span class=\"number\">1</span>]:</div><div class=\"line\">                    parent[obj_key] = <span class=\"keyword\">True</span></div><div class=\"line\">                <span class=\"keyword\">elif</span> obj_value[<span class=\"number\">0</span>] == self.__list_jdt[<span class=\"number\">2</span>]:</div><div class=\"line\">                    parent[obj_key] = <span class=\"keyword\">False</span></div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    <span class=\"keyword\">raise</span> JsonValueError(<span class=\"string\">u'JSON value exception.'</span>, obj_value[<span class=\"number\">0</span>])</div><div class=\"line\">            <span class=\"keyword\">elif</span> obj_value[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"string\">'\"'</span>:</div><div class=\"line\">                parent[obj_key] = obj_value[<span class=\"number\">0</span>].replace(<span class=\"string\">'\"'</span>, <span class=\"string\">''</span>)</div><div class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"string\">'.'</span> <span class=\"keyword\">in</span> obj_value[<span class=\"number\">0</span>]:</div><div class=\"line\">                <span class=\"keyword\">try</span>:</div><div class=\"line\">                    parent[obj_key] = string.atof(obj_value[<span class=\"number\">0</span>])</div><div class=\"line\">                <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">                    <span class=\"keyword\">raise</span> JsonValueError(<span class=\"string\">u'Invalid literal JSON value for float.'</span>, obj_value[<span class=\"number\">0</span>])</div><div class=\"line\">                <span class=\"keyword\">except</span>:</div><div class=\"line\">                    <span class=\"keyword\">raise</span> JsonError(<span class=\"string\">u'[ERROR] Unknown Json Error.'</span>)</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                <span class=\"keyword\">try</span>:</div><div class=\"line\">                    parent[obj_key] = string.atoi(obj_value[<span class=\"number\">0</span>])</div><div class=\"line\">                <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">                    <span class=\"keyword\">raise</span> JsonValueError(<span class=\"string\">u'Invalid literal JSON value for int.'</span>, obj_value[<span class=\"number\">0</span>])</div><div class=\"line\">                <span class=\"keyword\">except</span>:</div><div class=\"line\">                    <span class=\"keyword\">raise</span> JsonError(<span class=\"string\">u'[ERROR] Unknown Json Error.'</span>)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> JsonFormatError(<span class=\"string\">u'JSON format exception.'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># calculate the brackets</span></div><div class=\"line\">    <span class=\"decorator\">@staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__cal_brackets</span><span class=\"params\">(obj, count_bb, count_sb)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> obj == <span class=\"string\">'{'</span>:</div><div class=\"line\">            count_bb += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> obj == <span class=\"string\">'}'</span>:</div><div class=\"line\">            count_bb -= <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> obj == <span class=\"string\">'['</span>:</div><div class=\"line\">            count_sb += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> obj == <span class=\"string\">']'</span>:</div><div class=\"line\">            count_sb -= <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> count_bb, count_sb</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Return the quantity of quotes.</span></div><div class=\"line\">    <span class=\"decorator\">@staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__count_quotes</span><span class=\"params\">(s, flg)</span>:</span></div><div class=\"line\">        count = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">if</span> flg == <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span> cc <span class=\"keyword\">in</span> s:</div><div class=\"line\">                <span class=\"keyword\">if</span> cc == <span class=\"string\">'\"'</span>:</div><div class=\"line\">                    count += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> flg == <span class=\"number\">1</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span> cc <span class=\"keyword\">in</span> s:</div><div class=\"line\">                <span class=\"keyword\">if</span> cc == <span class=\"string\">'\\''</span>:</div><div class=\"line\">                    count += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> count</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Check if s is the JSON data type.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__is_json_type</span><span class=\"params\">(self, s)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> s[<span class=\"number\">0</span>] == <span class=\"string\">'\"'</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">        <span class=\"keyword\">elif</span> s <span class=\"keyword\">in</span> self.__list_jdt:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Parse the JSON string data to the object list.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__parse_json_objects</span><span class=\"params\">(self, str_json)</span>:</span></div><div class=\"line\">        list_json = []</div><div class=\"line\">        str_tmp = <span class=\"string\">''</span></div><div class=\"line\">        <span class=\"keyword\">for</span> sgm_i <span class=\"keyword\">in</span> str_json:</div><div class=\"line\">            <span class=\"keyword\">if</span> sgm_i == <span class=\"string\">u'\\n'</span>:</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\">            <span class=\"keyword\">if</span> sgm_i != <span class=\"string\">' '</span>:</div><div class=\"line\">                <span class=\"keyword\">if</span> sgm_i == <span class=\"string\">'{'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">'}'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">'['</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">']'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">':'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">','</span>:</div><div class=\"line\">                    <span class=\"keyword\">if</span> str_tmp != <span class=\"string\">''</span>:</div><div class=\"line\">                        <span class=\"keyword\">if</span> str_tmp[<span class=\"number\">0</span>] == <span class=\"string\">'\\''</span> <span class=\"keyword\">or</span> str_tmp[len(str_tmp) - <span class=\"number\">1</span>] == <span class=\"string\">'\\''</span>:</div><div class=\"line\">                            <span class=\"keyword\">raise</span> JsonFormatError(</div><div class=\"line\">                                <span class=\"string\">u'JSON standard does not allow single quoted strings. &gt;&gt;&gt; '</span> + str_tmp)</div><div class=\"line\">                        <span class=\"keyword\">if</span> (str_tmp[<span class=\"number\">0</span>] == <span class=\"string\">'\"'</span> <span class=\"keyword\">and</span> str_tmp[len(str_tmp) - <span class=\"number\">1</span>] != <span class=\"string\">'\"'</span>) \\</div><div class=\"line\">                                <span class=\"keyword\">or</span> (str_tmp[<span class=\"number\">0</span>] != <span class=\"string\">'\"'</span> <span class=\"keyword\">and</span> str_tmp[len(str_tmp) - <span class=\"number\">1</span>] == <span class=\"string\">'\"'</span>):</div><div class=\"line\">                            <span class=\"keyword\">raise</span> JsonFormatError(<span class=\"string\">u'JSON verification error, missing double quote. &gt;&gt;&gt; '</span> + str_tmp)</div><div class=\"line\">                        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> self.__is_json_type(str_tmp):</div><div class=\"line\">                            <span class=\"keyword\">try</span>:</div><div class=\"line\">                                <span class=\"keyword\">if</span> float(str_tmp) / <span class=\"number\">1</span> == float(<span class=\"string\">'inf'</span>) <span class=\"keyword\">or</span> float(str_tmp) / <span class=\"number\">1</span> == float(<span class=\"string\">'-inf'</span>):</div><div class=\"line\">                                    exit(<span class=\"number\">1</span>)</div><div class=\"line\">                            <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">                                print(<span class=\"string\">u'[ERROR] JSON standard does not allow identifiers. &gt;&gt;&gt; %s'</span> % str_tmp)</div><div class=\"line\">                                exit(<span class=\"number\">1</span>)</div><div class=\"line\">                            <span class=\"keyword\">except</span>:</div><div class=\"line\">                                print(<span class=\"string\">u'[ERROR] Upper limit of Python float type. &gt;&gt;&gt; %s'</span> % str_tmp)</div><div class=\"line\">                                exit(<span class=\"number\">1</span>)</div><div class=\"line\">                        <span class=\"keyword\">if</span> sgm_i == <span class=\"string\">':'</span> <span class=\"keyword\">and</span> str_tmp[<span class=\"number\">0</span>] != <span class=\"string\">'\"'</span>:</div><div class=\"line\">                            <span class=\"keyword\">raise</span> JsonFormatError(</div><div class=\"line\">                                <span class=\"string\">u'JSON standard allows only double quoted string as property key. &gt;&gt;&gt; '</span> + str_tmp)</div><div class=\"line\">                        list_json.append(str_tmp)</div><div class=\"line\">                        str_tmp = <span class=\"string\">''</span></div><div class=\"line\">                    list_json.append(sgm_i)</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    str_tmp = str_tmp + sgm_i</div><div class=\"line\">            <span class=\"keyword\">elif</span> len(str_tmp) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> str_tmp[<span class=\"number\">0</span>] == <span class=\"string\">'\"'</span> <span class=\"keyword\">and</span> JsonParser.__count_quotes(str_tmp, <span class=\"number\">0</span>) == <span class=\"number\">1</span>:</div><div class=\"line\">                str_tmp = str_tmp + sgm_i</div><div class=\"line\">        <span class=\"keyword\">return</span> list_json</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># To determine the JSON object type</span></div><div class=\"line\">    <span class=\"decorator\">@staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get_json_obj_type</span><span class=\"params\">(str_json)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> str_json:</div><div class=\"line\">            <span class=\"keyword\">if</span> ch == <span class=\"string\">u' '</span>:</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\">            <span class=\"keyword\">elif</span> ch == <span class=\"string\">u'['</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> list</div><div class=\"line\">            <span class=\"keyword\">elif</span> ch == <span class=\"string\">u'{'</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> dict</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                <span class=\"keyword\">raise</span> JsonInvalidKeywordError(</div><div class=\"line\">                    <span class=\"string\">u'JSON standard not allow to begin with this character (root character). &gt;&gt;&gt; %s'</span>, ch)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Parse None, True, False to JSON value</span></div><div class=\"line\">    <span class=\"decorator\">@staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__parse_jdt</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> s == <span class=\"string\">'None'</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'null'</span></div><div class=\"line\">        <span class=\"keyword\">if</span> s == <span class=\"string\">'True'</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'true'</span></div><div class=\"line\">        <span class=\"keyword\">if</span> s == <span class=\"string\">'False'</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'false'</span></div><div class=\"line\">        <span class=\"keyword\">return</span> s</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Parse the dictionary to JSON string.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__dict_to_json_str</span><span class=\"params\">(self, dict_json)</span>:</span></div><div class=\"line\">        str_json = str(dict_json)</div><div class=\"line\">        list_json = []</div><div class=\"line\">        str_tmp = <span class=\"string\">''</span></div><div class=\"line\">        <span class=\"keyword\">for</span> sgm_i <span class=\"keyword\">in</span> str_json:</div><div class=\"line\">            <span class=\"keyword\">if</span> sgm_i == <span class=\"string\">u'\\n'</span>:</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\">            <span class=\"keyword\">if</span> sgm_i != <span class=\"string\">' '</span>:</div><div class=\"line\">                <span class=\"keyword\">if</span> sgm_i == <span class=\"string\">'{'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">'}'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">'['</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">']'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">':'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">','</span>:</div><div class=\"line\">                    <span class=\"keyword\">if</span> str_tmp != <span class=\"string\">''</span>:</div><div class=\"line\">                        <span class=\"keyword\">if</span> str_tmp[<span class=\"number\">0</span>] == <span class=\"string\">'\\''</span> <span class=\"keyword\">or</span> str_tmp[len(str_tmp) - <span class=\"number\">1</span>] == <span class=\"string\">'\\''</span>:</div><div class=\"line\">                            str_tmp = <span class=\"string\">'\"'</span> + str_tmp[<span class=\"number\">1</span>:len(str_tmp) - <span class=\"number\">1</span>] + <span class=\"string\">'\"'</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> sgm_i == <span class=\"string\">':'</span> <span class=\"keyword\">and</span> str_tmp[<span class=\"number\">0</span>] != <span class=\"string\">'\"'</span>:</div><div class=\"line\">                            <span class=\"keyword\">raise</span> JsonFormatError(</div><div class=\"line\">                                <span class=\"string\">u'JSON standard allows only double quoted string as property key. &gt;&gt;&gt; Key: '</span> + str_tmp)</div><div class=\"line\">                        <span class=\"keyword\">if</span> list_json[len(list_json) - <span class=\"number\">1</span>] == <span class=\"string\">':'</span>:</div><div class=\"line\">                            str_tmp = self.__parse_jdt(str_tmp)</div><div class=\"line\">                        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.__is_json_type(str_tmp):</div><div class=\"line\">                            <span class=\"keyword\">try</span>:</div><div class=\"line\">                                <span class=\"keyword\">if</span> float(str_tmp) / <span class=\"number\">1</span> == float(<span class=\"string\">'inf'</span>) <span class=\"keyword\">or</span> float(str_tmp) / <span class=\"number\">1</span> == float(<span class=\"string\">'-inf'</span>):</div><div class=\"line\">                                    exit(<span class=\"number\">1</span>)</div><div class=\"line\">                            <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">                                print(<span class=\"string\">u'[ERROR] JSON standard does not allow identifiers. &gt;&gt;&gt; %s'</span> % str_tmp)</div><div class=\"line\">                                exit(<span class=\"number\">1</span>)</div><div class=\"line\">                            <span class=\"keyword\">except</span>:</div><div class=\"line\">                                print(<span class=\"string\">u'[ERROR] Upper limit of Python float type. &gt;&gt;&gt; %s'</span> % str_tmp)</div><div class=\"line\">                                exit(<span class=\"number\">1</span>)</div><div class=\"line\">                        list_json.append(str_tmp)</div><div class=\"line\">                        str_tmp = <span class=\"string\">''</span></div><div class=\"line\">                    list_json.append(sgm_i)</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    str_tmp = str_tmp + sgm_i</div><div class=\"line\">            <span class=\"keyword\">elif</span> len(str_tmp) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> str_tmp[<span class=\"number\">0</span>] == <span class=\"string\">'\\''</span> <span class=\"keyword\">and</span> JsonParser.__count_quotes(str_tmp, <span class=\"number\">1</span>) == <span class=\"number\">1</span>:</div><div class=\"line\">                str_tmp = str_tmp + sgm_i</div><div class=\"line\">        str_tmp = <span class=\"string\">''</span></div><div class=\"line\">        <span class=\"keyword\">for</span> sgm_j <span class=\"keyword\">in</span> list_json:</div><div class=\"line\">            str_tmp += sgm_j</div><div class=\"line\">        <span class=\"keyword\">return</span> str_tmp</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Deep copy a JSON object</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__deep_copy</span><span class=\"params\">(self, obj)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> isinstance(obj, list):</div><div class=\"line\">            <span class=\"keyword\">return</span> [self.__deep_copy(item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> obj]</div><div class=\"line\">        <span class=\"keyword\">elif</span> isinstance(obj, dict):</div><div class=\"line\">            <span class=\"keyword\">return</span> dict((key, self.__deep_copy(obj[key])) <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> obj)</div><div class=\"line\">        <span class=\"keyword\">return</span> obj</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Load a external JSON file into json_dict.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loadJson</span><span class=\"params\">(self, f)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">u'[INFO] Load the JSON file: %s'</span> % f)</div><div class=\"line\">        str_json = <span class=\"string\">''</span></div><div class=\"line\">        file_json = open(f, <span class=\"string\">'r'</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">                line = file_json.readline()</div><div class=\"line\">                <span class=\"keyword\">if</span> len(line) == <span class=\"number\">0</span>:</div><div class=\"line\">                    <span class=\"keyword\">break</span></div><div class=\"line\">                str_json += line</div><div class=\"line\">        <span class=\"keyword\">except</span> IOError:</div><div class=\"line\">            print(<span class=\"string\">u'[ERROR] IO error, please check!'</span>)</div><div class=\"line\">            exit(<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">u'[ERROR] Program exception!'</span>)</div><div class=\"line\">            exit(<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">finally</span>:</div><div class=\"line\">            file_json.close()</div><div class=\"line\">        self.load(str_json)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Dump the class data into a JSON file, overwrite if file exist, failed if IO error.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dumpJson</span><span class=\"params\">(self, f)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">u'[INFO] Dump to JSON file: %s'</span> % f)</div><div class=\"line\">        file_json = open(f, <span class=\"string\">'w'</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            file_json.write(self.__dict_to_json_str(self.data_json))</div><div class=\"line\">        <span class=\"keyword\">except</span> IOError:</div><div class=\"line\">            print(<span class=\"string\">'[ERROR] IO error, please check!'</span>)</div><div class=\"line\">            exit(<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">finally</span>:</div><div class=\"line\">            file_json.close()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Load a object into class data and skip non-string type keys</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loadDict</span><span class=\"params\">(self, d)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">u'[INFO] Load dictionary.'</span>)</div><div class=\"line\">        str_json = str(d)</div><div class=\"line\">        str_tgt = <span class=\"string\">''</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(str_json)):</div><div class=\"line\">            <span class=\"keyword\">if</span> str_json[i] == <span class=\"string\">'\\''</span> <span class=\"keyword\">and</span> str_json[i - <span class=\"number\">1</span>] != <span class=\"string\">'\\\\'</span>:</div><div class=\"line\">                str_tgt += <span class=\"string\">'\"'</span></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                str_tgt += str_json[i]</div><div class=\"line\">        str_tgt = str_tgt.replace(<span class=\"string\">': None,'</span>, <span class=\"string\">': null,'</span>).replace(<span class=\"string\">': False,'</span>, <span class=\"string\">': false,'</span>).replace(<span class=\"string\">': True,'</span>, <span class=\"string\">': true,'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> isinstance(d, list):</div><div class=\"line\">            self.data_json = list()</div><div class=\"line\">            self.__build_json_data(self.data_json, self.__parse_json_objects(str_tgt), list)</div><div class=\"line\">        <span class=\"keyword\">elif</span> isinstance(d, dict):</div><div class=\"line\">            self.data_json = dict()</div><div class=\"line\">            self.__build_json_data(self.data_json, self.__parse_json_objects(str_tgt), dict)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Return a deep copy dump JSON object</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dumpDict</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">u'[INFO] Return a dump object.'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> self.__deep_copy(self.data_json)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Update the JSON data in dictionary</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, d)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            self.data_json.update(d)</div><div class=\"line\">        <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">            print(<span class=\"string\">u'[ERROR] Value error, please check!'</span>)</div><div class=\"line\">            exit(<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">u'[ERROR] Program exception!'</span>)</div><div class=\"line\">            exit(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonError</span><span class=\"params\">(Exception)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, msg)</span>:</span></div><div class=\"line\">        Exception.__init__(self, <span class=\"string\">u'%s'</span> % msg)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonFormatError</span><span class=\"params\">(JsonError)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, msg)</span>:</span></div><div class=\"line\">        JsonError.__init__(self, <span class=\"string\">u'[ERROR] %s'</span> % msg)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonValueError</span><span class=\"params\">(JsonError)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, msg, var)</span>:</span></div><div class=\"line\">        JsonError.__init__(self, <span class=\"string\">u'[ERROR] %s &gt;&gt;&gt; %s'</span> % (msg, var))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonInvalidKeywordError</span><span class=\"params\">(JsonError)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, msg, kw)</span>:</span></div><div class=\"line\">        JsonError.__init__(self, <span class=\"string\">u'[ERROR] %s &gt;&gt;&gt; %s'</span> % (msg, kw))</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-01-15-JSON解析器小练习.md","raw":"title: \"JSON解析器小练习\"\ndate: 2015-01-15 09:50:01\ncategories:\n- 猿人日常\ntags:\n- Python\n- JSON\n- 解析器\n---\n>原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n\n来到网易的第三天，我还是在Python的学习阶段，不过对Python一些理论性的东西已经有所理解。与此同时，主管也有给我一些小练习，让我边做边熟悉。是的，学习一种新的编程语言最有效率的方法就是边看书边打代码做小练习，这在我之前的学习中也深有体会。\n\n在此顺便记录一下小练习`JSON Parser`的代码：`初学勿喷`\n```python\n# -*- coding: utf-8 -*-\nimport string\n\nclass JsonParser:\n    def __init__(self):\n        self.data_json = None\n\n    # JSON type: null, true and false.\n    __list_jdt = [u'null', u'true', u'false']\n\n    # Read a string JSON data into the class, with no return value.\n    def load(self, s):\n        print(u'[INFO] Load JSON string.')\n        json_type = JsonParser.__get_json_obj_type(s)\n        if json_type == list:\n            self.data_json = list()\n        elif json_type == dict:\n            self.data_json = dict()\n        self.__build_json_data(self.data_json, self.__parse_json_objects(s), json_type)\n\n    # Reference to the dictionary data and return the JSON string.\n    def dump(self):\n        return str(self.data_json)\n\n    # Build with parent and child relationship, to align the JSON data structure, with no return value.\n    def __build_json_data(self, parent, obj, typ):\n        if typ == dict:\n            count_bb = 0\n            count_sb = 0\n            obj_key = ''\n            obj_value = []\n            flg_d = True\n            for i in range(len(obj)):\n                if flg_d:\n                    if obj[i] == ':':\n                        flg_d = not flg_d\n                        obj_key = obj[i - 1].replace('\"', '')\n                else:\n                    count_bb, count_sb = JsonParser.__cal_brackets(obj[i], count_bb, count_sb)\n                    obj_value.append(obj[i])\n                    if count_bb + count_sb == 0:\n                        flg_d = not flg_d\n                        self.__build_dict(parent, obj_key, obj_value)\n                        obj_key = ''\n                        obj_value = []\n        elif typ == list:\n            count_bb = 0\n            count_sb = 0\n            list_obj = []\n            del obj[0]\n            del obj[len(obj) - 1]\n            for i in range(len(obj)):\n                count_bb, count_sb = JsonParser.__cal_brackets(obj[i], count_bb, count_sb)\n                list_obj.append(obj[i])\n                if count_bb + count_sb == 0:\n                    self.__build_list(parent, list_obj)\n                    list_obj = []\n\n    # Build list data\n    def __build_list(self, parent, list_obj):\n        if list_obj[0] != ',':\n            if list_obj[0] == '{':\n                parent.append(list_obj)\n                parent[len(parent) - 1] = dict()\n                self.__build_json_data(parent[len(parent) - 1], list_obj, dict)\n            elif list_obj[0] == '[':\n                parent.append(list_obj)\n                parent[len(parent) - 1] = list()\n                self.__build_json_data(parent[len(parent) - 1], list_obj, list)\n\n    # Build dictionary data\n    def __build_dict(self, parent, obj_key, obj_value):\n        if obj_value[0] == '{':\n            parent[obj_key] = dict()\n            self.__build_json_data(parent[obj_key], obj_value, dict)\n        elif obj_value[0] == '[':\n            parent[obj_key] = list()\n            self.__build_json_data(parent[obj_key], obj_value, list)\n        elif len(obj_value) == 1:\n            if obj_value[0] in self.__list_jdt:\n                if obj_value[0] == self.__list_jdt[0]:\n                    parent[obj_key] = None\n                elif obj_value[0] == self.__list_jdt[1]:\n                    parent[obj_key] = True\n                elif obj_value[0] == self.__list_jdt[2]:\n                    parent[obj_key] = False\n                else:\n                    raise JsonValueError(u'JSON value exception.', obj_value[0])\n            elif obj_value[0][0] == '\"':\n                parent[obj_key] = obj_value[0].replace('\"', '')\n            elif '.' in obj_value[0]:\n                try:\n                    parent[obj_key] = string.atof(obj_value[0])\n                except ValueError:\n                    raise JsonValueError(u'Invalid literal JSON value for float.', obj_value[0])\n                except:\n                    raise JsonError(u'[ERROR] Unknown Json Error.')\n            else:\n                try:\n                    parent[obj_key] = string.atoi(obj_value[0])\n                except ValueError:\n                    raise JsonValueError(u'Invalid literal JSON value for int.', obj_value[0])\n                except:\n                    raise JsonError(u'[ERROR] Unknown Json Error.')\n        else:\n            raise JsonFormatError(u'JSON format exception.')\n\n    # calculate the brackets\n    @staticmethod\n    def __cal_brackets(obj, count_bb, count_sb):\n        if obj == '{':\n            count_bb += 1\n        if obj == '}':\n            count_bb -= 1\n        if obj == '[':\n            count_sb += 1\n        if obj == ']':\n            count_sb -= 1\n        return count_bb, count_sb\n\n    # Return the quantity of quotes.\n    @staticmethod\n    def __count_quotes(s, flg):\n        count = 0\n        if flg == 0:\n            for cc in s:\n                if cc == '\"':\n                    count += 1\n        if flg == 1:\n            for cc in s:\n                if cc == '\\'':\n                    count += 1\n        return count\n\n    # Check if s is the JSON data type.\n    def __is_json_type(self, s):\n        if s[0] == '\"':\n            return True\n        elif s in self.__list_jdt:\n            return True\n        else:\n            return False\n\n    # Parse the JSON string data to the object list.\n    def __parse_json_objects(self, str_json):\n        list_json = []\n        str_tmp = ''\n        for sgm_i in str_json:\n            if sgm_i == u'\\n':\n                continue\n            if sgm_i != ' ':\n                if sgm_i == '{' or sgm_i == '}' or sgm_i == '[' or sgm_i == ']' or sgm_i == ':' or sgm_i == ',':\n                    if str_tmp != '':\n                        if str_tmp[0] == '\\'' or str_tmp[len(str_tmp) - 1] == '\\'':\n                            raise JsonFormatError(\n                                u'JSON standard does not allow single quoted strings. >>> ' + str_tmp)\n                        if (str_tmp[0] == '\"' and str_tmp[len(str_tmp) - 1] != '\"') \\\n                                or (str_tmp[0] != '\"' and str_tmp[len(str_tmp) - 1] == '\"'):\n                            raise JsonFormatError(u'JSON verification error, missing double quote. >>> ' + str_tmp)\n                        elif not self.__is_json_type(str_tmp):\n                            try:\n                                if float(str_tmp) / 1 == float('inf') or float(str_tmp) / 1 == float('-inf'):\n                                    exit(1)\n                            except ValueError:\n                                print(u'[ERROR] JSON standard does not allow identifiers. >>> %s' % str_tmp)\n                                exit(1)\n                            except:\n                                print(u'[ERROR] Upper limit of Python float type. >>> %s' % str_tmp)\n                                exit(1)\n                        if sgm_i == ':' and str_tmp[0] != '\"':\n                            raise JsonFormatError(\n                                u'JSON standard allows only double quoted string as property key. >>> ' + str_tmp)\n                        list_json.append(str_tmp)\n                        str_tmp = ''\n                    list_json.append(sgm_i)\n                else:\n                    str_tmp = str_tmp + sgm_i\n            elif len(str_tmp) > 0 and str_tmp[0] == '\"' and JsonParser.__count_quotes(str_tmp, 0) == 1:\n                str_tmp = str_tmp + sgm_i\n        return list_json\n\n    # To determine the JSON object type\n    @staticmethod\n    def __get_json_obj_type(str_json):\n        for ch in str_json:\n            if ch == u' ':\n                continue\n            elif ch == u'[':\n                return list\n            elif ch == u'{':\n                return dict\n            else:\n                raise JsonInvalidKeywordError(\n                    u'JSON standard not allow to begin with this character (root character). >>> %s', ch)\n\n    # Parse None, True, False to JSON value\n    @staticmethod\n    def __parse_jdt(s):\n        if s == 'None':\n            return 'null'\n        if s == 'True':\n            return 'true'\n        if s == 'False':\n            return 'false'\n        return s\n\n    # Parse the dictionary to JSON string.\n    def __dict_to_json_str(self, dict_json):\n        str_json = str(dict_json)\n        list_json = []\n        str_tmp = ''\n        for sgm_i in str_json:\n            if sgm_i == u'\\n':\n                continue\n            if sgm_i != ' ':\n                if sgm_i == '{' or sgm_i == '}' or sgm_i == '[' or sgm_i == ']' or sgm_i == ':' or sgm_i == ',':\n                    if str_tmp != '':\n                        if str_tmp[0] == '\\'' or str_tmp[len(str_tmp) - 1] == '\\'':\n                            str_tmp = '\"' + str_tmp[1:len(str_tmp) - 1] + '\"'\n                        if sgm_i == ':' and str_tmp[0] != '\"':\n                            raise JsonFormatError(\n                                u'JSON standard allows only double quoted string as property key. >>> Key: ' + str_tmp)\n                        if list_json[len(list_json) - 1] == ':':\n                            str_tmp = self.__parse_jdt(str_tmp)\n                        if not self.__is_json_type(str_tmp):\n                            try:\n                                if float(str_tmp) / 1 == float('inf') or float(str_tmp) / 1 == float('-inf'):\n                                    exit(1)\n                            except ValueError:\n                                print(u'[ERROR] JSON standard does not allow identifiers. >>> %s' % str_tmp)\n                                exit(1)\n                            except:\n                                print(u'[ERROR] Upper limit of Python float type. >>> %s' % str_tmp)\n                                exit(1)\n                        list_json.append(str_tmp)\n                        str_tmp = ''\n                    list_json.append(sgm_i)\n                else:\n                    str_tmp = str_tmp + sgm_i\n            elif len(str_tmp) > 0 and str_tmp[0] == '\\'' and JsonParser.__count_quotes(str_tmp, 1) == 1:\n                str_tmp = str_tmp + sgm_i\n        str_tmp = ''\n        for sgm_j in list_json:\n            str_tmp += sgm_j\n        return str_tmp\n\n    # Deep copy a JSON object\n    def __deep_copy(self, obj):\n        if isinstance(obj, list):\n            return [self.__deep_copy(item) for item in obj]\n        elif isinstance(obj, dict):\n            return dict((key, self.__deep_copy(obj[key])) for key in obj)\n        return obj\n\n    # Load a external JSON file into json_dict.\n    def loadJson(self, f):\n        print(u'[INFO] Load the JSON file: %s' % f)\n        str_json = ''\n        file_json = open(f, 'r')\n        try:\n            while True:\n                line = file_json.readline()\n                if len(line) == 0:\n                    break\n                str_json += line\n        except IOError:\n            print(u'[ERROR] IO error, please check!')\n            exit(1)\n        except:\n            print(u'[ERROR] Program exception!')\n            exit(1)\n        finally:\n            file_json.close()\n        self.load(str_json)\n\n    # Dump the class data into a JSON file, overwrite if file exist, failed if IO error.\n    def dumpJson(self, f):\n        print(u'[INFO] Dump to JSON file: %s' % f)\n        file_json = open(f, 'w')\n        try:\n            file_json.write(self.__dict_to_json_str(self.data_json))\n        except IOError:\n            print('[ERROR] IO error, please check!')\n            exit(1)\n        finally:\n            file_json.close()\n\n    # Load a object into class data and skip non-string type keys\n    def loadDict(self, d):\n        print(u'[INFO] Load dictionary.')\n        str_json = str(d)\n        str_tgt = ''\n        for i in range(len(str_json)):\n            if str_json[i] == '\\'' and str_json[i - 1] != '\\\\':\n                str_tgt += '\"'\n            else:\n                str_tgt += str_json[i]\n        str_tgt = str_tgt.replace(': None,', ': null,').replace(': False,', ': false,').replace(': True,', ': true,')\n        if isinstance(d, list):\n            self.data_json = list()\n            self.__build_json_data(self.data_json, self.__parse_json_objects(str_tgt), list)\n        elif isinstance(d, dict):\n            self.data_json = dict()\n            self.__build_json_data(self.data_json, self.__parse_json_objects(str_tgt), dict)\n\n    # Return a deep copy dump JSON object\n    def dumpDict(self):\n        print(u'[INFO] Return a dump object.')\n        return self.__deep_copy(self.data_json)\n\n    # Update the JSON data in dictionary\n    def update(self, d):\n        try:\n            self.data_json.update(d)\n        except ValueError:\n            print(u'[ERROR] Value error, please check!')\n            exit(1)\n        except:\n            print(u'[ERROR] Program exception!')\n            exit(1)\n\n\nclass JsonError(Exception):\n    def __init__(self, msg):\n        Exception.__init__(self, u'%s' % msg)\n\n\nclass JsonFormatError(JsonError):\n    def __init__(self, msg):\n        JsonError.__init__(self, u'[ERROR] %s' % msg)\n\n\nclass JsonValueError(JsonError):\n    def __init__(self, msg, var):\n        JsonError.__init__(self, u'[ERROR] %s >>> %s' % (msg, var))\n\n\nclass JsonInvalidKeywordError(JsonError):\n    def __init__(self, msg, kw):\n        JsonError.__init__(self, u'[ERROR] %s >>> %s' % (msg, kw))\n```\n","slug":"JSON解析器小练习","updated":1423134716000,"excerpt":"","_id":"cmpp03dhu2168hum","comments":true,"layout":"post","photos":[],"link":""},{"title":"PyQt4中使用qrc资源文件","date":1421385470000,"categories":["qjrjijfq46k5bzcm"],"tags":["k47zffh4cn3ah628","eyxzyjelqsu5107i","1zpy0v3ei2x4mu5m"],"content":"<p>Qt提供了非常好用的<code>rcc</code>系统，尤其当系统使用了非常多的图片要管理的时候。Qt管理的方式就是使用qrc文件。</p>\n<ol>\n<li>在QtDesigner中可以直接建立qrc文件。</li>\n<li><p>编辑好自己的qrc文件之后，在<code>python目录/Lib/site-packages/PyQt4</code>下可以找到<code>pyrcc4.exe</code>文件，这个文件就是主角了。</p>\n<p><code>pyrcc4 -o D:/form_rc.py D:/form.qrc</code></p>\n</li>\n<li>然后它就会在D盘下建立form.qrc转换后的form_rc.py文件了。然后在PyQt中直接引用就行了。<br><br></li>\n</ol>\n<hr>\n<p>也可以用下面的代码，ui文件和qrc文件都可以转换：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\">reload(sys)</div><div class=\"line\">sys.setdefaultencoding(<span class=\"string\">\"utf-8\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'.'</span>):</div><div class=\"line\">    <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files:</div><div class=\"line\">        <span class=\"keyword\">if</span> file.endswith(<span class=\"string\">'.ui'</span>):</div><div class=\"line\">            os.system(<span class=\"string\">'pyuic4 -o ui_%s.py %s'</span> % (file.rsplit(<span class=\"string\">'.'</span>, <span class=\"number\">1</span>)[<span class=\"number\">0</span>], root + <span class=\"string\">'\\\\'</span> + file))</div><div class=\"line\">        <span class=\"keyword\">elif</span> file.endswith(<span class=\"string\">'.qrc'</span>):</div><div class=\"line\">            os.system(<span class=\"string\">'pyrcc4 -o %s_rc.py %s'</span> % (file.rsplit(<span class=\"string\">'.'</span>, <span class=\"number\">1</span>)[<span class=\"number\">0</span>], root + <span class=\"string\">'\\\\'</span> + file))</div></pre></td></tr></table></figure>\n\n<p>放到当前目录下执行即可。</p>\n","source":"_posts/2015-01-16-PyQt4中使用qrc资源文件.md","raw":"title: PyQt4中使用qrc资源文件\ndate: 2015-01-16 13:17:50\ncategories:\n- PyQt\ntags:\n- PyQt\n- 资源文件\n- qrc\n---\nQt提供了非常好用的`rcc`系统，尤其当系统使用了非常多的图片要管理的时候。Qt管理的方式就是使用qrc文件。\n\n1. 在QtDesigner中可以直接建立qrc文件。\n2. 编辑好自己的qrc文件之后，在`python目录/Lib/site-packages/PyQt4`下可以找到`pyrcc4.exe`文件，这个文件就是主角了。\n\n   `pyrcc4 -o D:/form_rc.py D:/form.qrc`\n3. 然后它就会在D盘下建立form.qrc转换后的form_rc.py文件了。然后在PyQt中直接引用就行了。\n<br>\n\n----------\n也可以用下面的代码，ui文件和qrc文件都可以转换：\n```python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\nreload(sys)\nsys.setdefaultencoding(\"utf-8\")\n\nfor root, dirs, files in os.walk('.'):\n    for file in files:\n        if file.endswith('.ui'):\n            os.system('pyuic4 -o ui_%s.py %s' % (file.rsplit('.', 1)[0], root + '\\\\' + file))\n        elif file.endswith('.qrc'):\n            os.system('pyrcc4 -o %s_rc.py %s' % (file.rsplit('.', 1)[0], root + '\\\\' + file))\n```\n放到当前目录下执行即可。\n","slug":"PyQt4中使用qrc资源文件","updated":1423137446000,"excerpt":"","_id":"lps0z94lgfqg8to8","comments":true,"layout":"post","photos":[],"link":""},{"title":"PyQt之自定义无边框窗口遮盖任务栏显示问题","date":1421467922000,"categories":["qjrjijfq46k5bzcm"],"tags":["k47zffh4cn3ah628","moltvr66n05aw7kx","o3r3wbj1l5pol8s9"],"content":"<blockquote>\n<p>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/caomingongli/archive/2011/09/19/2181842.html\" title=\"http://www.cnblogs.com/caomingongli/archive/2011/09/19/2181842.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/caomingongli/archive/2011/09/19/2181842.html</a></p>\n</blockquote>\n<p>问题：用PyQt来模仿实现Web桌面的问题之一，便是设置无边框窗口时遮盖任务栏的问题。<br><br>解决方案：</p>\n<ul>\n<li>设置窗口标记，实现无边框效果</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 设置窗口标记（无边框）</span></div><div class=\"line\">self.setWindowFlags(QtCore.Qt.FramelessWindowHint)</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>覆盖实现最大化函数<br><br>得到屏幕可显示尺寸，需要用到QDeskWidget类的availableGeometry函数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 得到桌面控件</span></div><div class=\"line\">desktop = QtGui.QApplication.desktop()</div><div class=\"line\"><span class=\"comment\"># 得到屏幕可显示尺寸</span></div><div class=\"line\">rect = desktop.availableGeometry()</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>设置窗口尺寸为屏幕可显示尺寸并显示</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 设置窗口尺寸</span></div><div class=\"line\">self.setGeometry(rect)</div><div class=\"line\"><span class=\"comment\"># 设置窗口显示</span></div><div class=\"line\">self.show()</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>实现效果<br><img src=\"2011091922270416.jpg\" alt=\"\"></li>\n</ul>\n<p><br></p>\n<ul>\n<li>示例程序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding=gbk</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 导入模块</span></div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">from</span> PyQt4 <span class=\"keyword\">import</span> QtGui,QtCore</div><div class=\"line\"><span class=\"comment\">######################################### 自定义窗口类 ########################################</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyWindow</span><span class=\"params\">(QtGui.QMainWindow)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''自定义窗口类'''</span></div><div class=\"line\">    <span class=\"comment\">###################################### 构造、析构函数 ###################################</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,parent=None)</span>:</span></div><div class=\"line\">        <span class=\"string\">'''构造函数'''</span></div><div class=\"line\">        <span class=\"comment\"># 调用父类构造函数</span></div><div class=\"line\">        super(MyWindow,self).__init__(parent)</div><div class=\"line\">        <span class=\"comment\"># 设置窗口标记（无边框|任务栏右键菜单）</span></div><div class=\"line\">        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowSystemMenuHint)</div><div class=\"line\">        <span class=\"comment\"># 便于显示，设置窗口背景颜色(采用QSS)</span></div><div class=\"line\">        self.setStyleSheet(<span class=\"string\">'''background-color:cyan;'''</span>)</div><div class=\"line\">    <span class=\"comment\">####################################### 覆盖函数 #######################################    </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">showMaximized</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">'''最大化'''</span></div><div class=\"line\">        <span class=\"comment\"># 得到桌面控件</span></div><div class=\"line\">        desktop = QtGui.QApplication.desktop()</div><div class=\"line\">        <span class=\"comment\"># 得到屏幕可显示尺寸</span></div><div class=\"line\">        rect = desktop.availableGeometry()</div><div class=\"line\">        <span class=\"comment\"># 设置窗口尺寸</span></div><div class=\"line\">        self.setGeometry(rect)</div><div class=\"line\">        <span class=\"comment\"># 设置窗口显示</span></div><div class=\"line\">        self.show()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">########################################### 主函数 #########################################        </span></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    <span class=\"string\">'''主函数'''</span></div><div class=\"line\">    <span class=\"comment\"># 声明变量</span></div><div class=\"line\">    app = QtGui.QApplication(sys.argv)</div><div class=\"line\">    <span class=\"comment\"># 创建窗口</span></div><div class=\"line\">    window = MyWindow()</div><div class=\"line\">    <span class=\"comment\"># 调用最大化显示</span></div><div class=\"line\">    window.showMaximized()</div><div class=\"line\">    <span class=\"comment\"># 应用程序事件循环</span></div><div class=\"line\">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-01-17-PyQt之自定义无边框窗口遮盖任务栏显示问题.md","raw":"title: \"PyQt之自定义无边框窗口遮盖任务栏显示问题\"\ndate: 2015-01-17 12:12:02\ncategories:\n- PyQt\ntags:\n- PyQt\n- 无边框窗口\n- 任务栏\n---\n>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n>[http://www.cnblogs.com/caomingongli/archive/2011/09/19/2181842.html](http://www.cnblogs.com/caomingongli/archive/2011/09/19/2181842.html \"http://www.cnblogs.com/caomingongli/archive/2011/09/19/2181842.html\")\n\n问题：用PyQt来模仿实现Web桌面的问题之一，便是设置无边框窗口时遮盖任务栏的问题。<br>\n解决方案：\n- 设置窗口标记，实现无边框效果\n```python\n# 设置窗口标记（无边框）\nself.setWindowFlags(QtCore.Qt.FramelessWindowHint)\n```\n<br>\n- 覆盖实现最大化函数<br>\n得到屏幕可显示尺寸，需要用到QDeskWidget类的availableGeometry函数\n```python\n# 得到桌面控件\ndesktop = QtGui.QApplication.desktop()\n# 得到屏幕可显示尺寸\nrect = desktop.availableGeometry()\n```\n<br>\n- 设置窗口尺寸为屏幕可显示尺寸并显示\n```python\n# 设置窗口尺寸\nself.setGeometry(rect)\n# 设置窗口显示\nself.show()\n```\n<br>\n- 实现效果\n![](2011091922270416.jpg)\n\n<br>\n- 示例程序\n```python\n# coding=gbk\n\n# 导入模块\nimport sys\nfrom PyQt4 import QtGui,QtCore\n######################################### 自定义窗口类 ########################################\nclass MyWindow(QtGui.QMainWindow):\n    '''自定义窗口类'''\n    ###################################### 构造、析构函数 ###################################\n    def __init__(self,parent=None):\n        '''构造函数'''\n        # 调用父类构造函数\n        super(MyWindow,self).__init__(parent)\n        # 设置窗口标记（无边框|任务栏右键菜单）\n        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowSystemMenuHint)\n        # 便于显示，设置窗口背景颜色(采用QSS)\n        self.setStyleSheet('''background-color:cyan;''')\n    ####################################### 覆盖函数 #######################################    \n    def showMaximized(self):\n        '''最大化'''\n        # 得到桌面控件\n        desktop = QtGui.QApplication.desktop()\n        # 得到屏幕可显示尺寸\n        rect = desktop.availableGeometry()\n        # 设置窗口尺寸\n        self.setGeometry(rect)\n        # 设置窗口显示\n        self.show()\n\n########################################### 主函数 #########################################        \nif __name__ == \"__main__\":\n    '''主函数'''\n    # 声明变量\n    app = QtGui.QApplication(sys.argv)\n    # 创建窗口\n    window = MyWindow()\n    # 调用最大化显示\n    window.showMaximized()\n    # 应用程序事件循环\n    sys.exit(app.exec_())\n```\n","slug":"PyQt之自定义无边框窗口遮盖任务栏显示问题","updated":1423829687000,"excerpt":"","_id":"m36sxb7zv6hst1vo","comments":true,"layout":"post","photos":[],"link":""},{"title":"开发管理中的版本管理Trunk,Branch和Tags","date":1421583281000,"categories":["1fzoemunfy1khuj2"],"tags":["ej815tfkqs7dbd1y","i27bryk9t4xiwjia","nu5dfvhnfftjefd2","ogf4qiiee6qt8p4i","slf39bz9kd1douoy","o7ox2471j4974wqh"],"content":"<blockquote>\n<p>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。<br><a href=\"http://blog.sina.com.cn/s/blog_49a94d1b0100r7id.html\" title=\"http://blog.sina.com.cn/s/blog_49a94d1b0100r7id.html\" target=\"_blank\" rel=\"external\">http://blog.sina.com.cn/s/blog_49a94d1b0100r7id.html</a></p>\n</blockquote>\n<p><code>trunk</code>:主线，开发过程中的工作目录</p>\n<p><code>branches</code>:支线，临时分支，定制化需求<br>branches/OtasApp001<br>branches/OtasApp002</p>\n<p><code>tags</code>:发布目录，不做修改<br>tags/release-1.0<br>tags/release-1.1</p>\n<p><code>场景一</code>：<br>产品开发已经基本完成，并且通过很严格的测试，这时候我们就想发布我们的1.0版本,不再提交代码<br><code>svn copy svn://server/trunk svn://server/tags/release-1.0 -m &quot;1.0 released&quot;</code></p>\n<p><code>场景二</code>：<br>有一个客户想对产品做定制，我们可以从已发布库中选择一个版本，做为起点来开发<br><code>svn copy svn://server/tags/release-1.0 svn://server/branches/order009 -m &quot;定单009&quot;</code></p>\n<p><code>场景三</code>：<br>有一天，突然在trunk下的core中发现一个致命的bug,那么所有的branches一定也一样，这时需要进行分支合并</p>\n<ol>\n<li><code>svn -r 148:149 merge svn://server/trunk branches/order008</code></li>\n<li><code>svn -r 148:149 merge svn://server/trunk branches/order009</code><br>其中<code>148</code>和<code>149</code>是两次修改的版本号</li>\n</ol>\n","source":"_posts/2015-01-18-开发管理中的版本管理Trunk-Branch和Tags.md","raw":"title: \"开发管理中的版本管理Trunk,Branch和Tags\"\ndate: 2015-01-18 20:14:41\ncategories:\n- SVN\ntags:\n- SVN\n- 开发管理\n- 版本控制\n- Trunk\n- Branch\n- Tags\n---\n>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n>[http://blog.sina.com.cn/s/blog_49a94d1b0100r7id.html](http://blog.sina.com.cn/s/blog_49a94d1b0100r7id.html \"http://blog.sina.com.cn/s/blog_49a94d1b0100r7id.html\")\n\n`trunk`:主线，开发过程中的工作目录\n\n`branches`:支线，临时分支，定制化需求\nbranches/OtasApp001\nbranches/OtasApp002\n\n`tags`:发布目录，不做修改\ntags/release-1.0\ntags/release-1.1\n\n`场景一`：\n产品开发已经基本完成，并且通过很严格的测试，这时候我们就想发布我们的1.0版本,不再提交代码\n`svn copy svn://server/trunk svn://server/tags/release-1.0 -m \"1.0 released\"`\n\n`场景二`：\n有一个客户想对产品做定制，我们可以从已发布库中选择一个版本，做为起点来开发\n`svn copy svn://server/tags/release-1.0 svn://server/branches/order009 -m \"定单009\"`\n\n`场景三`：\n有一天，突然在trunk下的core中发现一个致命的bug,那么所有的branches一定也一样，这时需要进行分支合并\n1. `svn -r 148:149 merge svn://server/trunk branches/order008`\n2. `svn -r 148:149 merge svn://server/trunk branches/order009`\n其中`148`和`149`是两次修改的版本号\n","slug":"开发管理中的版本管理Trunk-Branch和Tags","updated":1423829692000,"excerpt":"","_id":"8repd459bhfezxrr","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt 字体大小的计算","date":1421635030000,"categories":["wq9t0ozhm3vpjc5j"],"tags":["iiitas3upf5je20f","8kc1135xxxsefy1z"],"content":"<p><br></p>\n<h2 id=\"计算字符串或者字符宽度的系统函数有：\">计算字符串或者字符宽度的系统函数有：</h2>\n<h3 id=\"QLabel::fontMetrics()-width(QString_s):_获取字符串s的总像素宽度。\">QLabel::fontMetrics().width(QString s): 获取字符串s的总像素宽度。</h3>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">int QFontMetrics::width ( const QString & <span class=\"keyword\">text</span>, int <span class=\"built_in\">len</span> = -<span class=\"number\">1</span> ) const</div><div class=\"line\"></div><div class=\"line\">Returns <span class=\"operator\">the</span> width <span class=\"operator\">in</span> pixels <span class=\"operator\">of</span> <span class=\"operator\">the</span> <span class=\"keyword\">first</span> <span class=\"built_in\">len</span> <span class=\"keyword\">characters</span> <span class=\"operator\">of</span> <span class=\"keyword\">text</span>. If <span class=\"built_in\">len</span> is negative (<span class=\"operator\">the</span> default), <span class=\"operator\">the</span> entire <span class=\"keyword\">string</span> is used.</div><div class=\"line\"></div><div class=\"line\">Note that this <span class=\"built_in\">value</span> is <span class=\"operator\">not</span> equal <span class=\"built_in\">to</span> boundingRect().width(); boundingRect() returns <span class=\"operator\">a</span> rectangle describing <span class=\"operator\">the</span> pixels this <span class=\"keyword\">string</span> will cover whereas width() returns <span class=\"operator\">the</span> distance <span class=\"built_in\">to</span> where <span class=\"operator\">the</span> next <span class=\"keyword\">string</span> should be drawn.</div><div class=\"line\"></div><div class=\"line\">See also boundingRect().</div></pre></td></tr></table></figure>\n\n<h3 id=\"QLabel::fontMetrics()-height():_获取字体的高度。\">QLabel::fontMetrics().height(): 获取字体的高度。</h3>\n<p>int QFontMetrics::height () const</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Returns <span class=\"operator\">the</span> height <span class=\"operator\">of</span> <span class=\"operator\">the</span> font.</div><div class=\"line\"></div><div class=\"line\">This is always equal <span class=\"built_in\">to</span> ascent()+descent()+<span class=\"number\">1</span> (<span class=\"operator\">the</span> <span class=\"number\">1</span> is <span class=\"keyword\">for</span> <span class=\"operator\">the</span> base <span class=\"built_in\">line</span>).</div><div class=\"line\"></div><div class=\"line\">See also leading() <span class=\"operator\">and</span> lineSpacing().</div></pre></td></tr></table></figure>\n\n<h3 id=\"QLabel::fontMetrics()-lineSpacing():_获取字体的高度，包括文字的实际宽度和行距。\">QLabel::fontMetrics().lineSpacing(): 获取字体的高度，包括文字的实际宽度和行距。</h3>\n<h3 id=\"QLabel::fontMetrics()-leading():_行间距\">QLabel::fontMetrics().leading(): 行间距</h3>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">int QFontMetrics::leading () const</div><div class=\"line\"></div><div class=\"line\">Returns <span class=\"operator\">the</span> leading <span class=\"operator\">of</span> <span class=\"operator\">the</span> font.</div><div class=\"line\"></div><div class=\"line\">This is <span class=\"operator\">the</span> natural inter-<span class=\"built_in\">line</span> spacing.</div><div class=\"line\"></div><div class=\"line\">See also height() <span class=\"operator\">and</span> lineSpacing().</div></pre></td></tr></table></figure>\n\n<h3 id=\"QT内部计算字体、像素和字符宽度之间的方法是：\">QT内部计算字体、像素和字符宽度之间的方法是：</h3>\n<p>见地址：<a href=\"http://losemyheaven.blog.163.com/blog/static/17071980920111283934557/\" target=\"_blank\" rel=\"external\">http://losemyheaven.blog.163.com/blog/static/17071980920111283934557/</a></p>\n<blockquote>\n<p>在QFont当中有两种方式设置字体大小，一种是PixelSize，另一种是PointSize</p>\n<p>Point实际是磅，也就是 1/72 inch</p>\n<p>我们可以从PainterDevice中得到当前DPI(Dot per inch)。因此 Pixel = DPI * Point / 72</p>\n<p>例如设置字体为20Point。 那么字体的像素大小是 90 * 20 / 72 约等于 25.</p>\n<p>可以将字体设置为25Pixel，看到字体的大小就是20Point和25Pixel大小是一样的。</p>\n<p>QFont当中设置的大小，实际上字体的高度，由如下组成。<br><img src=\"110211082116831.jpg\" alt=\"\"></p>\n<p>由PixelSize设置的高度，实际是Asent + 1像素(baseline的高度)。</p>\n<p>在字体大小中涉及了以下知识：</p>\n<p>DPI: Dot per inch，在显示器上也就是每英寸包含的像素。英尺的换算为 1 cm = 0.39 inch, 1 inch = 2.54 cm。</p>\n<p>DPI 可以通过如下计算得来：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">水平 dpi = 水平 resolution * <span class=\"number\">2.54</span> / 显示器宽度</div><div class=\"line\">垂直 dpi = 垂直 resolution * <span class=\"number\">2.54</span> / 显示器高度</div><div class=\"line\">pixel pitch（点距）: 像素点间距离。可以用<span class=\"number\">25.4</span>mm / DPI得到。</div><div class=\"line\">字体在屏幕上的实际大小 = 字体像素大小 * 点距</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>大部分显示器的DPI为90.6左右，垂直和水平点距可能不一样。但windows为了方便就同一了点距，为96。我当前使用的Ubuntu的点距也是96。因此如果想要看到更大的字体可以使用更大的点距。</p>\n<p>终于弄明白了 pixel size 是所占的像素大小  这样有一个缺点 有些显示器的分辨率(dpi)比较大  那么单位长度中的像素点就比较多 这样一个字所占的长度就会比较少</p>\n<p>而 point size 则规定了实际中我们肉眼看到的字体的大小 他和pixel无关的～ 他和显示器无关  不管在什么样上的显示器上 规定大小是多少&gt;就是多少…</p>\n</blockquote>\n","source":"_posts/2015-01-19-Qt字体大小的计算.md","raw":"title: Qt 字体大小的计算\ndate: 2015-01-19 10:37:10\ncategories:\n- Qt\ntags:\n- Qt\n- QFontMetrics\n---\n<br>\n## 计算字符串或者字符宽度的系统函数有：\n\n### QLabel::fontMetrics().width(QString s): 获取字符串s的总像素宽度。\n``` cplusplus\nint QFontMetrics::width ( const QString & text, int len = -1 ) const\n\nReturns the width in pixels of the first len characters of text. If len is negative (the default), the entire string is used.\n\nNote that this value is not equal to boundingRect().width(); boundingRect() returns a rectangle describing the pixels this string will cover whereas width() returns the distance to where the next string should be drawn.\n\nSee also boundingRect().\n```\n\n### QLabel::fontMetrics().height(): 获取字体的高度。\n\nint QFontMetrics::height () const\n``` cplusplus\nReturns the height of the font.\n\nThis is always equal to ascent()+descent()+1 (the 1 is for the base line).\n\nSee also leading() and lineSpacing().\n```\n### QLabel::fontMetrics().lineSpacing(): 获取字体的高度，包括文字的实际宽度和行距。\n\n### QLabel::fontMetrics().leading(): 行间距\n``` cplusplus\nint QFontMetrics::leading () const\n\nReturns the leading of the font.\n\nThis is the natural inter-line spacing.\n\nSee also height() and lineSpacing().\n```\n\n### QT内部计算字体、像素和字符宽度之间的方法是：\n\n见地址：http://losemyheaven.blog.163.com/blog/static/17071980920111283934557/\n\n>在QFont当中有两种方式设置字体大小，一种是PixelSize，另一种是PointSize\n\n>Point实际是磅，也就是 1/72 inch\n>\n>我们可以从PainterDevice中得到当前DPI(Dot per inch)。因此 Pixel = DPI * Point / 72\n>\n>例如设置字体为20Point。 那么字体的像素大小是 90 * 20 / 72 约等于 25.\n>\n>可以将字体设置为25Pixel，看到字体的大小就是20Point和25Pixel大小是一样的。\n>\n>QFont当中设置的大小，实际上字体的高度，由如下组成。\n>![](110211082116831.jpg)\n>\n>由PixelSize设置的高度，实际是Asent + 1像素(baseline的高度)。\n>\n>在字体大小中涉及了以下知识：\n>\n>DPI: Dot per inch，在显示器上也就是每英寸包含的像素。英尺的换算为 1 cm = 0.39 inch, 1 inch = 2.54 cm。\n>\n>DPI 可以通过如下计算得来：\n```bash\n水平 dpi = 水平 resolution * 2.54 / 显示器宽度\n垂直 dpi = 垂直 resolution * 2.54 / 显示器高度\npixel pitch（点距）: 像素点间距离。可以用25.4mm / DPI得到。\n字体在屏幕上的实际大小 = 字体像素大小 * 点距\n```\n>大部分显示器的DPI为90.6左右，垂直和水平点距可能不一样。但windows为了方便就同一了点距，为96。我当前使用的Ubuntu的点距也是96。因此如果想要看到更大的字体可以使用更大的点距。\n>\n>终于弄明白了 pixel size 是所占的像素大小  这样有一个缺点 有些显示器的分辨率(dpi)比较大  那么单位长度中的像素点就比较多 这样一个字所占的长度就会比较少\n>\n>而 point size 则规定了实际中我们肉眼看到的字体的大小 他和pixel无关的～ 他和显示器无关  不管在什么样上的显示器上 规定大小是多少>就是多少...\n","slug":"Qt字体大小的计算","updated":1422957474000,"excerpt":"","_id":"ox3mcmopnjgge0sm","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt QLabel 显示网络图片","date":1421845678000,"categories":["wq9t0ozhm3vpjc5j"],"tags":["iiitas3upf5je20f","7ppkvypnjmsvcgcn","4j7fglr2le02pfci"],"content":"<blockquote>\n<p>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/sollyu/p/3628091.html?utm_source=tuicool\" title=\"http://www.cnblogs.com/sollyu/p/3628091.html?utm_source=tuicool\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/sollyu/p/3628091.html?utm_source=tuicool</a></p>\n</blockquote>\n<p>在网上试了很多代码都不能使用，自己写了写代码。</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">void QMusicLogo::setNetworkPic(<span class=\"keyword\">const</span> QString &szUrl)</div><div class=\"line\">{</div><div class=\"line\">    QUrl url(szUrl);</div><div class=\"line\">    QNetworkAccessManager manager;</div><div class=\"line\">    QEventLoop <span class=\"keyword\">loop</span>; </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// qDebug() &lt;&lt; \"Reading picture form \" &lt;&lt; url;</span></div><div class=\"line\">    QNetworkReply *reply = manager.get(QNetworkRequest(url));</div><div class=\"line\">    <span class=\"comment\">//请求结束并下载完成后，退出子事件循环</span></div><div class=\"line\">    QObject::connect(reply, SIGNAL(finished()), &<span class=\"keyword\">loop</span>, SLOT(quit()));</div><div class=\"line\">    <span class=\"comment\">//开启子事件循环</span></div><div class=\"line\">    <span class=\"keyword\">loop</span>.exec(); </div><div class=\"line\"></div><div class=\"line\">    QByteArray jpegData = reply-&gt;readAll();</div><div class=\"line\">    QPixmap pixmap;</div><div class=\"line\">    pixmap.loadFromData(jpegData);</div><div class=\"line\">    setPixmap(pixmap); <span class=\"comment\">// 你在QLabel显示图片</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-01-21-Qt-QLabel-显示网络图片.md","raw":"title: Qt QLabel 显示网络图片\ndate: 2015-01-21 21:07:58\ncategories:\n- Qt\ntags:\n- Qt\n- QLabel\n- 显示网络图片\n---\n>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n>[http://www.cnblogs.com/sollyu/p/3628091.html?utm_source=tuicool](http://www.cnblogs.com/sollyu/p/3628091.html?utm_source=tuicool \"http://www.cnblogs.com/sollyu/p/3628091.html?utm_source=tuicool\")\n\n在网上试了很多代码都不能使用，自己写了写代码。\n```cplusplus\nvoid QMusicLogo::setNetworkPic(const QString &szUrl)\n{\n    QUrl url(szUrl);\n    QNetworkAccessManager manager;\n    QEventLoop loop; \n\n    // qDebug() << \"Reading picture form \" << url;\n    QNetworkReply *reply = manager.get(QNetworkRequest(url));\n    //请求结束并下载完成后，退出子事件循环\n    QObject::connect(reply, SIGNAL(finished()), &loop, SLOT(quit()));\n    //开启子事件循环\n    loop.exec(); \n\n    QByteArray jpegData = reply->readAll();\n    QPixmap pixmap;\n    pixmap.loadFromData(jpegData);\n    setPixmap(pixmap); // 你在QLabel显示图片\n}\n```\n","slug":"Qt-QLabel-显示网络图片","updated":1424005808000,"excerpt":"","_id":"qbpm0blzp45xwkrm","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt 之 show, hide, setVisible, setHidden, close 等小结","date":1421757484000,"categories":["wq9t0ozhm3vpjc5j"],"tags":["iiitas3upf5je20f","m1ytgjfrrr5j6way","bdrsf2p7p2tfo2uk","l00t24mp3qzs5075","a8fu3nr8z4i8pzm3","zgmluu8ngqy1mul1"],"content":"<blockquote>\n<p>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。<br><a href=\"http://blog.csdn.net/dbzhang800/article/details/6300021\" title=\"http://blog.csdn.net/dbzhang800/article/details/6300021\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dbzhang800/article/details/6300021</a></p>\n</blockquote>\n<p>不知道标题该怎么取了，文中就简单整理一下下面几个函数吧。因为不断有网友问到此类问题(包括相关问题)，所以，自己整理一下，也算学习小结了。</p>\n<p>这些函数分两类，一类是用来删除对象的（从内存中干掉），一类是用来隐藏窗口的(从界面上干掉)</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td style=\"text-align:center\">QObject::deleteLater()</td>\n<td style=\"text-align:left\">delete obj; 析构对象</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">QWidget::setVisible(bool)</td>\n<td style=\"text-align:left\">使得Widget可见或不可见</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:center\">QWidget::setHidden(bool)</td>\n<td style=\"text-align:left\">1号的马甲</td>\n</tr>\n<tr>\n<td>3</td>\n<td style=\"text-align:center\">QWidget::show()</td>\n<td style=\"text-align:left\">1号的马甲</td>\n</tr>\n<tr>\n<td>4</td>\n<td style=\"text-align:center\">QWidget::hide()</td>\n<td style=\"text-align:left\">1号的马甲</td>\n</tr>\n<tr>\n<td>5</td>\n<td style=\"text-align:center\">QWidget::close()</td>\n<td style=\"text-align:left\">视情况确定是否调用4号0号</td>\n</tr>\n<tr>\n<td>6</td>\n<td style=\"text-align:center\">QDialog::done(int)</td>\n<td style=\"text-align:left\">始终会调用4号，视情况调用0号</td>\n</tr>\n<tr>\n<td>7</td>\n<td style=\"text-align:center\">QDialog::accept()</td>\n<td style=\"text-align:left\">6号的马甲</td>\n</tr>\n<tr>\n<td>8</td>\n<td style=\"text-align:center\">QDialog::reject()</td>\n<td style=\"text-align:left\">6号的马甲</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h4 id=\"写在前面\">写在前面</h4>\n<p>我们知道：</p>\n<ul>\n<li>分配到heap中的对象(通过 new)，当对其delete，才会被析构。</li>\n<li>分配在stack中的对象，当其离开作用域是被析构</li>\n</ul>\n<p>在 Qt 中，一般建议你使用 new 的方式创建对象。或者，你可以看看  从 Qt 的 delete 说开来</p>\n<p>注意：<br>本文接下来的讨论，都是假定你用的 new 创建的对象。</p>\n<h4 id=\"QObject\">QObject</h4>\n<p>从Qt类的祖宗开始吧。因为QObject不涉及界面啊，成员中只涉及析构问题。在从 Qt 的 delete 说开来 一文中，我们知道：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj-&gt;deleteLater();</div></pre></td></tr></table></figure>\n\n<p>最后调用的就是：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"operator\"><span class=\"keyword\">delete</span> obj;</span></div></pre></td></tr></table></figure>\n\n<p>很简单哈。所以，这个函数的谈论（略）<br>另外：对象析构时会发射 destroyed 信号。注意，是对象析构时，这是句废话，但要记住。</p>\n<h4 id=\"QWidget\">QWidget</h4>\n<h5 id=\"setVisible\">setVisible</h5>\n<p>呵呵，show()、hide()、setVisible()、setHidden() 这4个函数让人看得眼花缭乱。怎么办？</p>\n<p>看看代码吧：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtual void <span class=\"function\">setVisible</span>(bool <span class=\"value\">visible</span>);</div><div class=\"line\"><span class=\"value\">inline</span> void <span class=\"function\">setHidden</span>(bool <span class=\"value\">hidden</span>) { <span class=\"function\">setVisible</span>(!<span class=\"value\">hidden</span>); }</div><div class=\"line\"><span class=\"value\">inline</span> void <span class=\"function\">show</span>() { <span class=\"function\">setVisible</span>(true); }</div><div class=\"line\"><span class=\"value\">inline</span> void <span class=\"function\">hide</span>() { <span class=\"function\">setVisible</span>(false); }</div></pre></td></tr></table></figure>\n\n<p>代码很清楚：这四个东西之中，只有 setVisible 是独立的，其他三个都是它的马甲！</p>\n<p>setVisible 的作用是什么呢？顾名思义，使得一个Widget可见或不可见。</p>\n<p>要点：不可见，是Widget不在界面上显示，但不代表对象被析构！</p>\n<h5 id=\"close\">close</h5>\n<p>这个函数，Manual中给的其实很详细的，很透彻。但一开始想弄明白还真是不容易。</p>\n<p>首先，我们直接调用close时(或者点击关闭按钮调用)，它会生成 QCloseEvent 事件：（我们可以选择接受或阻止它，如果我们阻止事件，close将直接返回，什么都不做）</p>\n<p>看点源码：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool QWidgetPrivate::close_helper(CloseMode mode)</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">...</span></div><div class=\"line\">        QCloseEvent e;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mode == CloseWithSpontaneousEvent)</div><div class=\"line\">            QApplication::sendSpontaneousEvent(q, &e);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            QApplication::sendEvent(q, &e);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!that.isNull() && !e.isAccepted()) {</div><div class=\"line\">            data.is_closing = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> false;</div><div class=\"line\">        }</div><div class=\"line\"><span class=\"keyword\">...</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>其次：如果我们接受了事件(默认)，她就直接调用我们前面提到的朋友。（从界面上干掉）</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">q-&gt;<span class=\"literal\">hide</span>()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n\n<p>再次：如果我们为它设置过标记位（关闭时删除它）：又看到老朋友不是？（从内存中干掉）</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (q-&gt;testAttribute(Qt::WA_DeleteOnClose)) {</div><div class=\"line\">    q-&gt;setAttribute(Qt::WA_DeleteOnClose, <span class=\"keyword\">false</span>);</div><div class=\"line\">    q-&gt;deleteLater();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>题外：close 还是其他代码，但与本主题无关，不再涉及。</p>\n<h4 id=\"QDialog\">QDialog</h4>\n<p>QDialog 和 QWidget 相比，多了 done、reject 和 accept 3个相关函数：</p>\n<p>先看看两个马甲：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">void QDialog<span class=\"value\">::<span class=\"function\">accept</span>()</span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"function\">done</span>(Accepted);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">void QDialog<span class=\"value\">::<span class=\"function\">reject</span>()</span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"function\">done</span>(Rejected);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h5 id=\"done\">done</h5>\n<p>done 做的事情和close比较类似：因为它调用了close所调用的 close_helper 函数。只不过不同于close函数，它始终会先让Widget不可见。然后close操作，最后根据参数发射信号</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">void QDialog::done(<span class=\"keyword\">int</span> r)</div><div class=\"line\">{</div><div class=\"line\">    Q_D(QDialog);</div><div class=\"line\">    <span class=\"keyword\">hide</span>();</div><div class=\"line\">    setResult(r);</div><div class=\"line\"></div><div class=\"line\">    d-&gt;close_helper(QWidgetPrivate::CloseNoEvent);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">emit</span> finished(r);</div><div class=\"line\">    <span class=\"keyword\">if</span> (r == Accepted)</div><div class=\"line\">        <span class=\"keyword\">emit</span> accepted();</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (r == Rejected)</div><div class=\"line\">        <span class=\"keyword\">emit</span> rejected();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>注意：QDilaog可能包含事件循环，事件循环由QDialog::exec() 开始，QDialog::setVisible(false)将负责退出事件循环，这儿用的是其马甲hide()。</p>\n<h4 id=\"参考\">参考</h4>\n<p><a href=\"http://doc.qt.nokia.com/4.7/qobject.html\" title=\"http://doc.qt.nokia.com/4.7/qobject.html\" target=\"_blank\" rel=\"external\">http://doc.qt.nokia.com/4.7/qobject.html</a><br><a href=\"http://doc.qt.nokia.com/4.7/qwidget.html\" title=\"http://doc.qt.nokia.com/4.7/qwidget.html\" target=\"_blank\" rel=\"external\">http://doc.qt.nokia.com/4.7/qwidget.html</a><br><a href=\"http://doc.qt.nokia.com/4.7/qdialog.html\" title=\"http://doc.qt.nokia.com/4.7/qdialog.html\" target=\"_blank\" rel=\"external\">http://doc.qt.nokia.com/4.7/qdialog.html</a></p>\n","source":"_posts/2015-01-20-Qt-之-show-hide-setVisible-setHidden-close-等小结.md","raw":"title: \"Qt 之 show, hide, setVisible, setHidden, close 等小结\"\ndate: 2015-01-20 20:38:04\ncategories:\n- Qt\ntags:\n- Qt\n- setVisible\n- setHidden\n- show\n- hide\n- close\n---\n>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n>[http://blog.csdn.net/dbzhang800/article/details/6300021](http://blog.csdn.net/dbzhang800/article/details/6300021 \"http://blog.csdn.net/dbzhang800/article/details/6300021\")\n\n不知道标题该怎么取了，文中就简单整理一下下面几个函数吧。因为不断有网友问到此类问题(包括相关问题)，所以，自己整理一下，也算学习小结了。\n\n这些函数分两类，一类是用来删除对象的（从内存中干掉），一类是用来隐藏窗口的(从界面上干掉)\n\n||||\n|---|:-:|:--|\n|0|QObject::deleteLater()|delete obj; 析构对象|\n|1|QWidget::setVisible(bool)|使得Widget可见或不可见|\n|2|QWidget::setHidden(bool)|1号的马甲|\n|3|QWidget::show()|1号的马甲|\n|4|QWidget::hide()|1号的马甲|\n|5|QWidget::close()|视情况确定是否调用4号0号|\n|6|QDialog::done(int)|始终会调用4号，视情况调用0号|\n|7|QDialog::accept()|6号的马甲|\n|8|QDialog::reject()|6号的马甲|\n<br>\n#### 写在前面\n我们知道：\n- 分配到heap中的对象(通过 new)，当对其delete，才会被析构。\n- 分配在stack中的对象，当其离开作用域是被析构\n\n在 Qt 中，一般建议你使用 new 的方式创建对象。或者，你可以看看  从 Qt 的 delete 说开来\n\n注意：\n本文接下来的讨论，都是假定你用的 new 创建的对象。\n\n#### QObject\n从Qt类的祖宗开始吧。因为QObject不涉及界面啊，成员中只涉及析构问题。在从 Qt 的 delete 说开来 一文中，我们知道：\n```cplusplus\nobj->deleteLater();\n```\n\n最后调用的就是：\n```cplusplus\ndelete obj;\n```\n\n很简单哈。所以，这个函数的谈论（略）\n另外：对象析构时会发射 destroyed 信号。注意，是对象析构时，这是句废话，但要记住。\n\n#### QWidget\n##### setVisible\n呵呵，show()、hide()、setVisible()、setHidden() 这4个函数让人看得眼花缭乱。怎么办？\n\n看看代码吧：\n```cplusplus\nvirtual void setVisible(bool visible);\ninline void setHidden(bool hidden) { setVisible(!hidden); }\ninline void show() { setVisible(true); }\ninline void hide() { setVisible(false); }\n```\n代码很清楚：这四个东西之中，只有 setVisible 是独立的，其他三个都是它的马甲！\n\nsetVisible 的作用是什么呢？顾名思义，使得一个Widget可见或不可见。\n\n要点：不可见，是Widget不在界面上显示，但不代表对象被析构！\n\n##### close\n这个函数，Manual中给的其实很详细的，很透彻。但一开始想弄明白还真是不容易。\n\n首先，我们直接调用close时(或者点击关闭按钮调用)，它会生成 QCloseEvent 事件：（我们可以选择接受或阻止它，如果我们阻止事件，close将直接返回，什么都不做）\n\n看点源码：\n```cplusplus\nbool QWidgetPrivate::close_helper(CloseMode mode)\n{\n...\n        QCloseEvent e;\n        if (mode == CloseWithSpontaneousEvent)\n            QApplication::sendSpontaneousEvent(q, &e);\n        else\n            QApplication::sendEvent(q, &e);\n        if (!that.isNull() && !e.isAccepted()) {\n            data.is_closing = 0;\n            return false;\n        }\n...\n}\n```\n其次：如果我们接受了事件(默认)，她就直接调用我们前面提到的朋友。（从界面上干掉）\n```cplusplus\nq->hide();\n```\n\n再次：如果我们为它设置过标记位（关闭时删除它）：又看到老朋友不是？（从内存中干掉）\n```cplusplus\nif (q->testAttribute(Qt::WA_DeleteOnClose)) {\n    q->setAttribute(Qt::WA_DeleteOnClose, false);\n    q->deleteLater();\n}\n```\n\n题外：close 还是其他代码，但与本主题无关，不再涉及。\n\n#### QDialog\nQDialog 和 QWidget 相比，多了 done、reject 和 accept 3个相关函数：\n\n先看看两个马甲：\n```cplusplus\nvoid QDialog::accept()\n{\n    done(Accepted);\n}\n\nvoid QDialog::reject()\n{\n    done(Rejected);\n}\n```\n\n##### done\ndone 做的事情和close比较类似：因为它调用了close所调用的 close_helper 函数。只不过不同于close函数，它始终会先让Widget不可见。然后close操作，最后根据参数发射信号\n```cplusplus\nvoid QDialog::done(int r)\n{\n    Q_D(QDialog);\n    hide();\n    setResult(r);\n\n    d->close_helper(QWidgetPrivate::CloseNoEvent);\n\n    emit finished(r);\n    if (r == Accepted)\n        emit accepted();\n    else if (r == Rejected)\n        emit rejected();\n}\n```\n\n注意：QDilaog可能包含事件循环，事件循环由QDialog::exec() 开始，QDialog::setVisible(false)将负责退出事件循环，这儿用的是其马甲hide()。\n\n#### 参考\n[http://doc.qt.nokia.com/4.7/qobject.html](http://doc.qt.nokia.com/4.7/qobject.html \"http://doc.qt.nokia.com/4.7/qobject.html\")\n[http://doc.qt.nokia.com/4.7/qwidget.html](http://doc.qt.nokia.com/4.7/qwidget.html \"http://doc.qt.nokia.com/4.7/qwidget.html\") \n[http://doc.qt.nokia.com/4.7/qdialog.html](http://doc.qt.nokia.com/4.7/qdialog.html \"http://doc.qt.nokia.com/4.7/qdialog.html\")\n","slug":"Qt-之-show-hide-setVisible-setHidden-close-等小结","updated":1424005478000,"excerpt":"","_id":"933rhb2uqq92pz8s","comments":true,"layout":"post","photos":[],"link":""},{"title":"QLabel几种小技巧","date":1421932539000,"categories":["wq9t0ozhm3vpjc5j"],"tags":["iiitas3upf5je20f","7ppkvypnjmsvcgcn"],"content":"<h4 id=\"1、设置行间距\">1、设置行间距</h4>\n<p>QLabel没有设置行间距的函数，所以这种办法是行不通的。只能采用其它类似的方法来实现，例如设置行高，使用样式代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">style</span>=<span class=\"value\">'line-height:18px'</span>&gt;</span>推荐<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h4 id=\"2、链接文本\">2、链接文本</h4>\n<p>实现点击Label，即可打开网页，且文本没有下划线效果，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"http://www.sina.com\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span> <span class=\"attribute\">style</span>=<span class=\"value\">\"text-decoration: none; color:#ff0000\"</span>&gt;</span>新浪<span class=\"tag\">&lt;/<span class=\"title\">style</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p><code>text-decoration: none</code>，表示没有文本修饰，下划线就没有了。</p>\n","source":"_posts/2015-01-22-QLabel几种小技巧.md","raw":"title: QLabel几种小技巧\ndate: 2015-01-22 21:15:39\ncategories:\n- Qt\ntags:\n- Qt\n- QLabel\n---\n#### 1、设置行间距\nQLabel没有设置行间距的函数，所以这种办法是行不通的。只能采用其它类似的方法来实现，例如设置行高，使用样式代码如下：\n```html\n<p style='line-height:18px'>推荐</p>\n```\n\n#### 2、链接文本\n实现点击Label，即可打开网页，且文本没有下划线效果，如下：\n```html\n<a href=\"http://www.sina.com\"><span style=\"text-decoration: none; color:#ff0000\">新浪</style></a>\n```\n`text-decoration: none`，表示没有文本修饰，下划线就没有了。\n","slug":"QLabel几种小技巧","updated":1424006295000,"excerpt":"","_id":"n20avqzmna7uq9nj","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt开发者关于QThread的咆哮","date":1422019172000,"categories":["wq9t0ozhm3vpjc5j"],"tags":["iiitas3upf5je20f","w9n3d9s9971q698t"],"content":"<blockquote>\n<p>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。<br><a href=\"http://blog.jobbole.com/84149/\" title=\"http://blog.jobbole.com/84149/\" target=\"_blank\" rel=\"external\">http://blog.jobbole.com/84149/</a></p>\n</blockquote>\n<p>我们（Qt用户）正广泛地使用IRC来进行交流。我在Freenode网站挂出了#qt标签，用于帮助大家解答问题。我经常看到的一个问题（这让我不厌其烦），是关于理解Qt的线程机制以及如何让他们写的相关代码正确工作。人们贴出他们的代码，或者用代码写的范例，而我则总是以这样的感触告终：<br><strong>你们都用错了！</strong></p>\n<p>我觉得有件重要的事情得澄清一下，也许有点唐突了，然而，我不得不指出，下面的这个（假想中的）类是对面向对象原则的错误应用，同样也是对Qt的错误应用。</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">class MyThread : <span class=\"keyword\">public</span> QThread</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"title\">MyThread</span>()</div><div class=\"line\">    {</div><div class=\"line\">        moveToThread(<span class=\"keyword\">this</span>);</div><div class=\"line\">    }</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">void</span> run();</div><div class=\"line\"> </div><div class=\"line\">signals:</div><div class=\"line\">    <span class=\"keyword\">void</span> progress(<span class=\"keyword\">int</span>);</div><div class=\"line\">    <span class=\"keyword\">void</span> dataReady(QByteArray);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> slots:</div><div class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title\">doWork</span>();</div><div class=\"line\">    <span class=\"keyword\">void</span> timeoutHandler();</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>我对这份代码最大的质疑在于 moveToThread(this);  我见过太多人这么使用，并且完全不明白它做了些什么。那么你会问，它究竟做了什么？moveToThread()函数通知Qt准备好事件处理程序，让扩展的信号（signal）和槽（slot）在指定线程的作用域中调用。QThread是线程的接口，所以我们是在告诉这个线程在“它内部”执行代码。我们也应该在线程运行之前做这些事。即使这份代码看起来可以运行，但它很混乱，并不是QThread设计中的用法（QThread中写的所有函数都应该在创建它的线程中调用，而不是QThread开启的线程）。</p>\n<p>在我的印象中，moveToThread(this);  是因为人们在某些文章中看到并且使用而流传开来的。一次快速的网络搜索就能找到此类文章，所有这些文章中都有类似如下情形的段落：</p>\n<ol>\n<li>继承QThread类</li>\n<li>添加用来进行工作的信号和槽</li>\n<li>测试代码，发现槽函数并没有在“正确的线程”中执行</li>\n<li>谷歌一下，发现了moveToThread(this);  然后写上“看起来的确管用，所以我加上了这行代码”</li>\n</ol>\n<p>我认为，这些都源于第一步。QThread是被设计来作为一个操作系统线程的接口和控制点，而不是用来写入你想在线程里执行的代码的地方。我们（面向对象程序员）编写子类，是因为我们想扩充或者特化基类中的功能。我唯一想到的继承QThread类的合理原因，是添加QThread中不包含的功能，比如，也许可以提供一个内存指针来作为线程的堆栈，或者可以添加实时的接口和支持。用于下载文件、查询数据库，或者做任何其他操作的代码都不应该被加入到QThread的子类中；它应该被封装在它自己的对象中。</p>\n<p>通常，你可以简单地把类从继承QThread改为继承QObject，并且，也许得修改下类名。QThread类提供了start()信号，你可以将它连接到你需要的地方来进行初始化操作。为了让你的代码实际运行在新线程的作用域中，你需要实例化一个QThread对象，并且使用moveToThread()函数将你的对象分配给它。你同过moveToThread()来告诉Qt将你的代码运行在特定线程的作用域中，让线程接口和代码对象分离。如果需要的话，现在你可以将一个类的多个对象分配到一个线程中，或者将多个类的多个对象分配到一个线程。换句话说，将一个实例与一个线程绑定并不是必须的。</p>\n<p>我已经听到了许多关于编写Qt多线程代码时过于复杂的抱怨。原始的QThread类是抽象类，所以必须进行继承。但到了Qt4.4不再如此，因为QThread::run()有了一个默认的实现。在之前，唯一使用QThread的方式就是继承。有了线程关联性的支持，和信号槽连接机制的扩展，我们有了一种更为便利地使用线程的方式。我们喜欢便利，我们想使用它。不幸的是，我太晚地意识到之前迫使人们继承QThread的做法让新的方式更难普及。</p>\n<p>我也听到了一些抱怨，是关于没有同步更新范例程序和文档来向人们展示如何用最不令人头疼的方式便利地进行开发的。如今，我能引用的最佳的资源是<a href=\"http://blog.qt.io/blog/2006/12/04/threading-without-the-headache/\" title=\"我数年前写的一篇博客\" target=\"_blank\" rel=\"external\">我数年前写的一篇博客</a>。</p>\n<p>免责声明：你所看到的上面的一切，当然都只是个人观点。我在这些类上面花费了很多精力，因此关于要如何使用和不要如何使用它们，我有着相当清晰的想法。</p>\n<p>译者注：<br>最新的Qt帮助文档同时提供了建立QThread实例和继承QThread的两种多线程实现方式。根据文档描述和范例代码来看，若想在子线程中使用信号槽机制，应使用分别建立QThread和对象实例的方式；若只是单纯想用子线程运行阻塞式函数，则可继承QThread并重写QThread::run()函数。</p>\n<p>由于继承QThread后，必须在QThread::run()函数中显示调用QThread::exec()来提供对消息循环机制的支持，而QThread::exec()本身会阻塞调用方线程，因此对于需要在子线程中使用信号槽机制的情况，并不推荐使用继承QThread的形式，否则程序编写会较为复杂。</p>\n<p>扩展阅读：<a href=\"http://blog.csdn.net/dbzhang800/article/details/6557272\" title=\"QObject 之 Thread Affinity\" target=\"_blank\" rel=\"external\">QObject 之 Thread Affinity</a></p>\n<p>注：</p>\n<ol>\n<li>Thread Affinity：线程相关性</li>\n<li>“删除QThread对象前，确保线程内所有对象都没销毁”一句有误，应为“被销毁”，Qt文档中相关记录为“You must ensure that all objects created in a thread are deleted before you delete the QThread.”</li>\n</ol>\n","source":"_posts/2015-01-23-Qt开发者关于QThread的咆哮.md","raw":"title: Qt开发者关于QThread的咆哮\ndate: 2015-01-23 21:19:32\ncategories:\n- Qt\ntags:\n- Qt\n- QThread\n---\n>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n>[http://blog.jobbole.com/84149/](http://blog.jobbole.com/84149/ \"http://blog.jobbole.com/84149/\")\n\n我们（Qt用户）正广泛地使用IRC来进行交流。我在Freenode网站挂出了#qt标签，用于帮助大家解答问题。我经常看到的一个问题（这让我不厌其烦），是关于理解Qt的线程机制以及如何让他们写的相关代码正确工作。人们贴出他们的代码，或者用代码写的范例，而我则总是以这样的感触告终：\n**你们都用错了！**\n\n我觉得有件重要的事情得澄清一下，也许有点唐突了，然而，我不得不指出，下面的这个（假想中的）类是对面向对象原则的错误应用，同样也是对Qt的错误应用。\n```cplusplus\nclass MyThread : public QThread\n{\npublic:\n    MyThread()\n    {\n        moveToThread(this);\n    }\n \n    void run();\n \nsignals:\n    void progress(int);\n    void dataReady(QByteArray);\n \npublic slots:\n    void doWork();\n    void timeoutHandler();\n};\n```\n\n我对这份代码最大的质疑在于 moveToThread(this);  我见过太多人这么使用，并且完全不明白它做了些什么。那么你会问，它究竟做了什么？moveToThread()函数通知Qt准备好事件处理程序，让扩展的信号（signal）和槽（slot）在指定线程的作用域中调用。QThread是线程的接口，所以我们是在告诉这个线程在“它内部”执行代码。我们也应该在线程运行之前做这些事。即使这份代码看起来可以运行，但它很混乱，并不是QThread设计中的用法（QThread中写的所有函数都应该在创建它的线程中调用，而不是QThread开启的线程）。\n\n在我的印象中，moveToThread(this);  是因为人们在某些文章中看到并且使用而流传开来的。一次快速的网络搜索就能找到此类文章，所有这些文章中都有类似如下情形的段落：\n1. 继承QThread类\n2. 添加用来进行工作的信号和槽\n3. 测试代码，发现槽函数并没有在“正确的线程”中执行\n4. 谷歌一下，发现了moveToThread(this);  然后写上“看起来的确管用，所以我加上了这行代码”\n\n我认为，这些都源于第一步。QThread是被设计来作为一个操作系统线程的接口和控制点，而不是用来写入你想在线程里执行的代码的地方。我们（面向对象程序员）编写子类，是因为我们想扩充或者特化基类中的功能。我唯一想到的继承QThread类的合理原因，是添加QThread中不包含的功能，比如，也许可以提供一个内存指针来作为线程的堆栈，或者可以添加实时的接口和支持。用于下载文件、查询数据库，或者做任何其他操作的代码都不应该被加入到QThread的子类中；它应该被封装在它自己的对象中。\n\n通常，你可以简单地把类从继承QThread改为继承QObject，并且，也许得修改下类名。QThread类提供了start()信号，你可以将它连接到你需要的地方来进行初始化操作。为了让你的代码实际运行在新线程的作用域中，你需要实例化一个QThread对象，并且使用moveToThread()函数将你的对象分配给它。你同过moveToThread()来告诉Qt将你的代码运行在特定线程的作用域中，让线程接口和代码对象分离。如果需要的话，现在你可以将一个类的多个对象分配到一个线程中，或者将多个类的多个对象分配到一个线程。换句话说，将一个实例与一个线程绑定并不是必须的。\n\n我已经听到了许多关于编写Qt多线程代码时过于复杂的抱怨。原始的QThread类是抽象类，所以必须进行继承。但到了Qt4.4不再如此，因为QThread::run()有了一个默认的实现。在之前，唯一使用QThread的方式就是继承。有了线程关联性的支持，和信号槽连接机制的扩展，我们有了一种更为便利地使用线程的方式。我们喜欢便利，我们想使用它。不幸的是，我太晚地意识到之前迫使人们继承QThread的做法让新的方式更难普及。\n\n我也听到了一些抱怨，是关于没有同步更新范例程序和文档来向人们展示如何用最不令人头疼的方式便利地进行开发的。如今，我能引用的最佳的资源是[我数年前写的一篇博客](http://blog.qt.io/blog/2006/12/04/threading-without-the-headache/ \"我数年前写的一篇博客\")。\n\n免责声明：你所看到的上面的一切，当然都只是个人观点。我在这些类上面花费了很多精力，因此关于要如何使用和不要如何使用它们，我有着相当清晰的想法。\n\n译者注：\n最新的Qt帮助文档同时提供了建立QThread实例和继承QThread的两种多线程实现方式。根据文档描述和范例代码来看，若想在子线程中使用信号槽机制，应使用分别建立QThread和对象实例的方式；若只是单纯想用子线程运行阻塞式函数，则可继承QThread并重写QThread::run()函数。\n\n由于继承QThread后，必须在QThread::run()函数中显示调用QThread::exec()来提供对消息循环机制的支持，而QThread::exec()本身会阻塞调用方线程，因此对于需要在子线程中使用信号槽机制的情况，并不推荐使用继承QThread的形式，否则程序编写会较为复杂。\n\n扩展阅读：[QObject 之 Thread Affinity](http://blog.csdn.net/dbzhang800/article/details/6557272 \"QObject 之 Thread Affinity\")\n\n\n注：\n1. Thread Affinity：线程相关性\n2. “删除QThread对象前，确保线程内所有对象都没销毁”一句有误，应为“被销毁”，Qt文档中相关记录为“You must ensure that all objects created in a thread are deleted before you delete the QThread.”\n","slug":"Qt开发者关于QThread的咆哮","updated":1424006809000,"excerpt":"","_id":"q90zt77pcyyu1vva","comments":true,"layout":"post","photos":[],"link":""},{"title":"ASCII 字符表参考","date":1422970347000,"categories":["3m001amw3k070uq1"],"tags":["3gmqo90q56pdtth9"],"content":"<p>经常会用到的<code>ASCII</code>字符表，记录一下，免得每次都百度了。</p>\n<p><img src=\"9213b07eca8065387d4c671896dda144ad348213.jpg\" alt=\"\"></p>\n<p><img src=\"fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg\" alt=\"\"></p>\n","source":"_posts/2015-02-03-ASCII-字符表参考.md","raw":"title: ASCII 字符表参考\ndate: 2015-02-03 21:32:27\ncategories:\n- 杂类\ntags:\n- ASCII\n---\n经常会用到的`ASCII`字符表，记录一下，免得每次都百度了。\n\n![](9213b07eca8065387d4c671896dda144ad348213.jpg)\n\n![](fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg)\n","slug":"ASCII-字符表参考","updated":1422970575000,"excerpt":"","_id":"cpe4a5pngrq3mnvs","comments":true,"layout":"post","photos":[],"link":""},{"title":"Linux Shell 获取当前正在执行脚本的绝对路径","date":1422934710000,"categories":["pxz401it7n749u4v"],"tags":["05i6xsil6w4hdigz","69s3wq53hqbdg8by"],"content":"<p>不知道为什么，以前经常使用的一些Linux命令或者使用技巧经常忘记。虽说在汇丰软件一年半都有使用Linux命令，照常理这些是记得很清楚的，但是我就是依赖笔记。每次忘记了就拿出个笔记看一下，命令复制粘贴。<br>哎~现在那一年半积累写下的笔记，早已随我的离开而烟消云散。<code>涉及前公司的保密协议和商业风险，电子版笔记一律不准拷贝出公司电脑。</code>所以在以后的日子里，我会把我学到的东西在<code>One Night In Mok&#39;s Studio</code>。<br>这里记录回以前经常忘记的一条Linux命令：<br>转自： <a href=\"http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm\" title=\"http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm\" target=\"_blank\" rel=\"external\">http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"shebang\">#!/bin/bash</span></div><div class=\"line\">basepath=$(<span class=\"built_in\">cd</span> `dirname <span class=\"variable\">$0</span>` && <span class=\"built_in\">pwd</span>)</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$basepath</span></div></pre></td></tr></table></figure>\n\n<p>常见的一种误区，是使用pwd命令，该命令的作用是“print name of current/working directory”，这才是此命令的真实含义，当前的工作目录，这里没有任何意思说明，这个目录就是脚本存放的目录。所以，这是不对的。</p>\n<p>另一个误人子弟的答案，是$0，这个也是不对的，这个$0是Bash环境下的特殊变量，其真实含义是：</p>\n<blockquote>\n<p>Expands to the name of the shell or shell script. This is set at shell initialization. If bash is invoked with a file of commands, $0 is set to the name of that file. If bash is started with the -c option, then $0 is set to the first argument after the string to be executed, if one is present. Otherwise, it is set to the file name used to invoke bash, as given by argument zero.</p>\n</blockquote>\n<p>这个$0有可能是好几种值，跟调用的方式有关系：</p>\n<blockquote>\n<ol>\n<li>使用一个文件调用bash，那$0的值，是那个文件的名字（没说是绝对路径噢）</li>\n<li>使用-c选项启动bash的话，真正执行的命令会从一个字符串中读取，字符串后面如果还有别的参数的话，使用从$0开始的特殊变量引用（跟路径无关了）</li>\n<li>除此以外，$0会被设置成调用bash的那个文件的名字（没说是绝对路径）</li>\n</ol>\n</blockquote>\n<p>很靠近了，但是还是不对，最后，我们说一下上面的脚本是什么意思，从里往外看：</p>\n<blockquote>\n<p><strong>dirname $0</strong> 取得当前执行的脚本文件的父目录<br><strong>cd `dirname $0`</strong> 进入这个目录（切换当前工作目录）<br><strong>pwd</strong> 显示当前工作目录（cd执行后的）</p>\n</blockquote>\n<p>由此，我们获得了当前正在执行的脚本的存放路径。</p>\n","source":"_posts/2015-02-03-Linux-Shell-获取当前正在执行脚本的绝对路径.md","raw":"title: Linux Shell 获取当前正在执行脚本的绝对路径\ndate: 2015-02-03 11:38:30\ncategories:\n- Linux\ntags:\n- Shell\n- 获取运行路径\n---\n不知道为什么，以前经常使用的一些Linux命令或者使用技巧经常忘记。虽说在汇丰软件一年半都有使用Linux命令，照常理这些是记得很清楚的，但是我就是依赖笔记。每次忘记了就拿出个笔记看一下，命令复制粘贴。\n哎~现在那一年半积累写下的笔记，早已随我的离开而烟消云散。`涉及前公司的保密协议和商业风险，电子版笔记一律不准拷贝出公司电脑。`所以在以后的日子里，我会把我学到的东西在`One Night In Mok's Studio`。\n这里记录回以前经常忘记的一条Linux命令：\n转自： [http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm](http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm \"http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm\")\n\n```bash\n#!/bin/bash\nbasepath=$(cd `dirname $0` && pwd)\necho $basepath\n```\n常见的一种误区，是使用pwd命令，该命令的作用是“print name of current/working directory”，这才是此命令的真实含义，当前的工作目录，这里没有任何意思说明，这个目录就是脚本存放的目录。所以，这是不对的。\n\n另一个误人子弟的答案，是$0，这个也是不对的，这个$0是Bash环境下的特殊变量，其真实含义是：\n\n>Expands to the name of the shell or shell script. This is set at shell initialization. If bash is invoked with a file of commands, $0 is set to the name of that file. If bash is started with the -c option, then $0 is set to the first argument after the string to be executed, if one is present. Otherwise, it is set to the file name used to invoke bash, as given by argument zero.\n\n这个$0有可能是好几种值，跟调用的方式有关系：\n>1. 使用一个文件调用bash，那$0的值，是那个文件的名字（没说是绝对路径噢）\n>2. 使用-c选项启动bash的话，真正执行的命令会从一个字符串中读取，字符串后面如果还有别的参数的话，使用从$0开始的特殊变量引用（跟路径无关了）\n>3. 除此以外，$0会被设置成调用bash的那个文件的名字（没说是绝对路径）\n\n很靠近了，但是还是不对，最后，我们说一下上面的脚本是什么意思，从里往外看：\n>**dirname $0** 取得当前执行的脚本文件的父目录\n>**cd \\`dirname $0\\`** 进入这个目录（切换当前工作目录）\n>**pwd** 显示当前工作目录（cd执行后的）\n\n由此，我们获得了当前正在执行的脚本的存放路径。\n","slug":"Linux-Shell-获取当前正在执行脚本的绝对路径","updated":1422953055000,"excerpt":"","_id":"83t46ret8vk0ow9p","comments":true,"layout":"post","photos":[],"link":""},{"title":"One Night in Mok's Studio","date":1422962463000,"categories":["c61972kcum9igcta"],"tags":["ebcfmvsuj589j76q","r8v3abem3uo8ru9l"],"content":"<p>想了很久，实在是想不到应该帮我的个人网站起个怎样的名字。本人不喜欢高富帅或者屌丝的命名风格，也不喜欢不够特别的命名。思考良久，我想还是用回以前想到的一个名字吧 - <strong><code>One Night in Mok&#39;s Studio</code></strong>。许多灵感都是在不经意间来的，<strong><code>One Night in Mok&#39;s Studio</code></strong> 记录了我一次又一次不经意间萌发的灵感，没有多复杂的意思，这就是我以此命名的原因。<br><br>近日，我终于入手了<code>moky.cc</code>这个域名，这一买就是十年。说到买这个域名，其实我都拖了整整四年。四年前，我就计划要搞个人网站，但毕竟人都是有惰性的，当时也不断有其他事情干，于是就这样慢慢淡出了这个计划。直到最近，我才狠下心来好好做，虽然最近比以前还忙，但我总会留出一点时间去准备网站。<br><br>最近生活变化挺大的，以至于我特别想静下心去记录一下。很多东西，错过了也不值得留恋，有的东西却想好好地记录下来，以后再拿出来留念。2015年1月12日，这是我在我第一家公司<code>汇丰软件</code>工作的最后一天。那天我没有因此而特别高兴，因为我不仅面临新公司更大的挑战，而且要和我相处一年半的好同事好朋友告别了，我想我这辈子也不会忘记我在<code>汇丰软件</code>工作的这段深刻回忆。<br><img src=\"5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg\" alt=\"\"></p>\n<p><img src=\"5e22d182jw1eowhbmlgsxj20m80gotcg.jpg\" alt=\"\"></p>\n<p>我发现我有一个非常好的习惯，那就是记笔记。干我们程序猿这一行，用到的技术使用技巧和知识要点是非常多的，而我的记性是非常不好的，所以我就逐渐养成了记笔记的习惯。记得我在以前公司，用的就是<code>OneNote</code>，但是出于公司信息安全，这个1G多的笔记并没有随我离开公司，现在我的心血应该已经随电脑硬盘格式化了。所以以后的笔记，我只会记录在这个网站里，我希望这既可以方便自己也可以帮助别人。<br><br>来到新公司，对于我来说是一个新的起点，在接下来的日子里，用两个字概括 - <code>奋斗</code>。我一直都相信，念念不忘，必有回响。上一个念念不忘已经有所回响，下一个念念不忘会因为我的努力而有所回响么？</p>\n","source":"_posts/2015-02-03-One-night-in-Mok-s-Studio.md","raw":"title: \"One Night in Mok's Studio\"\ndate: 2015-02-03 19:21:03\ncategories:\n- 猿人日常\ntags:\n- 新起点\n- 奋斗\n---\n想了很久，实在是想不到应该帮我的个人网站起个怎样的名字。本人不喜欢高富帅或者屌丝的命名风格，也不喜欢不够特别的命名。思考良久，我想还是用回以前想到的一个名字吧 - **`One Night in Mok's Studio`**。许多灵感都是在不经意间来的，**`One Night in Mok's Studio`** 记录了我一次又一次不经意间萌发的灵感，没有多复杂的意思，这就是我以此命名的原因。<br>\n近日，我终于入手了`moky.cc`这个域名，这一买就是十年。说到买这个域名，其实我都拖了整整四年。四年前，我就计划要搞个人网站，但毕竟人都是有惰性的，当时也不断有其他事情干，于是就这样慢慢淡出了这个计划。直到最近，我才狠下心来好好做，虽然最近比以前还忙，但我总会留出一点时间去准备网站。<br>\n最近生活变化挺大的，以至于我特别想静下心去记录一下。很多东西，错过了也不值得留恋，有的东西却想好好地记录下来，以后再拿出来留念。2015年1月12日，这是我在我第一家公司`汇丰软件`工作的最后一天。那天我没有因此而特别高兴，因为我不仅面临新公司更大的挑战，而且要和我相处一年半的好同事好朋友告别了，我想我这辈子也不会忘记我在`汇丰软件`工作的这段深刻回忆。\n![](5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg)\n\n![](5e22d182jw1eowhbmlgsxj20m80gotcg.jpg)\n\n我发现我有一个非常好的习惯，那就是记笔记。干我们程序猿这一行，用到的技术使用技巧和知识要点是非常多的，而我的记性是非常不好的，所以我就逐渐养成了记笔记的习惯。记得我在以前公司，用的就是`OneNote`，但是出于公司信息安全，这个1G多的笔记并没有随我离开公司，现在我的心血应该已经随电脑硬盘格式化了。所以以后的笔记，我只会记录在这个网站里，我希望这既可以方便自己也可以帮助别人。<br>\n来到新公司，对于我来说是一个新的起点，在接下来的日子里，用两个字概括 - `奋斗`。我一直都相信，念念不忘，必有回响。上一个念念不忘已经有所回响，下一个念念不忘会因为我的努力而有所回响么？","slug":"One-night-in-Mok-s-Studio","updated":1422969561000,"excerpt":"","_id":"jqgtkotx1itxj908","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python正则表达式指南","date":1422943812000,"categories":["rvl3oybnnfrinfn1"],"tags":["2gj15pr1hjo2nk4i","0g4uroo7usmvywzw"],"content":"<blockquote>\n<p>本文介绍了Python对于正则表达式的支持，包括正则表达式基础以及Python正则表达式标准库的完整介绍及使用示例。本文的内容不包括如何编写高效的正则表达式、如何优化正则表达式，这些主题请查看其他教程。</p>\n<p>注意：本文基于Python2.4完成；如果看到不明白的词汇请记得百度谷歌或维基，whatever。</p>\n<p><code>尊重作者的劳动，转载请注明作者及原文地址</code>:<br><a href=\"http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html\" title=\"http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html</a></p>\n</blockquote>\n<h3 id=\"1-_正则表达式基础\">1. 正则表达式基础</h3>\n<h4 id=\"1-1-_简单介绍\">1.1. 简单介绍</h4>\n<p>正则表达式并不是Python的一部分。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。如果已经在其他语言里使用过正则表达式，只需要简单看一看就可以上手了。</p>\n<p>下图展示了使用正则表达式进行匹配的流程：<br><img src=\"687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png\" alt=\"\"></p>\n<p>正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。如果表达式中有量词或边界，这个过程会稍微有一些不同，但也是很好理解的，看下图中的示例以及自己多使用几次就能明白。</p>\n<p>下图列出了Python支持的正则表达式元字符和语法：<br><img src=\"687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png\" alt=\"\"></p>\n<h4 id=\"1-2-_数量词的贪婪模式与非贪婪模式\">1.2. 数量词的贪婪模式与非贪婪模式</h4>\n<p>正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式”ab*“如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab*?”，将找到”a”。</p>\n<h4 id=\"1-3-_反斜杠的困扰\">1.3. 反斜杠的困扰</h4>\n<p>与大多数编程语言相同，正则表达式里使用”\\”作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\\\\“：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r”\\“表示。同样，匹配一个数字的”\\d”可以写成r”\\d”。有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。</p>\n<h4 id=\"1-4-_匹配模式\">1.4. 匹配模式</h4>\n<p>正则表达式提供了一些可用的匹配模式，比如忽略大小写、多行匹配等，这部分内容将在Pattern类的工厂方法<code>re.compile(pattern[, flags])</code>中一起介绍。</p>\n<p><br></p>\n<h3 id=\"2-_re模块\">2. re模块</h3>\n<h4 id=\"2-1-_开始使用re\">2.1. 开始使用re</h4>\n<p>Python通过re模块提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># encoding: UTF-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将正则表达式编译成Pattern对象</span></div><div class=\"line\">pattern = re.compile(<span class=\"string\">r'hello'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None</span></div><div class=\"line\">match = pattern.match(<span class=\"string\">'hello world!'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> match:</div><div class=\"line\">    <span class=\"comment\"># 使用Match获得分组信息</span></div><div class=\"line\">    <span class=\"keyword\">print</span> match.group()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### 输出 ###</span></div><div class=\"line\"><span class=\"comment\"># hello</span></div></pre></td></tr></table></figure>\n\n<p><code>re.compile(strPattern[, flag]):</code><br>这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。 第二个参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如<code>re.I | re.M</code>另外，你也可以在regex字符串中指定模式，比如<code>re.compile(&#39;pattern&#39;, re.I | re.M)与re.compile(&#39;(?im)pattern&#39;)</code>是等价的。</p>\n<p>可选值有：</p>\n<ul>\n<li><code>re.I(re.IGNORECASE)</code>: 忽略大小写（括号内是完整写法，下同）</li>\n<li><code>M(MULTILINE)</code>: 多行模式，改变’^’和’$’的行为（参见上图）</li>\n<li><code>S(DOTALL)</code>: 点任意匹配模式，改变’.’的行为</li>\n<li><code>L(LOCALE)</code>: 使预定字符类 \\w \\W \\b \\B \\s \\S 取决于当前区域设定</li>\n<li><code>U(UNICODE)</code>: 使预定字符类 \\w \\W \\b \\B \\s \\S \\d \\D 取决于unicode定义的字符属性</li>\n<li><code>X(VERBOSE)</code>: 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。以下两个正则表达式是等价的：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = re.compile(<span class=\"string\">r\"\"\"\\d +  # the integral part</span></div><div class=\"line\">                   \\.    # the decimal point</div><div class=\"line\">                   \\d *  # some fractional digits\"\"\", re.X)</div><div class=\"line\">b = re.compile(<span class=\"string\">r\"\\d+\\.\\d*\"</span></div></pre></td></tr></table></figure>\n\n<p>re提供了众多模块方法用于完成正则表达式的功能。这些方法可以使用Pattern实例的相应方法替代，唯一的好处是少写一行re.compile()代码，但同时也无法复用编译后的Pattern对象。这些方法将在Pattern类的实例方法部分一起介绍。如上面这个例子可以简写为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">m = re.match(<span class=\"string\">r'hello'</span>, <span class=\"string\">'hello world!'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> m.group()</div></pre></td></tr></table></figure>\n\n<p>re模块还提供了一个方法escape(string)，用于将string中的正则表达式元字符如*/+/?等之前加上转义符再返回，在需要大量匹配元字符时有那么一点用。</p>\n<h4 id=\"2-2-_Match\">2.2. Match</h4>\n<p>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p>\n<p>属性：</p>\n<ul>\n<li><code>string</code>: 匹配时使用的文本。</li>\n<li><code>re</code>: 匹配时使用的Pattern对象。</li>\n<li><code>pos</code>: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</li>\n<li><code>endpos</code>: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</li>\n<li><code>lastindex</code>: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</li>\n<li><code>lastgroup</code>: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</li>\n</ul>\n<p>方法：</p>\n<ul>\n<li><code>group([group1, …])</code>: 获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。</li>\n<li><code>groups([default])</code>: 以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。</li>\n<li><code>groupdict([default])</code>: 返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</li>\n<li><code>start([group])</code>: 返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</li>\n<li><code>end([group])</code>: 返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</li>\n<li><code>span([group])</code>: 返回(start(group), end(group))。</li>\n<li><code>expand(template)</code>: 将匹配到的分组代入template中然后返回。template中可以使用\\id或\\g<id>、\\g<name>引用分组，但不能使用编号0。\\id与\\g<id>是等价的；但\\10将被认为是第10个分组，如果你想表达\\1之后是字符’0’，只能使用\\g<1>0。</1></id></name></id></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\">m = re.match(<span class=\"string\">r'(\\w+) (\\w+)(?P&lt;sign&gt;.*)'</span>, <span class=\"string\">'hello world!'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.string:\"</span>, m.string</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.re:\"</span>, m.re</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.pos:\"</span>, m.pos</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.endpos:\"</span>, m.endpos</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.lastindex:\"</span>, m.lastindex</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.lastgroup:\"</span>, m.lastgroup</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.group(1,2):\"</span>, m.group(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.groups():\"</span>, m.groups()</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.groupdict():\"</span>, m.groupdict()</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.start(2):\"</span>, m.start(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.end(2):\"</span>, m.end(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.span(2):\"</span>, m.span(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">r\"m.expand(r'\\2 \\1\\3'):\"</span>, m.expand(<span class=\"string\">r'\\2 \\1\\3'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># m.string: hello world!</span></div><div class=\"line\"><span class=\"comment\"># m.re: &lt;_sre.SRE_Pattern object at 0x016E1A38&gt;</span></div><div class=\"line\"><span class=\"comment\"># m.pos: 0</span></div><div class=\"line\"><span class=\"comment\"># m.endpos: 12</span></div><div class=\"line\"><span class=\"comment\"># m.lastindex: 3</span></div><div class=\"line\"><span class=\"comment\"># m.lastgroup: sign</span></div><div class=\"line\"><span class=\"comment\"># m.group(1,2): ('hello', 'world')</span></div><div class=\"line\"><span class=\"comment\"># m.groups(): ('hello', 'world', '!')</span></div><div class=\"line\"><span class=\"comment\"># m.groupdict(): {'sign': '!'}</span></div><div class=\"line\"><span class=\"comment\"># m.start(2): 6</span></div><div class=\"line\"><span class=\"comment\"># m.end(2): 11</span></div><div class=\"line\"><span class=\"comment\"># m.span(2): (6, 11)</span></div><div class=\"line\"><span class=\"comment\"># m.expand(r'\\2 \\1\\3'): world hello!</span></div></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-_Pattern\">2.3. Pattern</h4>\n<p>Pattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。<br>Pattern不能直接实例化，必须使用re.compile()进行构造。<br>Pattern提供了几个可读属性用于获取表达式的相关信息：</p>\n<ul>\n<li><code>pattern</code>: 编译时用的表达式字符串。</li>\n<li><code>flags</code>: 编译时用的匹配模式。数字形式。</li>\n<li><code>groups</code>: 表达式中分组的数量。</li>\n<li><code>groupindex</code>: 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\">p = re.compile(<span class=\"string\">r'(\\w+) (\\w+)(?P&lt;sign&gt;.*)'</span>, re.DOTALL)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"p.pattern:\"</span>, p.pattern</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"p.flags:\"</span>, p.flags</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"p.groups:\"</span>, p.groups</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"p.groupindex:\"</span>, p.groupindex</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># p.pattern: (\\w+) (\\w+)(?P&lt;sign&gt;.*)</span></div><div class=\"line\"><span class=\"comment\"># p.flags: 16</span></div><div class=\"line\"><span class=\"comment\"># p.groups: 3</span></div><div class=\"line\"><span class=\"comment\"># p.groupindex: {'sign': 3}</span></div></pre></td></tr></table></figure>\n\n<p>实例方法[ | re模块方法]：</p>\n<ul>\n<li><code>match(string[, pos[, endpos]]) | re.match(pattern, string[, flags])</code>:<br><br>这个方法将从string的pos下标处起尝试匹配pattern；如果pattern结束时仍可匹配，则返回一个Match对象；如果匹配过程中pattern无法匹配，或者匹配未结束就已到达endpos，则返回None。<br><br>pos和endpos的默认值分别为0和len(string)；re.match()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。<br><br>注意：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符’$’。<br><br>示例参见2.1小节。</li>\n<li><code>search(string[, pos[, endpos]]) | re.search(pattern, string[, flags])</code>:<br><br>这个方法用于查找字符串中可以匹配成功的子串。从string的pos下标处起尝试匹配pattern，如果pattern结束时仍可匹配，则返回一个Match对象；若无法匹配，则将pos加1后重新尝试匹配；直到pos=endpos时仍无法匹配则返回None。<br><br>pos和endpos的默认值分别为0和len(string))；re.search()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># encoding: UTF-8 </span></div><div class=\"line\"><span class=\"keyword\">import</span> re </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将正则表达式编译成Pattern对象 </span></div><div class=\"line\">pattern = re.compile(<span class=\"string\">r'world'</span>) </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 使用search()查找匹配的子串，不存在能匹配的子串时将返回None </span></div><div class=\"line\"><span class=\"comment\"># 这个例子中使用match()无法成功匹配 </span></div><div class=\"line\">match = pattern.search(<span class=\"string\">'hello world!'</span>) </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> match: </div><div class=\"line\">    <span class=\"comment\"># 使用Match获得分组信息 </span></div><div class=\"line\">    <span class=\"keyword\">print</span> match.group() </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### 输出 ### </span></div><div class=\"line\"><span class=\"comment\"># world</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>split(string[, maxsplit]) | re.split(pattern, string[, maxsplit])</code>:<br><br>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> p.split(<span class=\"string\">'one1two2three3four4'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># ['one', 'two', 'three', 'four', '']</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags])</code>:<br><br>搜索string，以列表形式返回全部能匹配的子串。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> p.findall(<span class=\"string\">'one1two2three3four4'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># ['1', '2', '3', '4']</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags])</code>:<br><br>搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> p.finditer(<span class=\"string\">'one1two2three3four4'</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> m.group(),</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># 1 2 3 4</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>sub(repl, string[, count]) | re.sub(pattern, repl, string[, count])</code>:<br><br>使用repl替换string中每一个匹配的子串后返回替换后的字符串。<br><br>当repl是一个字符串时，可以使用\\id或\\g<id>、\\g<name>引用分组，但不能使用编号0。<br><br>当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。<br><br>count用于指定最多替换次数，不指定时全部替换。</name></id></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'(\\w+) (\\w+)'</span>)</div><div class=\"line\">s = <span class=\"string\">'i say, hello world!'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> p.sub(<span class=\"string\">r'\\2 \\1'</span>, s)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(m)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> m.group(<span class=\"number\">1</span>).title() + <span class=\"string\">' '</span> + m.group(<span class=\"number\">2</span>).title()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> p.sub(func, s)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># say i, world hello!</span></div><div class=\"line\"><span class=\"comment\"># I Say, Hello World!</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>subn(repl, string[, count]) |re.sub(pattern, repl, string[, count])</code>:<br><br>返回 (sub(repl, string[, count]), 替换次数)。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'(\\w+) (\\w+)'</span>)</div><div class=\"line\">s = <span class=\"string\">'i say, hello world!'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> p.subn(<span class=\"string\">r'\\2 \\1'</span>, s)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(m)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> m.group(<span class=\"number\">1</span>).title() + <span class=\"string\">' '</span> + m.group(<span class=\"number\">2</span>).title()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> p.subn(func, s)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># ('say i, world hello!', 2)</span></div><div class=\"line\"><span class=\"comment\"># ('I Say, Hello World!', 2)</span></div></pre></td></tr></table></figure>\n\n<p>以上就是Python对于正则表达式的支持。熟练掌握正则表达式是每一个程序员必须具备的技能，这年头没有不与字符串打交道的程序了。笔者也处于初级阶段，与君共勉，^_^</p>\n<p>另外，图中的特殊构造部分没有举出例子，用到这些的正则表达式是具有一定难度的。有兴趣可以思考一下，如何匹配不是以abc开头的单词，^_^</p>\n<p>全文结束</p>\n","source":"_posts/2015-02-03-Python正则表达式指南.md","raw":"title: Python正则表达式指南\ndate: 2015-02-03 14:10:12\ncategories:\n- Python\ntags:\n- Python\n- 正则表达式\n---\n>本文介绍了Python对于正则表达式的支持，包括正则表达式基础以及Python正则表达式标准库的完整介绍及使用示例。本文的内容不包括如何编写高效的正则表达式、如何优化正则表达式，这些主题请查看其他教程。\n>\n>注意：本文基于Python2.4完成；如果看到不明白的词汇请记得百度谷歌或维基，whatever。\n\n>`尊重作者的劳动，转载请注明作者及原文地址`:\n>[http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html](http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html \"http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html\")\n\n### 1. 正则表达式基础\n#### 1.1. 简单介绍\n正则表达式并不是Python的一部分。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。如果已经在其他语言里使用过正则表达式，只需要简单看一看就可以上手了。\n\n下图展示了使用正则表达式进行匹配的流程：\n![](687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png)\n\n正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。如果表达式中有量词或边界，这个过程会稍微有一些不同，但也是很好理解的，看下图中的示例以及自己多使用几次就能明白。\n\n下图列出了Python支持的正则表达式元字符和语法：\n![](687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png)\n\n#### 1.2. 数量词的贪婪模式与非贪婪模式\n正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式\"ab\\*\"如果用于查找\"abbbc\"，将找到\"abbb\"。而如果使用非贪婪的数量词\"ab\\*?\"，将找到\"a\"。\n\n#### 1.3. 反斜杠的困扰\n与大多数编程语言相同，正则表达式里使用\"\\\"作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符\"\\\"，那么使用编程语言表示的正则表达式里将需要4个反斜杠\"\\\\\\\\\"：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r\"\\\\\"表示。同样，匹配一个数字的\"\\\\d\"可以写成r\"\\d\"。有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。\n\n#### 1.4. 匹配模式\n正则表达式提供了一些可用的匹配模式，比如忽略大小写、多行匹配等，这部分内容将在Pattern类的工厂方法`re.compile(pattern[, flags])`中一起介绍。\n\n<br>\n### 2. re模块\n#### 2.1. 开始使用re\nPython通过re模块提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。\n```python\n# encoding: UTF-8\nimport re\n \n# 将正则表达式编译成Pattern对象\npattern = re.compile(r'hello')\n \n# 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None\nmatch = pattern.match('hello world!')\n \nif match:\n    # 使用Match获得分组信息\n    print match.group()\n \n### 输出 ###\n# hello\n```\n`re.compile(strPattern[, flag]):`\n这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。 第二个参数flag是匹配模式，取值可以使用按位或运算符'|'表示同时生效，比如`re.I | re.M`另外，你也可以在regex字符串中指定模式，比如`re.compile('pattern', re.I | re.M)与re.compile('(?im)pattern')`是等价的。\n\n可选值有：\n- `re.I(re.IGNORECASE)`: 忽略大小写（括号内是完整写法，下同）\n- `M(MULTILINE)`: 多行模式，改变'^'和'$'的行为（参见上图）\n- `S(DOTALL)`: 点任意匹配模式，改变'.'的行为\n- `L(LOCALE)`: 使预定字符类 \\w \\W \\b \\B \\s \\S 取决于当前区域设定\n- `U(UNICODE)`: 使预定字符类 \\w \\W \\b \\B \\s \\S \\d \\D 取决于unicode定义的字符属性\n- `X(VERBOSE)`: 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。以下两个正则表达式是等价的：\n```python\na = re.compile(r\"\"\"\\d +  # the integral part\n                   \\.    # the decimal point\n                   \\d *  # some fractional digits\"\"\", re.X)\nb = re.compile(r\"\\d+\\.\\d*\"\n```\n\nre提供了众多模块方法用于完成正则表达式的功能。这些方法可以使用Pattern实例的相应方法替代，唯一的好处是少写一行re.compile()代码，但同时也无法复用编译后的Pattern对象。这些方法将在Pattern类的实例方法部分一起介绍。如上面这个例子可以简写为：\n```python\nm = re.match(r'hello', 'hello world!')\nprint m.group()\n```\n\nre模块还提供了一个方法escape(string)，用于将string中的正则表达式元字符如*/+/?等之前加上转义符再返回，在需要大量匹配元字符时有那么一点用。\n\n#### 2.2. Match\nMatch对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。\n\n属性：\n- `string`: 匹配时使用的文本。\n- `re`: 匹配时使用的Pattern对象。\n- `pos`: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。\n- `endpos`: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。\n- `lastindex`: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。\n- `lastgroup`: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。\n\n方法：\n- `group([group1, …])`: 获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。\n- `groups([default])`: 以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。\n- `groupdict([default])`: 返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。\n- `start([group])`: 返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。\n- `end([group])`: 返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。\n- `span([group])`: 返回(start(group), end(group))。\n- `expand(template)`: 将匹配到的分组代入template中然后返回。template中可以使用\\id或\\g<id>、\\g<name>引用分组，但不能使用编号0。\\id与\\g<id>是等价的；但\\10将被认为是第10个分组，如果你想表达\\1之后是字符'0'，只能使用\\g<1>0。\n```python\nimport re\nm = re.match(r'(\\w+) (\\w+)(?P<sign>.*)', 'hello world!')\n \nprint \"m.string:\", m.string\nprint \"m.re:\", m.re\nprint \"m.pos:\", m.pos\nprint \"m.endpos:\", m.endpos\nprint \"m.lastindex:\", m.lastindex\nprint \"m.lastgroup:\", m.lastgroup\n \nprint \"m.group(1,2):\", m.group(1, 2)\nprint \"m.groups():\", m.groups()\nprint \"m.groupdict():\", m.groupdict()\nprint \"m.start(2):\", m.start(2)\nprint \"m.end(2):\", m.end(2)\nprint \"m.span(2):\", m.span(2)\nprint r\"m.expand(r'\\2 \\1\\3'):\", m.expand(r'\\2 \\1\\3')\n \n### output ###\n# m.string: hello world!\n# m.re: <_sre.SRE_Pattern object at 0x016E1A38>\n# m.pos: 0\n# m.endpos: 12\n# m.lastindex: 3\n# m.lastgroup: sign\n# m.group(1,2): ('hello', 'world')\n# m.groups(): ('hello', 'world', '!')\n# m.groupdict(): {'sign': '!'}\n# m.start(2): 6\n# m.end(2): 11\n# m.span(2): (6, 11)\n# m.expand(r'\\2 \\1\\3'): world hello!\n```\n\n#### 2.3. Pattern\nPattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。\nPattern不能直接实例化，必须使用re.compile()进行构造。\nPattern提供了几个可读属性用于获取表达式的相关信息：\n- `pattern`: 编译时用的表达式字符串。\n- `flags`: 编译时用的匹配模式。数字形式。\n- `groups`: 表达式中分组的数量。\n- `groupindex`: 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。\n```python\nimport re\np = re.compile(r'(\\w+) (\\w+)(?P<sign>.*)', re.DOTALL)\n \nprint \"p.pattern:\", p.pattern\nprint \"p.flags:\", p.flags\nprint \"p.groups:\", p.groups\nprint \"p.groupindex:\", p.groupindex\n \n### output ###\n# p.pattern: (\\w+) (\\w+)(?P<sign>.*)\n# p.flags: 16\n# p.groups: 3\n# p.groupindex: {'sign': 3}\n```\n实例方法[ | re模块方法]：\n\n- `match(string[, pos[, endpos]]) | re.match(pattern, string[, flags])`:\n<br>这个方法将从string的pos下标处起尝试匹配pattern；如果pattern结束时仍可匹配，则返回一个Match对象；如果匹配过程中pattern无法匹配，或者匹配未结束就已到达endpos，则返回None。\n<br>pos和endpos的默认值分别为0和len(string)；re.match()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。\n<br>注意：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符'$'。\n<br>示例参见2.1小节。\n- `search(string[, pos[, endpos]]) | re.search(pattern, string[, flags])`:\n<br>这个方法用于查找字符串中可以匹配成功的子串。从string的pos下标处起尝试匹配pattern，如果pattern结束时仍可匹配，则返回一个Match对象；若无法匹配，则将pos加1后重新尝试匹配；直到pos=endpos时仍无法匹配则返回None。\n<br>pos和endpos的默认值分别为0和len(string))；re.search()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。\n```python\n# encoding: UTF-8 \nimport re \n \n# 将正则表达式编译成Pattern对象 \npattern = re.compile(r'world') \n \n# 使用search()查找匹配的子串，不存在能匹配的子串时将返回None \n# 这个例子中使用match()无法成功匹配 \nmatch = pattern.search('hello world!') \n \nif match: \n    # 使用Match获得分组信息 \n    print match.group() \n \n### 输出 ### \n# world\n```\n- `split(string[, maxsplit]) | re.split(pattern, string[, maxsplit])`:\n<br>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。\n```python\nimport re\n \np = re.compile(r'\\d+')\nprint p.split('one1two2three3four4')\n \n### output ###\n# ['one', 'two', 'three', 'four', '']\n```\n- `findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags])`:\n<br>搜索string，以列表形式返回全部能匹配的子串。\n```python\nimport re\n \np = re.compile(r'\\d+')\nprint p.findall('one1two2three3four4')\n \n### output ###\n# ['1', '2', '3', '4']\n```\n- `finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags])`:\n<br>搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。\n```python\nimport re\n \np = re.compile(r'\\d+')\nfor m in p.finditer('one1two2three3four4'):\n    print m.group(),\n \n### output ###\n# 1 2 3 4\n```\n- `sub(repl, string[, count]) | re.sub(pattern, repl, string[, count])`:\n<br>使用repl替换string中每一个匹配的子串后返回替换后的字符串。\n<br>当repl是一个字符串时，可以使用\\id或\\g<id>、\\g<name>引用分组，但不能使用编号0。\n<br>当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。\n<br>count用于指定最多替换次数，不指定时全部替换。\n```python\nimport re\n \np = re.compile(r'(\\w+) (\\w+)')\ns = 'i say, hello world!'\n \nprint p.sub(r'\\2 \\1', s)\n \ndef func(m):\n    return m.group(1).title() + ' ' + m.group(2).title()\n \nprint p.sub(func, s)\n \n### output ###\n# say i, world hello!\n# I Say, Hello World!\n```\n- `subn(repl, string[, count]) |re.sub(pattern, repl, string[, count])`:\n<br>返回 (sub(repl, string[, count]), 替换次数)。\n```python\nimport re\n \np = re.compile(r'(\\w+) (\\w+)')\ns = 'i say, hello world!'\n \nprint p.subn(r'\\2 \\1', s)\n \ndef func(m):\n    return m.group(1).title() + ' ' + m.group(2).title()\n \nprint p.subn(func, s)\n \n### output ###\n# ('say i, world hello!', 2)\n# ('I Say, Hello World!', 2)\n```\n以上就是Python对于正则表达式的支持。熟练掌握正则表达式是每一个程序员必须具备的技能，这年头没有不与字符串打交道的程序了。笔者也处于初级阶段，与君共勉，^_^\n\n另外，图中的特殊构造部分没有举出例子，用到这些的正则表达式是具有一定难度的。有兴趣可以思考一下，如何匹配不是以abc开头的单词，^_^\n\n全文结束\n","slug":"Python正则表达式指南","updated":1423202091000,"excerpt":"","_id":"dgo03wo8kud7ck86","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python 中if  _name _ == ' _main _'：用法解析","date":1423031926000,"categories":["rvl3oybnnfrinfn1"],"tags":["2gj15pr1hjo2nk4i","3j1nxmfvxnx6atyb"],"content":"<blockquote>\n<p>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。<br><a href=\"http://keliang.blog.51cto.com/3359430/649318\" title=\"http://keliang.blog.51cto.com/3359430/649318\" target=\"_blank\" rel=\"external\">http://keliang.blog.51cto.com/3359430/649318</a></p>\n</blockquote>\n<p>想必很多初次接触python的同学都会见到这样一个语句，if __name__ == “__main__“：</p>\n<p>那么这个语句到底是做什么用的呢？在解释之前，首先要声明的是，不管你是多么小白，你一定要知道的是：</p>\n<ol>\n<li>python文件的后缀为.py；</li>\n<li>py文件既可以用来直接执行，就像一个小程序一样，也可以用来作为模块被导入（比如360安全卫士，就是依靠一个个功能模块来实现的，好比360安全卫士本身框架是一个桌面，而上面的图标就是快捷方式，这些快捷方式所指向的就是这一个个功能模块）</li>\n<li>在python中导入模块一般使用的是import</li>\n</ol>\n<p>好了，在确定知道以上几点之后，就可以开始解释if __name__ == “__main__“：这个语句了。</p>\n<p>首先解释一下if，顾名思义，if就是如果的意思，在句子开始处加上if，就说明，这个句子是一个条件语句。学习if语句的使用是很简单的，当然想要真正灵活运用还需大量的实践。</p>\n<p>接着是 __name__，__name__作为模块的内置属性，简单点说呢，就是.py文件的调用方式。</p>\n<p>最后是__main__，刚才我也提过，.py文件有两种使用方式：作为模块被调用和直接使用。如果它等于”__main__“就表示是直接执行。</p>\n<p>总结：在if __name__ == “__main__“：之后的语句作为模块被调用的时候，语句之后的代码不执行；直接使用的时候，语句之后的代码执行。通常，此语句用于模块测试中使用。</p>\n","source":"_posts/2015-02-04-Python-中-if-name-main-用法解析.md","raw":"title: \"Python 中if \\__name\\__ == '\\__main\\__'：用法解析\"\ndate: 2015-02-04 14:38:46\ncategories:\n- Python\ntags:\n- Python\n- main\n---\n\n>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n>[http://keliang.blog.51cto.com/3359430/649318](http://keliang.blog.51cto.com/3359430/649318 \"http://keliang.blog.51cto.com/3359430/649318\")\n\n想必很多初次接触python的同学都会见到这样一个语句，if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"：\n\n那么这个语句到底是做什么用的呢？在解释之前，首先要声明的是，不管你是多么小白，你一定要知道的是：\n\n1. python文件的后缀为.py；\n2. py文件既可以用来直接执行，就像一个小程序一样，也可以用来作为模块被导入（比如360安全卫士，就是依靠一个个功能模块来实现的，好比360安全卫士本身框架是一个桌面，而上面的图标就是快捷方式，这些快捷方式所指向的就是这一个个功能模块）\n3. 在python中导入模块一般使用的是import\n\n好了，在确定知道以上几点之后，就可以开始解释if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"：这个语句了。\n\n首先解释一下if，顾名思义，if就是如果的意思，在句子开始处加上if，就说明，这个句子是一个条件语句。学习if语句的使用是很简单的，当然想要真正灵活运用还需大量的实践。\n\n接着是 \\_\\_name\\_\\_，\\_\\_name\\_\\_作为模块的内置属性，简单点说呢，就是.py文件的调用方式。\n\n最后是\\_\\_main\\_\\_，刚才我也提过，.py文件有两种使用方式：作为模块被调用和直接使用。如果它等于\"\\_\\_main\\_\\_\"就表示是直接执行。\n\n总结：在if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"：之后的语句作为模块被调用的时候，语句之后的代码不执行；直接使用的时候，语句之后的代码执行。通常，此语句用于模块测试中使用。\n","slug":"Python-中-if-name-main-用法解析","updated":1423829722000,"excerpt":"","_id":"im8thm5mpmxwahta","comments":true,"layout":"post","photos":[],"link":""},{"title":"PyQt 窗口风格","date":1423135646000,"categories":["qjrjijfq46k5bzcm"],"tags":["k47zffh4cn3ah628","3tmym37yxspi57sd"],"content":"<h5 id=\"PyQt窗口风格使用setWindowFlags(Qt-WindowFlags)函数设置，具体参数如下:\">PyQt窗口风格使用<code>setWindowFlags(Qt.WindowFlags)</code>函数设置，具体参数如下:</h5>\n<h6 id=\"工具/原料\">工具/原料</h6>\n<p><code>Python</code><br><code>PyQt</code></p>\n<h6 id=\"方法/步骤\">方法/步骤</h6>\n<ol>\n<li><p>PyQt基本窗口类型有如下类型：</p>\n<blockquote>\n<p>Qt.Qt.Widget#插件默认窗口，有最小化、最大化、关闭按钮<br>Qt.Qt.Window#普通窗口，有最小化、最大化、关闭按钮<br>Qt.Qt.Dialog#对话框窗口，有问号和关闭按钮<br>Qt.Qt.Popup#弹出窗口，窗口无边框化<br>Qt.Qt.ToolTip#提示窗口，窗口无边框化，无任务栏窗口<br>Qt.Qt.SplashScreen#飞溅屏幕，窗口无边框化，无任务栏窗口<br>Qt.Qt.SubWindow#子窗口，窗口无按钮但有标题栏</p>\n</blockquote>\n</li>\n<li><p>自定义外观的顶层窗口标志：</p>\n<blockquote>\n<p>Qt.Qt.MSWindowsFixedSizeDialogHint#窗口无法调整大小<br>Qt.Qt.FramelessWindowHint#窗口无边框化<br>Qt.Qt.CustomizeWindowHint#有边框但无标题栏和按钮，不能移动和拖动<br>Qt.Qt.WindowTitleHint#添加标题栏和一个关闭按钮<br>Qt.Qt.WindowSystemMenuHint#添加系统目录和一个关闭按钮<br>Qt.Qt.WindowMaximizeButtonHint#激活最大化和关闭按钮，禁止最小化按钮<br>Qt.Qt.WindowMinimizeButtonHint#激活最小化和关闭按钮，禁止最大化按钮<br>Qt.Qt.WindowMinMaxButtonsHint#激活最小化、最大化和关闭按钮，#相当于Qt.Qt.WindowMaximizeButtonHint|Qt.Qt.WindowMinimizeButtonHint<br>Qt.Qt.WindowCloseButtonHint#添加一个关闭按钮<br>Qt.Qt.WindowContextHelpButtonHint#添加问号和关闭按钮，像对话框一样<br>Qt.Qt.WindowStaysOnTopHint#窗口始终处于顶层位置<br>Qt.Qt.WindowStaysOnBottomHint#窗口始终处于底层位置</p>\n</blockquote>\n</li>\n<li><p>使用方法：<br>在窗口类<code>__init__</code>函数中使用<code>self.setWindowFlags()</code>函数，如：</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> PyQt4 <span class=\"keyword\">import</span> QtCore, QtGui, Qtfrom UI <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainWindow</span><span class=\"params\">(QtGui.QMainWindow)</span>:</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,parent=None)</span>:</span></div><div class=\"line\">        QtGui.QWidget.__init__(self,parent)</div><div class=\"line\">        self.ui=Ui_Form() <span class=\"comment\"># Ui_Form来源于UI.py，参见系列第一课</span></div><div class=\"line\">        self.ui.setupUi(self)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># 设置普通窗口样式</span></div><div class=\"line\">        self.setWindowFlags(Qt.Qt.Window)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    <span class=\"keyword\">import</span> sys</div><div class=\"line\">    app = QtGui.QApplication(sys.argv)</div><div class=\"line\">    myapp=MainWindow()</div><div class=\"line\">    myapp.show()</div><div class=\"line\">    app.exec_()</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-02-05-PyQt-窗口风格.md","raw":"title: PyQt 窗口风格\ndate: 2015-02-05 19:27:26\ncategories:\n- PyQt\ntags:\n- PyQt\n- 窗口风格\n---\n##### PyQt窗口风格使用`setWindowFlags(Qt.WindowFlags)`函数设置，具体参数如下: #####\n\n###### 工具/原料\n`Python`\n`PyQt`\n\n###### 方法/步骤\n\n1. PyQt基本窗口类型有如下类型：\n>Qt.Qt.Widget#插件默认窗口，有最小化、最大化、关闭按钮\n>Qt.Qt.Window#普通窗口，有最小化、最大化、关闭按钮\n>Qt.Qt.Dialog#对话框窗口，有问号和关闭按钮\n>Qt.Qt.Popup#弹出窗口，窗口无边框化\n>Qt.Qt.ToolTip#提示窗口，窗口无边框化，无任务栏窗口\n>Qt.Qt.SplashScreen#飞溅屏幕，窗口无边框化，无任务栏窗口\n>Qt.Qt.SubWindow#子窗口，窗口无按钮但有标题栏\n\n2. 自定义外观的顶层窗口标志：\n>Qt.Qt.MSWindowsFixedSizeDialogHint#窗口无法调整大小\n>Qt.Qt.FramelessWindowHint#窗口无边框化\n>Qt.Qt.CustomizeWindowHint#有边框但无标题栏和按钮，不能移动和拖动\n>Qt.Qt.WindowTitleHint#添加标题栏和一个关闭按钮\n>Qt.Qt.WindowSystemMenuHint#添加系统目录和一个关闭按钮\n>Qt.Qt.WindowMaximizeButtonHint#激活最大化和关闭按钮，禁止最小化按钮\n>Qt.Qt.WindowMinimizeButtonHint#激活最小化和关闭按钮，禁止最大化按钮\n>Qt.Qt.WindowMinMaxButtonsHint#激活最小化、最大化和关闭按钮，#相当于Qt.Qt.WindowMaximizeButtonHint|Qt.Qt.WindowMinimizeButtonHint\n>Qt.Qt.WindowCloseButtonHint#添加一个关闭按钮\n>Qt.Qt.WindowContextHelpButtonHint#添加问号和关闭按钮，像对话框一样\n>Qt.Qt.WindowStaysOnTopHint#窗口始终处于顶层位置\n>Qt.Qt.WindowStaysOnBottomHint#窗口始终处于底层位置\n\n3. 使用方法：\n在窗口类`__init__`函数中使用`self.setWindowFlags()`函数，如：\n```python\n# -*- coding: utf-8 -*-\nfrom PyQt4 import QtCore, QtGui, Qtfrom UI import *\nclass MainWindow(QtGui.QMainWindow): \n    def __init__(self,parent=None):\n        QtGui.QWidget.__init__(self,parent)\n        self.ui=Ui_Form() # Ui_Form来源于UI.py，参见系列第一课\n        self.ui.setupUi(self)\n\n        # 设置普通窗口样式\n        self.setWindowFlags(Qt.Qt.Window)\n\nif __name__ == \"__main__\":\n    import sys\n    app = QtGui.QApplication(sys.argv)\n    myapp=MainWindow()\n    myapp.show()\n    app.exec_()\n```\n","slug":"PyQt-窗口风格","updated":1423136571000,"excerpt":"","_id":"iojqbtoeapyouq6r","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python assert 用法","date":1423199709000,"categories":["rvl3oybnnfrinfn1"],"tags":["2gj15pr1hjo2nk4i","0u9nhcekonxoma2z"],"content":"<ol>\n<li><code>assert</code>语句用来声明某个条件是真的。</li>\n<li>如果你非常确信某个你使用的列表中至少有一个元素，而你想要检验这一点，并且在它非真的时候引发一个错误，那么<code>assert</code>语句是应用在这种情形下的理想语句。</li>\n<li>当<code>assert</code>语句失败的时候，会引发一<code>AssertionError</code>。</li>\n</ol>\n<p><strong>测试程序：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">mylist = [<span class=\"string\">'item'</span>]</div><div class=\"line\"><span class=\"keyword\">assert</span> len(mylist) &gt;= <span class=\"number\">1</span></div><div class=\"line\">mylist.pop()</div><div class=\"line\"><span class=\"string\">'item'</span></div><div class=\"line\"><span class=\"keyword\">assert</span> len(mylist) &gt;= <span class=\"number\">1</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">AssertionError</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-02-06-Python-assert-用法.md","raw":"title: Python assert 用法\ndate: 2015-02-06 13:15:09\ncategories:\n- Python\ntags:\n- Python\n- assert\n---\n1. `assert`语句用来声明某个条件是真的。\n2. 如果你非常确信某个你使用的列表中至少有一个元素，而你想要检验这一点，并且在它非真的时候引发一个错误，那么`assert`语句是应用在这种情形下的理想语句。\n3. 当`assert`语句失败的时候，会引发一`AssertionError`。\n\n**测试程序：**\n```python\nmylist = ['item']\nassert len(mylist) >= 1\nmylist.pop()\n'item'\nassert len(mylist) >= 1\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAssertionError\n```\n","slug":"Python-assert-用法","updated":1423199907000,"excerpt":"","_id":"a4b50agl6ahqqw36","comments":true,"layout":"post","photos":[],"link":""},{"title":"为上云而备案","date":1423741332000,"categories":["c61972kcum9igcta"],"tags":["vrr51ag39jkw7qmn","m9zlwtzw04pkqjrw"],"content":"<p>这几天在研究网站<code>SEO</code>和加载速度优化，说到<code>SEO</code>，<code>Hexo</code>有个<code>sitemap</code>的生成器，不过有点蛋疼，<code>百度</code>和<code>谷歌</code>识别的<code>sitemap</code>不太一样，这样就需要生成两个<code>sitemap</code>，还好两个搜索引擎的站长工具后台都非常易用。<br>虽说这个网站是纯静态的网站，但是也是寄外国服务器篱下<code>我这种穷缺没钱买网站服务器只能用Github静态页服务器</code>，加上部分<code>CSS</code>和<code>JS</code>体积比较大，第一次访问网站的确需要点时间。然后我就想到了百度云服务，百度云可以在你设定的时间间隔将你的网站页面缓存到百度云服务器，而百度云服务器采用分布式架构，至少在国内拥有大量云节点，这保证了网站的快速加载。所以，对于我这种纯静态的网站来说，使用云加速是优势。<br>但是，百度云有个蛋疼的规定，就是必须获得工信部网站备案的域名才可以使用国内云服务器<code>未备案网站会分配到海外服务器</code>，而且未备案的网站似乎也不可以使用一些功能。所以为了体验云服务，还是乖乖备案吧。记得高中建站的时候就玩过一次备案<code>到现在都还记得当时的域名-mokyue.com，挺喜欢这个域名的，就是有点长。后来没钱就没继续搞啦，汗~</code>，以前备案没有那么严格，也不记得当时是怎么通过的了。这次备案没有自己去撞板，花了几十块让<code>创宇云</code>帮我备案，网站关了大概一周时间，备案就搞定了<code>果然是有钱使得鬼推磨</code>，anyway，终于可以上云了。</p>\n","source":"_posts/2015-02-12-为上云而备案.md","raw":"title: 为上云而备案\ndate: 2015-02-12 19:42:12\ncategories:\n- 猿人日常\ntags:\n- 百度云\n- 网站备案\n---\n这几天在研究网站`SEO`和加载速度优化，说到`SEO`，`Hexo`有个`sitemap`的生成器，不过有点蛋疼，`百度`和`谷歌`识别的`sitemap`不太一样，这样就需要生成两个`sitemap`，还好两个搜索引擎的站长工具后台都非常易用。\n虽说这个网站是纯静态的网站，但是也是寄外国服务器篱下`我这种穷缺没钱买网站服务器只能用Github静态页服务器`，加上部分`CSS`和`JS`体积比较大，第一次访问网站的确需要点时间。然后我就想到了百度云服务，百度云可以在你设定的时间间隔将你的网站页面缓存到百度云服务器，而百度云服务器采用分布式架构，至少在国内拥有大量云节点，这保证了网站的快速加载。所以，对于我这种纯静态的网站来说，使用云加速是优势。\n但是，百度云有个蛋疼的规定，就是必须获得工信部网站备案的域名才可以使用国内云服务器`未备案网站会分配到海外服务器`，而且未备案的网站似乎也不可以使用一些功能。所以为了体验云服务，还是乖乖备案吧。记得高中建站的时候就玩过一次备案`到现在都还记得当时的域名-mokyue.com，挺喜欢这个域名的，就是有点长。后来没钱就没继续搞啦，汗~`，以前备案没有那么严格，也不记得当时是怎么通过的了。这次备案没有自己去撞板，花了几十块让`创宇云`帮我备案，网站关了大概一周时间，备案就搞定了`果然是有钱使得鬼推磨`，anyway，终于可以上云了。\n","slug":"为上云而备案","updated":1423744811000,"excerpt":"","_id":"wygxm5b4rhsxjfwf","comments":true,"layout":"post","photos":[],"link":""},{"title":"从Qt的delete说开来","date":1423745856000,"categories":["wq9t0ozhm3vpjc5j"],"tags":["iiitas3upf5je20f","9r2t9396ra3aksao","5bf76ua1sc0caavy","th8bfwo92wk19pps"],"content":"<blockquote>\n<p>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。<br><a href=\"http://blog.csdn.net/dbzhang800/article/details/6300025\" title=\"http://blog.csdn.net/dbzhang800/article/details/6300025\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dbzhang800/article/details/6300025</a></p>\n</blockquote>\n<p>在C++中学习过程中，我们都知道：</p>\n<ul>\n<li>delete 和 new 必须 配对使用(一 一对应)：delete少了，则内存泄露，多了麻烦更大。</li>\n</ul>\n<p>Qt作为C++的库，显然是不会违背C++的前述原则的。可是:</p>\n<ul>\n<li>在Qt中，我们很多时候都疯狂地用new，却很少用delete，缺少的 delete 去哪儿了？！</li>\n</ul>\n<h5 id=\"Qt半自动的内存管理\">Qt半自动的内存管理</h5>\n<p>在Qt中，以下情况下你new出的对象你可以不用 亲自去delete (但你应该清楚delete在何处被Qt调用的，怎么被调用的)：</p>\n<ul>\n<li>QObject及其派生类的对象，如果其parent非0，那么其parent析构时会析构该对象(本文内容围绕这一点展开 )</li>\n</ul>\n<p>除此之外，有些类的对象可以接收设置一些特别的标记，比如：</p>\n<ul>\n<li>QWidget及其派生类的对象，可以设置 Qt::WA_DeleteOnClose 标志位(当close时会析构该对象)</li>\n<li>QAbstractAnimation派生类的对象，可以设置 QAbstractAnimation::DeleteWhenStopped</li>\n<li>QRunnable::setAutoDelete()</li>\n<li>MediaSource::setAutoDelete()</li>\n<li>…</li>\n</ul>\n<p>注意：这些用法会有些陷阱 ，请注意看本文最后的3个小例子。</p>\n<p>在Qt中，最基础和核心的类是：QObject 。它的魔力很大，本文只关注两点：</p>\n<ul>\n<li>父子关系</li>\n<li>deleteLater</li>\n</ul>\n<h5 id=\"父子关系\">父子关系</h5>\n<p>在Qt中，每个 QObject 内部都有一个list，用来保存所有的 children，还有一个指针，保存自己的parent。当它自己析构时，它会将自己从parent的列表中删除，并且析构掉所有的children。</p>\n<p>注意：在 Qt 中，我们经常会遇到</p>\n<ul>\n<li><strong>基类</strong>、<strong>派生类</strong>，或<strong>父类</strong>、<strong>子类</strong>。 这是对于派生体系来说的，和在C++相关书中看到的完全一样，与这的parent无关</li>\n<li><strong>父对象</strong>、<strong>子对象</strong>、<strong>父子关系</strong>。 这是Qt中所特有的，也就是这儿的parent所引入的，与类的继承关系无关</li>\n</ul>\n<h6 id=\"建立与解除\">建立与解除</h6>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q_INVOKABLE QObject<span class=\"tag\">::QObject</span> ( QObject <span class=\"subst\">*</span> <span class=\"keyword\">parent</span> <span class=\"subst\">=</span> <span class=\"number\">0</span> )</div></pre></td></tr></table></figure>\n\n<p>创建一个QObject对象时，如果指定了父对象，它就会将自己添加到父对象的 children 列表中</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">QObject::~QObject () [<span class=\"keyword\">virtual</span>]</div></pre></td></tr></table></figure>\n\n<p>当一个QObject对象析构时，它会将自己从父对象的 children 列表中移除(parent非0的话)</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">void</span> QObject<span class=\"tag\">::setParent</span> ( QObject <span class=\"subst\">*</span> <span class=\"keyword\">parent</span> )</div></pre></td></tr></table></figure>\n\n<p>通过该函数，将自己从原父对象的children中删除，添加到新parent的children列表中</p>\n<p>注：这三个函数都是通过一个内部私有函数来实现的，这就是</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">QObjectPrivate::<span class=\"keyword\">set</span>Parent_helper(QObject *o)</div></pre></td></tr></table></figure>\n\n<h6 id=\"获取父、子对象\">获取父、子对象</h6>\n<p>每个QObject只有一个父对象：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">QObject * QObject::parent () <span class=\"keyword\">const</span></div></pre></td></tr></table></figure>\n\n<p>子对象可以有多个</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> QObjectList & QObject::children () <span class=\"keyword\">const</span></div></pre></td></tr></table></figure>\n\n<p>所以可以根据条件来查找喽：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">T QObject::findChild ( <span class=\"keyword\">const</span> QString & name = QString() ) <span class=\"keyword\">const</span></div><div class=\"line\">QList&lt;T&gt; QObject::findChildren ( <span class=\"keyword\">const</span> QString & name = QString() ) <span class=\"keyword\">const</span></div></pre></td></tr></table></figure>\n\n<h5 id=\"deleteLater\">deleteLater</h5>\n<p>deleteLater 包含两层意思了</p>\n<ul>\n<li>delete</li>\n<li>later</li>\n</ul>\n<p>呵呵，似乎这是废话哈。</p>\n<h6 id=\"删除自己\">删除自己</h6>\n<p>在去年春节前的时候吧，有人对</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">obj-&gt;</span> deleteLater()</span></div></pre></td></tr></table></figure>\n\n<p>会像下面一样调用delete：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"operator\"><span class=\"keyword\">delete</span> obj;</span></div></pre></td></tr></table></figure>\n\n<p>感到不解。然后我写了这样一个C++例子：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class A</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">  <span class=\"title\">A</span>(){}</div><div class=\"line\">  <span class=\"keyword\">void</span> deleteMe()</div><div class=\"line\">  {</div><div class=\"line\">      delete <span class=\"keyword\">this</span>;</div><div class=\"line\">  }</div><div class=\"line\">};</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main()</div><div class=\"line\">{</div><div class=\"line\">  A * a = <span class=\"keyword\">new</span> A;</div><div class=\"line\">  a-&gt;deleteMe();</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>应该不需要解释吧</p>\n<h6 id=\"later\">later</h6>\n<p>Qt 是事件驱动的，所以发送一个删除事件到事件系统就可以啦：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">void</span> <span class=\"tag\">QObject</span><span class=\"pseudo\">::deleteLater()</span></div><div class=\"line\"><span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">QCoreApplication</span>:<span class=\"value\">:<span class=\"function\">postEvent</span>(this, new <span class=\"function\">QEvent</span>(QEvent::DeferredDelete))</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>事件循环稍后看到该事件就会将其派发会这个widget：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool QObject::event(QEvent *e)</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">switch</span> (e-&gt;type()) {</div><div class=\"line\"><span class=\"keyword\">...</span></div><div class=\"line\">    case QEvent::DeferredDelete:</div><div class=\"line\">         <span class=\"keyword\">...</span></div></pre></td></tr></table></figure>\n\n<h5 id=\"一些例子\">一些例子</h5>\n<h6 id=\"无关痛痒\">无关痛痒</h6>\n<p>很简短、很熟悉的一个例子是不？但是 如果你发现对象的析构函数始终不被成功调用 ，会有什么感觉？</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QApplication&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QLabel&gt;</span></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</div><div class=\"line\">{</div><div class=\"line\">QApplication app(argc, argv);</div><div class=\"line\">QLabel *label = <span class=\"keyword\">new</span> QLabel(<span class=\"string\">\"Hello Qt!\"</span>);</div><div class=\"line\">label-&gt;show();</div><div class=\"line\"><span class=\"keyword\">return</span> app.exec();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这是 C++ GUI Programming with Qt 4 一书的第一个例子。我们注意到这儿的 label 既没有指定parent，也没有对其调用delete。</p>\n<p>所以，这儿会造成内存泄露。</p>\n<p>书中解释说，对于这种小例子，这点内存泄露不算什么。不清楚官方这个例子的意图是什么，或许是一开始就让大家用指针吧。</p>\n<p>三种改进方式</p>\n<ul>\n<li>分配对象到stack而不是heap中</li>\n</ul>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">QLabel <span class=\"keyword\">label</span>(<span class=\"string\">\"Hello Qt!\"</span>);</div><div class=\"line\"><span class=\"keyword\">label</span>.show();</div></pre></td></tr></table></figure>\n\n<ul>\n<li>设置标志位，这样，当我们点击关闭按钮时，close()函数将会调用deleteLater</li>\n</ul>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">label-&gt;setAttribute(Qt::WA_DeleteOnClose);</div></pre></td></tr></table></figure>\n\n<ul>\n<li>动手调用delete(不就是少了一个么，我们补上还不行么)</li>\n</ul>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">ret</span> = app.exec();</div><div class=\"line\"><span class=\"built_in\">delete</span> label;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">ret</span>;</div></pre></td></tr></table></figure>\n\n<h6 id=\"单独列一个吧\">单独列一个吧</h6>\n<p>强化一下对前一个例子的了解</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QApplication&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QLabel&gt;</span></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</div><div class=\"line\">{</div><div class=\"line\">QApplication app(argc, argv);</div><div class=\"line\">QLabel label(<span class=\"string\">\"Hello Qt!\"</span>);</div><div class=\"line\">label.show();</div><div class=\"line\">label.setAttribute(Qt::WA_DeleteOnClose);</div><div class=\"line\"><span class=\"keyword\">return</span> app.exec();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>运行正常，退出时会崩溃 ，因为label被close时，将会 delete 这儿label对象，但label对象却不是通过new分配到heap中的。</p>\n<p>为了使得用户减少自己显式使用delete，Qt将delete隐藏的比较深。这样一来，不使用new为对象分配空间时，反倒需要多多小心了。</p>\n<h6 id=\"隐蔽很深？\">隐蔽很深？</h6>\n<p>看个小例子：这个程序退出时会直接崩溃 。</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#include &lt;QtGui&gt;</span></div><div class=\"line\">int main(int argc, char* argv[])</div><div class=\"line\">{</div><div class=\"line\">   QApplication app(argc, argv);</div><div class=\"line\">   QLabel label(t<span class=\"string\">r\"Hello Qt!\"</span>);</div><div class=\"line\">   QWidget w;</div><div class=\"line\">   label.setParent(&w);</div><div class=\"line\">   w.show();</div><div class=\"line\">   <span class=\"keyword\">return</span> app.exec();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>问题出在哪儿呢？因为退出时，w 比 label 先被析构，当 w 被析构时，会删除chilren列表中的对象，也就是这儿的 label。但 label 却不是通过new分配在heap中，而是在stack中，可想而知，delete 一个再stack中的对象会怎么样了。相当于</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">QLabel label();</div><div class=\"line\"><span class=\"operator\"><span class=\"keyword\">delete</span> &label;</span></div></pre></td></tr></table></figure>\n\n<p>两种改进办法：</p>\n<ul>\n<li>一是，将label分配到heap中</li>\n</ul>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">QLabel *<span class=\"keyword\">label</span> = <span class=\"keyword\">new</span> QLabel(<span class=\"string\">\"Hello Qt!\"</span>);</div><div class=\"line\"><span class=\"keyword\">label</span>.setParent(&w)</div></pre></td></tr></table></figure>\n\n<ul>\n<li>再一种就是，确保label先于其parent被析构(调整一下顺序)，这样，label析构时将自己从父对象的列表中移除自己，w析构时，children列表中就不会有分配在stack中的对象了。</li>\n</ul>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">QWidget w;</div><div class=\"line\">QLabel label(t<span class=\"string\">r\"Hello Qt!\"</span>);</div></pre></td></tr></table></figure>\n\n<p>Qt 对象的父子关系的引入，简化了我们对内存的管理，但是，由于它会在你不太注意的地方调用 delete，所以，使用时还是要当心。</p>\n<h5 id=\"参考\">参考</h5>\n<ul>\n<li><a href=\"http://doc.qt.nokia.com/4.7/qobject.html\" title=\"http://doc.qt.nokia.com/4.7/qobject.html\" target=\"_blank\" rel=\"external\">http://doc.qt.nokia.com/4.7/qobject.html</a></li>\n<li><a href=\"http://www.cuteqt.com/blog/?p=824\" title=\"http://www.cuteqt.com/blog/?p=824\" target=\"_blank\" rel=\"external\">http://www.cuteqt.com/blog/?p=824</a></li>\n</ul>\n","source":"_posts/2015-02-12-从Qt的delete说开来.md","raw":"title: 从Qt的delete说开来\ndate: 2015-02-12 20:57:36\ncategories:\n- Qt\ntags:\n- Qt\n- delete\n- 内存管理\n- C++\n---\n>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n>[http://blog.csdn.net/dbzhang800/article/details/6300025](http://blog.csdn.net/dbzhang800/article/details/6300025 \"http://blog.csdn.net/dbzhang800/article/details/6300025\")\n\n在C++中学习过程中，我们都知道：\n- delete 和 new 必须 配对使用(一 一对应)：delete少了，则内存泄露，多了麻烦更大。\n\nQt作为C++的库，显然是不会违背C++的前述原则的。可是:\n- 在Qt中，我们很多时候都疯狂地用new，却很少用delete，缺少的 delete 去哪儿了？！\n\n##### Qt半自动的内存管理\n在Qt中，以下情况下你new出的对象你可以不用 亲自去delete (但你应该清楚delete在何处被Qt调用的，怎么被调用的)：\n- QObject及其派生类的对象，如果其parent非0，那么其parent析构时会析构该对象(本文内容围绕这一点展开 )\n\n除此之外，有些类的对象可以接收设置一些特别的标记，比如：\n\n- QWidget及其派生类的对象，可以设置 Qt::WA_DeleteOnClose 标志位(当close时会析构该对象)\n- QAbstractAnimation派生类的对象，可以设置 QAbstractAnimation::DeleteWhenStopped\n- QRunnable::setAutoDelete()\n- MediaSource::setAutoDelete()\n- ...\n\n注意：这些用法会有些陷阱 ，请注意看本文最后的3个小例子。\n\n在Qt中，最基础和核心的类是：QObject 。它的魔力很大，本文只关注两点：\n- 父子关系\n- deleteLater\n\n##### 父子关系\n在Qt中，每个 QObject 内部都有一个list，用来保存所有的 children，还有一个指针，保存自己的parent。当它自己析构时，它会将自己从parent的列表中删除，并且析构掉所有的children。\n\n注意：在 Qt 中，我们经常会遇到\n- **基类**、**派生类**，或**父类**、**子类**。 这是对于派生体系来说的，和在C++相关书中看到的完全一样，与这的parent无关\n- **父对象**、**子对象**、**父子关系**。 这是Qt中所特有的，也就是这儿的parent所引入的，与类的继承关系无关\n\n###### 建立与解除\n```cplusplus\nQ_INVOKABLE QObject::QObject ( QObject * parent = 0 )\n```\n创建一个QObject对象时，如果指定了父对象，它就会将自己添加到父对象的 children 列表中\n\n```cplusplus\nQObject::~QObject () [virtual]\n```\n当一个QObject对象析构时，它会将自己从父对象的 children 列表中移除(parent非0的话)\n\n```cplusplus\nvoid QObject::setParent ( QObject * parent )\n```\n通过该函数，将自己从原父对象的children中删除，添加到新parent的children列表中\n\n注：这三个函数都是通过一个内部私有函数来实现的，这就是\n```cplusplus\nQObjectPrivate::setParent_helper(QObject *o)\n```\n\n###### 获取父、子对象\n每个QObject只有一个父对象：\n```cplusplus\nQObject * QObject::parent () const\n```\n\n子对象可以有多个\n```cplusplus\nconst QObjectList & QObject::children () const\n```\n\n所以可以根据条件来查找喽：\n```cplusplus\nT QObject::findChild ( const QString & name = QString() ) const\nQList<T> QObject::findChildren ( const QString & name = QString() ) const\n```\n\n##### deleteLater\ndeleteLater 包含两层意思了\n- delete\n- later\n\n呵呵，似乎这是废话哈。\n\n###### 删除自己\n在去年春节前的时候吧，有人对\n```cplusplus\nobj-> deleteLater()\n```\n\n会像下面一样调用delete：\n```cplusplus\ndelete obj;\n```\n\n感到不解。然后我写了这样一个C++例子：\n```cplusplus\nclass A\n{\n  public:\n  A(){}\n  void deleteMe()\n  {\n      delete this;\n  }\n};\n\nint main()\n{\n  A * a = new A;\n  a->deleteMe();\n  return 0;\n}\n```\n应该不需要解释吧\n\n###### later\nQt 是事件驱动的，所以发送一个删除事件到事件系统就可以啦：\n```cplusplus\nvoid QObject::deleteLater()\n{\n    QCoreApplication::postEvent(this, new QEvent(QEvent::DeferredDelete));\n}\n```\n\n事件循环稍后看到该事件就会将其派发会这个widget：\n```cplusplus\nbool QObject::event(QEvent *e)\n{\n    switch (e->type()) {\n...\n    case QEvent::DeferredDelete:\n         ...\n```\n\n##### 一些例子\n###### 无关痛痒\n很简短、很熟悉的一个例子是不？但是 如果你发现对象的析构函数始终不被成功调用 ，会有什么感觉？\n```cplusplus\n#include <QApplication>\n#include <QLabel>\nint main(int argc, char *argv[])\n{\nQApplication app(argc, argv);\nQLabel *label = new QLabel(\"Hello Qt!\");\nlabel->show();\nreturn app.exec();\n}\n```\n\n这是 C++ GUI Programming with Qt 4 一书的第一个例子。我们注意到这儿的 label 既没有指定parent，也没有对其调用delete。\n\n所以，这儿会造成内存泄露。\n\n书中解释说，对于这种小例子，这点内存泄露不算什么。不清楚官方这个例子的意图是什么，或许是一开始就让大家用指针吧。\n\n三种改进方式\n\n- 分配对象到stack而不是heap中\n```cplusplus\nQLabel label(\"Hello Qt!\");\nlabel.show();\n```\n- 设置标志位，这样，当我们点击关闭按钮时，close()函数将会调用deleteLater\n```cplusplus\nlabel->setAttribute(Qt::WA_DeleteOnClose);\n```\n- 动手调用delete(不就是少了一个么，我们补上还不行么)\n```cplusplus\nint ret = app.exec();\ndelete label;\nreturn ret;\n```\n\n###### 单独列一个吧\n强化一下对前一个例子的了解\n```cplusplus\n#include <QApplication>\n#include <QLabel>\nint main(int argc, char *argv[])\n{\nQApplication app(argc, argv);\nQLabel label(\"Hello Qt!\");\nlabel.show();\nlabel.setAttribute(Qt::WA_DeleteOnClose);\nreturn app.exec();\n}\n```\n运行正常，退出时会崩溃 ，因为label被close时，将会 delete 这儿label对象，但label对象却不是通过new分配到heap中的。\n\n为了使得用户减少自己显式使用delete，Qt将delete隐藏的比较深。这样一来，不使用new为对象分配空间时，反倒需要多多小心了。\n\n###### 隐蔽很深？\n看个小例子：这个程序退出时会直接崩溃 。\n```cplusplus\n#include <QtGui>\nint main(int argc, char* argv[])\n{\n   QApplication app(argc, argv);\n   QLabel label(tr\"Hello Qt!\");\n   QWidget w;\n   label.setParent(&w);\n   w.show();\n   return app.exec();\n}\n```\n问题出在哪儿呢？因为退出时，w 比 label 先被析构，当 w 被析构时，会删除chilren列表中的对象，也就是这儿的 label。但 label 却不是通过new分配在heap中，而是在stack中，可想而知，delete 一个再stack中的对象会怎么样了。相当于\n```cplusplus\nQLabel label();\ndelete &label;\n```\n\n两种改进办法：\n- 一是，将label分配到heap中\n```cplusplus\nQLabel *label = new QLabel(\"Hello Qt!\");\nlabel.setParent(&w)\n```\n- 再一种就是，确保label先于其parent被析构(调整一下顺序)，这样，label析构时将自己从父对象的列表中移除自己，w析构时，children列表中就不会有分配在stack中的对象了。\n```cplusplus\nQWidget w;\nQLabel label(tr\"Hello Qt!\");\n```\n\nQt 对象的父子关系的引入，简化了我们对内存的管理，但是，由于它会在你不太注意的地方调用 delete，所以，使用时还是要当心。\n\n##### 参考\n\n- [http://doc.qt.nokia.com/4.7/qobject.html](http://doc.qt.nokia.com/4.7/qobject.html \"http://doc.qt.nokia.com/4.7/qobject.html\")\n- [http://www.cuteqt.com/blog/?p=824](http://www.cuteqt.com/blog/?p=824 \"http://www.cuteqt.com/blog/?p=824\")\n","slug":"从Qt的delete说开来","updated":1423829660000,"excerpt":"","_id":"xl211dtj01b2lpwb","comments":true,"layout":"post","photos":[],"link":""},{"title":"QtWebkit 使用方法","date":1423829329000,"categories":["wq9t0ozhm3vpjc5j"],"tags":["iiitas3upf5je20f","irjukdgyoos2qa84"],"content":"<blockquote>\n<p>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/gisbeginner/archive/2012/11/10/2763997.html\" title=\"http://www.cnblogs.com/gisbeginner/archive/2012/11/10/2763997.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/gisbeginner/archive/2012/11/10/2763997.html</a></p>\n</blockquote>\n<p><br></p>\n<h5 id=\"让qwebview_设置代理服务器\">让qwebview 设置代理服务器</h5>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">QNetworkProxyproxy;</div><div class=\"line\">proxy<span class=\"subst\">=</span>QNetworkProxy<span class=\"tag\">::HttpProxy</span>;</div><div class=\"line\">proxy<span class=\"built_in\">.</span>setHostName(tr(<span class=\"string\">\"15.12.110.252\"</span>));<span class=\"comment\">//代理服务器</span></div><div class=\"line\">proxy<span class=\"built_in\">.</span>setPort(<span class=\"number\">8080</span>);</div><div class=\"line\">netwkAcssMng<span class=\"subst\">=</span><span class=\"literal\">new</span> QNetworkAccessManager;</div><div class=\"line\">netwkAcssMng<span class=\"subst\">-&gt;</span>setProxy(proxy);</div><div class=\"line\">webV<span class=\"subst\">=</span>qFindChild<span class=\"subst\">&lt;</span>QWebView<span class=\"subst\">*&gt;</span>(this,<span class=\"string\">\"webView\"</span>);<span class=\"comment\">//全局函数</span></div><div class=\"line\">webV<span class=\"subst\">-&gt;</span>page()<span class=\"subst\">-&gt;</span>setNetworkAccessManager(netwkAcssMng);</div><div class=\"line\">webV<span class=\"subst\">-&gt;</span>load(QUrl(<span class=\"string\">\"http://www.google.com.hk/\"</span>));</div><div class=\"line\">webV<span class=\"subst\">-&gt;</span>show();</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h5 id=\"给qtwebkit_创建_插件\">给qtwebkit 创建 插件</h5>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span>\"intelliplugin.h\"</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span>\"shineprint.h\"</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span>&lt;QDebug&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span>&lt;QWebView&gt;</span></div><div class=\"line\"></div><div class=\"line\">IntelliPlugin::IntelliPlugin(QWidget*parent):</div><div class=\"line\">QWebPluginFactory(parent)</div><div class=\"line\">{</div><div class=\"line\">    qDebug()&lt;&lt;<span class=\"string\">\"IntelliPlugin::IntelliPlugin()\"</span>&lt;&lt;endl;</div><div class=\"line\">    MimeTypemime;</div><div class=\"line\">    mime.name=<span class=\"string\">\"application/print-plugin\"</span>;</div><div class=\"line\">    m_mimeType.append(mime);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">IntelliPlugin::~IntelliPlugin()</div><div class=\"line\">{</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">QObject*IntelliPlugin::create(constQString&mimeType,constQUrl&,constQStringList&argumentNames,constQStringList&argumentValues)<span class=\"keyword\">const</span></div><div class=\"line\">{</div><div class=\"line\">    qDebug()&lt;&lt;<span class=\"string\">\"IntelliPlugin::create()\"</span>&lt;&lt;endl;</div><div class=\"line\">    foreach(MimeTypemime,<span class=\"keyword\">this</span>-&gt;m_mimeType){</div><div class=\"line\">        <span class=\"keyword\">if</span>(!mime.name.isEmpty()&&mime.name==mimeType){</div><div class=\"line\">            <span class=\"keyword\">if</span>(mimeType==<span class=\"string\">\"application/print-plugin\"</span>){</div><div class=\"line\">                qDebug()&lt;&lt;<span class=\"string\">\"createshineprint\"</span>&lt;&lt;endl;</div><div class=\"line\">                <span class=\"comment\">//写入自己的类</span></div><div class=\"line\">                ShinePrint*pShinePrint=newShinePrint();</div><div class=\"line\">                qDebug()&lt;&lt;<span class=\"string\">\"finishcreateshineprint.\"</span>&lt;&lt;endl;</div><div class=\"line\">                returnpShinePrint;</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    returnNULL;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">QList&lt;IntelliPlugin::Plugin&gt;IntelliPlugin::plugins()<span class=\"keyword\">const</span></div><div class=\"line\">{</div><div class=\"line\">    Pluginplugin;</div><div class=\"line\">    plugin.name=<span class=\"string\">\"application/print-plugin\"</span>;</div><div class=\"line\">    plugin.description=<span class=\"string\">\"JustforPrintMessagecalltest\"</span>;</div><div class=\"line\">    plugin.mimeTypes.append(m_mimeType);</div><div class=\"line\">    QList&lt;IntelliPlugin::Plugin&gt;plugList;</div><div class=\"line\">    plugList.append(plugin);</div><div class=\"line\">    returnplugList;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//shineprint.cpp 类</span></div><div class=\"line\"></div><div class=\"line\">ShinePrint<span class=\"value\">::<span class=\"function\">ShinePrint</span>(QWidget*parent):<span class=\"function\">QLabel</span>(parent)</span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"function\">qDebug</span>()&lt;&lt;<span class=\"string\">\"ShinePrint::ShinePrint()\"</span>&lt;&lt;endl;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">ShinePrint<span class=\"value\">::~<span class=\"function\">ShinePrint</span>()</span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"function\">qDebug</span>()&lt;&lt;<span class=\"string\">\"ShinePrint::~ShinePrint()\"</span>&lt;&lt;endl;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">voidShinePrint<span class=\"value\">::<span class=\"function\">PrintMessag</span>(QStringmsg)</span></div><div class=\"line\">{</div><div class=\"line\">    QMessageBoxmsgBox;</div><div class=\"line\">    <span class=\"comment\">//QFontfont;</span></div><div class=\"line\">    <span class=\"comment\">//font.setPixelSize(30);</span></div><div class=\"line\">    <span class=\"comment\">//msgBox.setFont(font);</span></div><div class=\"line\">    msgBox<span class=\"class\">.setText</span>(msg);</div><div class=\"line\">    msgBox<span class=\"class\">.setInformativeText</span>(\"Justfortest!\");</div><div class=\"line\">    msgBox<span class=\"class\">.setStandardButtons</span>(QMessageBox<span class=\"value\">::Save|QMessageBox::Cancel);</span></div><div class=\"line\">    msgBox<span class=\"class\">.setDefaultButton</span>(QMessageBox<span class=\"value\">::Save);</span></div><div class=\"line\">    msgBox<span class=\"class\">.exec</span>();</div><div class=\"line\">    <span class=\"function\">qDebug</span>()&lt;&lt;\"<span class=\"function\">JavaAlert</span>()JavaScriptWillbecalled\"&lt;&lt;endl;</div><div class=\"line\">    <span class=\"comment\">//view-&gt;page()-&gt;mainFrame()-&gt;evaluateJavaScript(\"JavaAlert();\");</span></div><div class=\"line\">    qApp-&gt;<span class=\"function\">exit</span>(0);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h5 id=\"让javascript_调用c++_类\">让javascript 调用c++ 类</h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;object type=<span class=\"string\">\"application/print-plugin\"</span> data=<span class=\"string\">\"http://www.sohu.com\"</span> width=<span class=\"string\">\"1\"</span> height=<span class=\"string\">\"1\"</span> id=<span class=\"string\">\"Callobject\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"title\">object</span>&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">function print() {</div><div class=\"line\">var s5 = \"请耐心等待，过号请到分诊台重新分诊，谢谢合作\";</div><div class=\"line\">/*调用的Qt中的方法: class ShinePrint::void PrintMessag(QString msg)*/</div><div class=\"line\">var printResult = document.getElementById(\"Callobject\").PrintMessag(s5);</div><div class=\"line\">if (printResult <span class=\"tag\">&lt; <span class=\"attribute\">0</span>)</span></div><div class=\"line\"><span class=\"attribute\">alert</span>(\"网络出现故障，打印失败，请联系管理员\");</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">&lt;<span class=\"attribute\">button</span> <span class=\"attribute\">onclick</span>=<span class=\"value\">\"print()\"</span>&gt;clickqtjavascript <span class=\"tag\">&lt;/<span class=\"title\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">webview 进行必要的设置</div><div class=\"line\"></div><div class=\"line\">ui-&gt;webView-&gt;settings()-&gt;setAttribute(QWebSettings::PluginsEnabled,true);</div><div class=\"line\"></div><div class=\"line\">ui-&gt;webView-&gt;settings()-&gt;setAttribute(QWebSettings::JavascriptEnabled,true);</div><div class=\"line\"></div><div class=\"line\">ui-&gt;webView-&gt;page()-&gt;setPluginFactory(newIntelliPlugin);</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h5 id=\"当一个load一个页面，希望通过点击这个页面的2级连接来做其他事情,其中需要在load之后\">当一个load一个页面，希望通过点击这个页面的2级连接来做其他事情,其中需要在load之后</h5>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">ui-&gt;webView-&gt;load(QUrl(<span class=\"string\">\"http://www.baidu.com\"</span>));</div><div class=\"line\">ui-&gt;webView-&gt;page()-&gt;setLinkDelegationPolicy(QWebPage::DelegateAllLinks);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//需要给webveiw 的siganal    （linkClicked）  加个槽函数</span></div><div class=\"line\">voidMainWindow::on_webView_linkClicked(constQUrl&arg1)</div><div class=\"line\">{</div><div class=\"line\">    ui-&gt;webView-&gt;load(QUrl(<span class=\"string\">\"http://www.qq.com\"</span>));</div><div class=\"line\">    QMessageBoxhimessagebox;</div><div class=\"line\">    himessagebox.setText(<span class=\"string\">\"hitodayisaniceday\"</span>);</div><div class=\"line\">    himessagebox.exec();</div><div class=\"line\">}<span class=\"comment\">// 这样就行了</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//打开本地 html 文件</span></div><div class=\"line\">QStringfilename=QFileDialog::getOpenFileName(this,tr(<span class=\"string\">\"打开文件...\"</span>),QString(),tr(<span class=\"string\">\"网页文件(*.htm*.mht*.html);;AllFiles(*.*)\"</span>));</div><div class=\"line\"><span class=\"keyword\">if</span>(!filename.isEmpty())</div><div class=\"line\">{</div><div class=\"line\">    ui-&gt;webView-&gt;settings()-&gt;setAttribute(QWebSettings::PluginsEnabled,<span class=\"keyword\">true</span>);</div><div class=\"line\">    ui-&gt;webView-&gt;settings()-&gt;setAttribute(QWebSettings::JavascriptEnabled,<span class=\"keyword\">true</span>);</div><div class=\"line\">    ui-&gt;webView-&gt;page()-&gt;setPluginFactory(newIntelliPlugin);</div><div class=\"line\">    ui-&gt;webView-&gt;load(QUrl::fromUserInput(filename));</div><div class=\"line\">    QStringcurFile=QFileInfo(filename).canonicalFilePath();<span class=\"comment\">//获得文件的标准路径</span></div><div class=\"line\">    this-&gt;setWindowTitle(curFile+<span class=\"string\">\"-WebView\"</span>);</div><div class=\"line\">    <span class=\"comment\">//this-&gt;statusLabel-&gt;setText(\"\");</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//隐藏qwebview 的滑动条</span></div><div class=\"line\">ui.webView-&gt;page()-&gt;mainFrame()-&gt;setScrollBarPolicy(Qt::Horizontal,Qt::ScrollBarAlwaysOff);</div><div class=\"line\">ui.webView-&gt;page()-&gt;mainFrame()-&gt;setScrollBarPolicy(Qt::Vertical,Qt::ScrollBarAlwaysOff);</div><div class=\"line\">ui.webView_2-&gt;page()-&gt;mainFrame()-&gt;setScrollBarPolicy(Qt::Horizontal,Qt::ScrollBarAlwaysOff);</div><div class=\"line\">ui.webView_2-&gt;page()-&gt;mainFrame()-&gt;setScrollBarPolicy(Qt::Vertical,Qt::ScrollBarAlwaysOff);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//qt 启动其他默认浏览器打开一个网页</span></div><div class=\"line\">Qt.openUrlExternally(<span class=\"string\">\"http://yoururl\"</span>)</div><div class=\"line\">Qt.openUrlExternally(<span class=\"string\">\"tel:&lt;number&gt;\"</span>)</div><div class=\"line\">QDesktopServices::openUrl(arg1);</div><div class=\"line\">qt 调用html页面的javascript</div><div class=\"line\">ui.webView-&gt;page()-&gt;mainFrame()-&gt;evaluateJavaScript(<span class=\"string\">\"helloworld()\"</span>); <span class=\"comment\">//helloworld是html 里面的自定义javascript 方法</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//任何获得焦点的控件 不论是qt自己的控件还是html页面里德控件都会 获得剪切板里面的文字</span></div><div class=\"line\"></div><div class=\"line\">ui.webView-&gt;page()-&gt;setContentEditable(<span class=\"keyword\">true</span>);</div><div class=\"line\">ui.webView-&gt;page()-&gt;triggerAction(QWebPage::Paste,<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-02-13-QtWebkit-使用方法.md","raw":"title: QtWebkit 使用方法\ndate: 2015-02-13 20:08:49\ncategories:\n- Qt\ntags:\n- Qt\n- QtWebkit\n---\n>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n>[http://www.cnblogs.com/gisbeginner/archive/2012/11/10/2763997.html](http://www.cnblogs.com/gisbeginner/archive/2012/11/10/2763997.html \"http://www.cnblogs.com/gisbeginner/archive/2012/11/10/2763997.html\")\n\n<br>\n##### 让qwebview 设置代理服务器\n```cplusplus\nQNetworkProxyproxy;\nproxy=QNetworkProxy::HttpProxy;\nproxy.setHostName(tr(\"15.12.110.252\"));//代理服务器\nproxy.setPort(8080);\nnetwkAcssMng=new QNetworkAccessManager;\nnetwkAcssMng->setProxy(proxy);\nwebV=qFindChild<QWebView*>(this,\"webView\");//全局函数\nwebV->page()->setNetworkAccessManager(netwkAcssMng);\nwebV->load(QUrl(\"http://www.google.com.hk/\"));\nwebV->show();\n```\n<br>\n##### 给qtwebkit 创建 插件\n```cplusplus\n#include\"intelliplugin.h\"\n#include\"shineprint.h\"\n#include<QDebug>\n#include<QWebView>\n\nIntelliPlugin::IntelliPlugin(QWidget*parent):\nQWebPluginFactory(parent)\n{\n    qDebug()<<\"IntelliPlugin::IntelliPlugin()\"<<endl;\n    MimeTypemime;\n    mime.name=\"application/print-plugin\";\n    m_mimeType.append(mime);\n}\n\nIntelliPlugin::~IntelliPlugin()\n{\n}\n\nQObject*IntelliPlugin::create(constQString&mimeType,constQUrl&,constQStringList&argumentNames,constQStringList&argumentValues)const\n{\n    qDebug()<<\"IntelliPlugin::create()\"<<endl;\n    foreach(MimeTypemime,this->m_mimeType){\n        if(!mime.name.isEmpty()&&mime.name==mimeType){\n            if(mimeType==\"application/print-plugin\"){\n                qDebug()<<\"createshineprint\"<<endl;\n                //写入自己的类\n                ShinePrint*pShinePrint=newShinePrint();\n                qDebug()<<\"finishcreateshineprint.\"<<endl;\n                returnpShinePrint;\n            }\n        }\n    }\n    returnNULL;\n}\n\nQList<IntelliPlugin::Plugin>IntelliPlugin::plugins()const\n{\n    Pluginplugin;\n    plugin.name=\"application/print-plugin\";\n    plugin.description=\"JustforPrintMessagecalltest\";\n    plugin.mimeTypes.append(m_mimeType);\n    QList<IntelliPlugin::Plugin>plugList;\n    plugList.append(plugin);\n    returnplugList;\n}\n```\n```cplusplus\n//shineprint.cpp 类\n\nShinePrint::ShinePrint(QWidget*parent):QLabel(parent)\n{\n    qDebug()<<\"ShinePrint::ShinePrint()\"<<endl;\n}\n\nShinePrint::~ShinePrint()\n{\n    qDebug()<<\"ShinePrint::~ShinePrint()\"<<endl;\n}\n\nvoidShinePrint::PrintMessag(QStringmsg)\n{\n    QMessageBoxmsgBox;\n    //QFontfont;\n    //font.setPixelSize(30);\n    //msgBox.setFont(font);\n    msgBox.setText(msg);\n    msgBox.setInformativeText(\"Justfortest!\");\n    msgBox.setStandardButtons(QMessageBox::Save|QMessageBox::Cancel);\n    msgBox.setDefaultButton(QMessageBox::Save);\n    msgBox.exec();\n    qDebug()<<\"JavaAlert()JavaScriptWillbecalled\"<<endl;\n    //view->page()->mainFrame()->evaluateJavaScript(\"JavaAlert();\");\n    qApp->exit(0);\n}\n```\n<br>\n##### 让javascript 调用c++ 类\n```javascript \n<object type=\"application/print-plugin\" data=\"http://www.sohu.com\" width=\"1\" height=\"1\" id=\"Callobject\">\n</object>\n\nfunction print() {\nvar s5 = \"请耐心等待，过号请到分诊台重新分诊，谢谢合作\";\n/*调用的Qt中的方法: class ShinePrint::void PrintMessag(QString msg)*/\nvar printResult = document.getElementById(\"Callobject\").PrintMessag(s5);\nif (printResult < 0)\nalert(\"网络出现故障，打印失败，请联系管理员\");\n}\n\n<button onclick=\"print()\">clickqtjavascript </button>\n\nwebview 进行必要的设置\n\nui->webView->settings()->setAttribute(QWebSettings::PluginsEnabled,true);\n\nui->webView->settings()->setAttribute(QWebSettings::JavascriptEnabled,true);\n\nui->webView->page()->setPluginFactory(newIntelliPlugin);\n```\n<br>\n##### 当一个load一个页面，希望通过点击这个页面的2级连接来做其他事情,其中需要在load之后\n```cplusplus\nui->webView->load(QUrl(\"http://www.baidu.com\"));\nui->webView->page()->setLinkDelegationPolicy(QWebPage::DelegateAllLinks);\n\n//需要给webveiw 的siganal    （linkClicked）  加个槽函数\nvoidMainWindow::on_webView_linkClicked(constQUrl&arg1)\n{\n    ui->webView->load(QUrl(\"http://www.qq.com\"));\n    QMessageBoxhimessagebox;\n    himessagebox.setText(\"hitodayisaniceday\");\n    himessagebox.exec();\n}// 这样就行了\n\n//打开本地 html 文件\nQStringfilename=QFileDialog::getOpenFileName(this,tr(\"打开文件...\"),QString(),tr(\"网页文件(*.htm*.mht*.html);;AllFiles(*.*)\"));\nif(!filename.isEmpty())\n{\n    ui->webView->settings()->setAttribute(QWebSettings::PluginsEnabled,true);\n    ui->webView->settings()->setAttribute(QWebSettings::JavascriptEnabled,true);\n    ui->webView->page()->setPluginFactory(newIntelliPlugin);\n    ui->webView->load(QUrl::fromUserInput(filename));\n    QStringcurFile=QFileInfo(filename).canonicalFilePath();//获得文件的标准路径\n    this->setWindowTitle(curFile+\"-WebView\");\n    //this->statusLabel->setText(\"\");\n}\n\n//隐藏qwebview 的滑动条\nui.webView->page()->mainFrame()->setScrollBarPolicy(Qt::Horizontal,Qt::ScrollBarAlwaysOff);\nui.webView->page()->mainFrame()->setScrollBarPolicy(Qt::Vertical,Qt::ScrollBarAlwaysOff);\nui.webView_2->page()->mainFrame()->setScrollBarPolicy(Qt::Horizontal,Qt::ScrollBarAlwaysOff);\nui.webView_2->page()->mainFrame()->setScrollBarPolicy(Qt::Vertical,Qt::ScrollBarAlwaysOff);\n\n//qt 启动其他默认浏览器打开一个网页\nQt.openUrlExternally(\"http://yoururl\")\nQt.openUrlExternally(\"tel:<number>\")\nQDesktopServices::openUrl(arg1);\nqt 调用html页面的javascript\nui.webView->page()->mainFrame()->evaluateJavaScript(\"helloworld()\"); //helloworld是html 里面的自定义javascript 方法\n\n//任何获得焦点的控件 不论是qt自己的控件还是html页面里德控件都会 获得剪切板里面的文字\n\nui.webView->page()->setContentEditable(true);\nui.webView->page()->triggerAction(QWebPage::Paste,true);\n```\n","slug":"QtWebkit-使用方法","updated":1423830660000,"excerpt":"","_id":"ywlr643oxwdpds1a","comments":true,"layout":"post","photos":[],"link":""},{"title":"Git add 命令","date":1424002561000,"categories":["ucl7x2934t6qnav2"],"tags":["1gz3cthbtt102e8e","2ydf0o8rnid86cn0"],"content":"<blockquote>\n<p>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。<br><a href=\"http://blog.csdn.net/tuhuolong/article/details/32956765\" title=\"http://blog.csdn.net/tuhuolong/article/details/32956765\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/tuhuolong/article/details/32956765</a></p>\n</blockquote>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add -<span class=\"constant\">A</span>    <span class=\"comment\">#stages All</span></div><div class=\"line\">git add .     <span class=\"comment\">#stages new and modified, without deleted</span></div><div class=\"line\">git add -u    <span class=\"comment\">#stages modified and deleted, without new</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-02-15-Git-add-命令.md","raw":"title: Git add 命令\ndate: 2015-02-15 20:16:01\ncategories:\n- Git\ntags:\n- Git\n- add\n---\n>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n>[http://blog.csdn.net/tuhuolong/article/details/32956765](http://blog.csdn.net/tuhuolong/article/details/32956765 \"http://blog.csdn.net/tuhuolong/article/details/32956765\")\n\n```ruby\ngit add -A    #stages All\ngit add .     #stages new and modified, without deleted\ngit add -u    #stages modified and deleted, without new\n```\n","slug":"Git-add-命令","updated":1424003278000,"excerpt":"","_id":"u5srw1edrsyau2y3","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt中槽函数如何获取按钮QPushButton的按钮文本","date":1424003341000,"categories":["wq9t0ozhm3vpjc5j"],"tags":["iiitas3upf5je20f","irrucl4gtn3uqwwl","8lhl3hpx77ayl9zw"],"content":"<blockquote>\n<p>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。<br><a href=\"http://blog.csdn.net/sowhat_ah/article/details/43483557\" title=\"http://blog.csdn.net/sowhat_ah/article/details/43483557\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/sowhat_ah/article/details/43483557</a></p>\n</blockquote>\n<p>Qt中的信号-槽机制大大降低了编程的耦合度；</p>\n<p>QPushButton是按钮中最常用的一个组件；</p>\n<p>但是QPushButton的几个信号中除了缺省参之外都没有带参：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q_SIGNALS:  </div><div class=\"line\">    <span class=\"keyword\">void</span> pressed();  </div><div class=\"line\">    <span class=\"keyword\">void</span> released();  </div><div class=\"line\">    <span class=\"keyword\">void</span> clicked(<span class=\"keyword\">bool</span> <span class=\"keyword\">checked</span> = <span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure>\n\n<p><br><br>也就是说，若你的槽函数与多个QPushButton的clicked()信号相连，则你的槽函数根本无法区分是哪个QPushButton发出的信号；</p>\n<p>这在很多时候用起来也是很不方便；</p>\n<p>“软件开发中遇到的所有问题，都可以通过增加一层抽象而得以解决”</p>\n<p>同样的，这个问题我们可以通过子类化来解决：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">class KeyButton <span class=\"value\">: public QPushButton  </span></div><div class=\"line\">{  </div><div class=\"line\">    Q_OBJECT  </div><div class=\"line\">public:  </div><div class=\"line\">    explicit <span class=\"function\">KeyButton</span>(QWidget *parent = <span class=\"number\">0</span>) : <span class=\"function\">QPushButton</span>(parent),  </div><div class=\"line\">        <span class=\"function\">pauseMsecs</span>(<span class=\"number\">400</span>), <span class=\"function\">intervalMsecs</span>(<span class=\"number\">30</span>)  </div><div class=\"line\">    {  </div><div class=\"line\">        tm = new <span class=\"function\">QTimer</span>(this);  </div><div class=\"line\">        <span class=\"function\">connect</span>(tm, <span class=\"function\">SIGNAL</span>(<span class=\"function\">timeout</span>()), this, <span class=\"function\">SLOT</span>(<span class=\"function\">on_pressed_last</span>()));  </div><div class=\"line\">        <span class=\"function\">connect</span>(this, <span class=\"function\">SIGNAL</span>(<span class=\"function\">pressed</span>()), this, <span class=\"function\">SLOT</span>(<span class=\"function\">on_pressed</span>()));  </div><div class=\"line\">        <span class=\"function\">connect</span>(this, <span class=\"function\">SIGNAL</span>(<span class=\"function\">released</span>()), this, <span class=\"function\">SLOT</span>(<span class=\"function\">on_released</span>()));  </div><div class=\"line\">        <span class=\"function\">connect</span>(this, <span class=\"function\">SIGNAL</span>(<span class=\"function\">clicked</span>()), this, <span class=\"function\">SLOT</span>(<span class=\"function\">on_clicked</span>()));  </div><div class=\"line\">    }  </div><div class=\"line\">  </div><div class=\"line\">private<span class=\"value\">:  </span></div><div class=\"line\">    QTimer *tm;  </div><div class=\"line\">    long pauseMsecs;  </div><div class=\"line\">    long intervalMsecs;  </div><div class=\"line\">  </div><div class=\"line\">signals<span class=\"value\">:  </span></div><div class=\"line\">    void <span class=\"function\">keyPressed</span>(const QString &msg);  </div><div class=\"line\">    void <span class=\"function\">keyReleased</span>(const QString &msg);  </div><div class=\"line\">    void <span class=\"function\">keyClicked</span>(const QString &msg);  </div><div class=\"line\">  </div><div class=\"line\">public slots<span class=\"value\">:  </span></div><div class=\"line\">    void <span class=\"function\">on_pressed</span>() { emit this-&gt;<span class=\"function\">keyPressed</span>(this-&gt;<span class=\"function\">text</span>());  </div><div class=\"line\">                        tm-&gt;<span class=\"function\">start</span>(pauseMsecs); }  </div><div class=\"line\">    void <span class=\"function\">on_pressed_last</span>() { emit this-&gt;<span class=\"function\">keyPressed</span>(this-&gt;<span class=\"function\">text</span>());  </div><div class=\"line\">                             tm-&gt;<span class=\"function\">setInterval</span>(intervalMsecs); }  </div><div class=\"line\">    void <span class=\"function\">on_released</span>() { tm-&gt;<span class=\"function\">stop</span>(); emit this-&gt;<span class=\"function\">keyReleased</span>(this-&gt;<span class=\"function\">text</span>()); }  </div><div class=\"line\">    void <span class=\"function\">on_clicked</span>() { emit this-&gt;<span class=\"function\">keyClicked</span>(this-&gt;<span class=\"function\">text</span>()); }  </div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p><br><br>这其中的定时器，是为了实现类似长按则连续输入的按键效果；</p>\n<p>这样的按钮类就可以在自己的信号Clickied()、Pressed()或Released()中夹带各种信息，使得槽函数能根据信息不同进行不同处理，这里夹带的是按钮上的文本，你也可以根据需求随意修改，夹带各种你想传递的信息。</p>\n","source":"_posts/2015-02-15-Qt中槽函数如何获取按钮QPushButton的按钮文本.md","raw":"title: Qt中槽函数如何获取按钮QPushButton的按钮文本\ndate: 2015-02-15 20:29:01\ncategories:\n- Qt\ntags:\n- Qt\n- 信号\n- 槽\n---\n>[转] 原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。\n>[http://blog.csdn.net/sowhat_ah/article/details/43483557](http://blog.csdn.net/sowhat_ah/article/details/43483557 \"http://blog.csdn.net/sowhat_ah/article/details/43483557\")\n\nQt中的信号-槽机制大大降低了编程的耦合度；\n\nQPushButton是按钮中最常用的一个组件；\n\n但是QPushButton的几个信号中除了缺省参之外都没有带参：\n```cplusplus\nQ_SIGNALS:  \n    void pressed();  \n    void released();  \n    void clicked(bool checked = false);  \n```\n<br>\n也就是说，若你的槽函数与多个QPushButton的clicked()信号相连，则你的槽函数根本无法区分是哪个QPushButton发出的信号；\n\n这在很多时候用起来也是很不方便；\n\n“软件开发中遇到的所有问题，都可以通过增加一层抽象而得以解决”\n\n同样的，这个问题我们可以通过子类化来解决：\n```cplusplus\nclass KeyButton : public QPushButton  \n{  \n    Q_OBJECT  \npublic:  \n    explicit KeyButton(QWidget *parent = 0) : QPushButton(parent),  \n        pauseMsecs(400), intervalMsecs(30)  \n    {  \n        tm = new QTimer(this);  \n        connect(tm, SIGNAL(timeout()), this, SLOT(on_pressed_last()));  \n        connect(this, SIGNAL(pressed()), this, SLOT(on_pressed()));  \n        connect(this, SIGNAL(released()), this, SLOT(on_released()));  \n        connect(this, SIGNAL(clicked()), this, SLOT(on_clicked()));  \n    }  \n  \nprivate:  \n    QTimer *tm;  \n    long pauseMsecs;  \n    long intervalMsecs;  \n  \nsignals:  \n    void keyPressed(const QString &msg);  \n    void keyReleased(const QString &msg);  \n    void keyClicked(const QString &msg);  \n  \npublic slots:  \n    void on_pressed() { emit this->keyPressed(this->text());  \n                        tm->start(pauseMsecs); }  \n    void on_pressed_last() { emit this->keyPressed(this->text());  \n                             tm->setInterval(intervalMsecs); }  \n    void on_released() { tm->stop(); emit this->keyReleased(this->text()); }  \n    void on_clicked() { emit this->keyClicked(this->text()); }  \n}; \n```\n<br>\n这其中的定时器，是为了实现类似长按则连续输入的按键效果；\n\n这样的按钮类就可以在自己的信号Clickied()、Pressed()或Released()中夹带各种信息，使得槽函数能根据信息不同进行不同处理，这里夹带的是按钮上的文本，你也可以根据需求随意修改，夹带各种你想传递的信息。\n","slug":"Qt中槽函数如何获取按钮QPushButton的按钮文本","updated":1424003671000,"excerpt":"","_id":"v71pjf7p082fpda7","comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"Python","_id":"2gj15pr1hjo2nk4i","posts":["r59tahv35u5bsagz","cmpp03dhu2168hum","dgo03wo8kud7ck86","im8thm5mpmxwahta","a4b50agl6ahqqw36"]},{"name":"经验总结","_id":"9snvrpqugy5bh3af","posts":["r59tahv35u5bsagz"]},{"name":"JSON","_id":"vpyhogdns9y7m1je","posts":["cmpp03dhu2168hum"]},{"name":"解析器","_id":"vpmvwz4t35989vn4","posts":["cmpp03dhu2168hum"]},{"name":"PyQt","_id":"k47zffh4cn3ah628","posts":["lps0z94lgfqg8to8","m36sxb7zv6hst1vo","iojqbtoeapyouq6r"]},{"name":"资源文件","_id":"eyxzyjelqsu5107i","posts":["lps0z94lgfqg8to8"]},{"name":"qrc","_id":"1zpy0v3ei2x4mu5m","posts":["lps0z94lgfqg8to8"]},{"name":"无边框窗口","_id":"moltvr66n05aw7kx","posts":["m36sxb7zv6hst1vo"]},{"name":"任务栏","_id":"o3r3wbj1l5pol8s9","posts":["m36sxb7zv6hst1vo"]},{"name":"SVN","_id":"ej815tfkqs7dbd1y","posts":["8repd459bhfezxrr"]},{"name":"开发管理","_id":"i27bryk9t4xiwjia","posts":["8repd459bhfezxrr"]},{"name":"版本控制","_id":"nu5dfvhnfftjefd2","posts":["8repd459bhfezxrr"]},{"name":"Trunk","_id":"ogf4qiiee6qt8p4i","posts":["8repd459bhfezxrr"]},{"name":"Branch","_id":"slf39bz9kd1douoy","posts":["8repd459bhfezxrr"]},{"name":"Tags","_id":"o7ox2471j4974wqh","posts":["8repd459bhfezxrr"]},{"name":"Qt","_id":"iiitas3upf5je20f","posts":["ox3mcmopnjgge0sm","qbpm0blzp45xwkrm","933rhb2uqq92pz8s","n20avqzmna7uq9nj","q90zt77pcyyu1vva","xl211dtj01b2lpwb","ywlr643oxwdpds1a","v71pjf7p082fpda7"]},{"name":"QFontMetrics","_id":"8kc1135xxxsefy1z","posts":["ox3mcmopnjgge0sm"]},{"name":"QLabel","_id":"7ppkvypnjmsvcgcn","posts":["qbpm0blzp45xwkrm","n20avqzmna7uq9nj"]},{"name":"显示网络图片","_id":"4j7fglr2le02pfci","posts":["qbpm0blzp45xwkrm"]},{"name":"setVisible","_id":"m1ytgjfrrr5j6way","posts":["933rhb2uqq92pz8s"]},{"name":"setHidden","_id":"bdrsf2p7p2tfo2uk","posts":["933rhb2uqq92pz8s"]},{"name":"show","_id":"l00t24mp3qzs5075","posts":["933rhb2uqq92pz8s"]},{"name":"hide","_id":"a8fu3nr8z4i8pzm3","posts":["933rhb2uqq92pz8s"]},{"name":"close","_id":"zgmluu8ngqy1mul1","posts":["933rhb2uqq92pz8s"]},{"name":"QThread","_id":"w9n3d9s9971q698t","posts":["q90zt77pcyyu1vva"]},{"name":"ASCII","_id":"3gmqo90q56pdtth9","posts":["cpe4a5pngrq3mnvs"]},{"name":"Shell","_id":"05i6xsil6w4hdigz","posts":["83t46ret8vk0ow9p"]},{"name":"获取运行路径","_id":"69s3wq53hqbdg8by","posts":["83t46ret8vk0ow9p"]},{"name":"新起点","_id":"ebcfmvsuj589j76q","posts":["jqgtkotx1itxj908"]},{"name":"奋斗","_id":"r8v3abem3uo8ru9l","posts":["jqgtkotx1itxj908"]},{"name":"正则表达式","_id":"0g4uroo7usmvywzw","posts":["dgo03wo8kud7ck86"]},{"name":"main","_id":"3j1nxmfvxnx6atyb","posts":["im8thm5mpmxwahta"]},{"name":"窗口风格","_id":"3tmym37yxspi57sd","posts":["iojqbtoeapyouq6r"]},{"name":"assert","_id":"0u9nhcekonxoma2z","posts":["a4b50agl6ahqqw36"]},{"name":"百度云","_id":"vrr51ag39jkw7qmn","posts":["wygxm5b4rhsxjfwf"]},{"name":"网站备案","_id":"m9zlwtzw04pkqjrw","posts":["wygxm5b4rhsxjfwf"]},{"name":"delete","_id":"9r2t9396ra3aksao","posts":["xl211dtj01b2lpwb"]},{"name":"内存管理","_id":"5bf76ua1sc0caavy","posts":["xl211dtj01b2lpwb"]},{"name":"C++","_id":"th8bfwo92wk19pps","posts":["xl211dtj01b2lpwb"]},{"name":"QtWebkit","_id":"irjukdgyoos2qa84","posts":["ywlr643oxwdpds1a"]},{"name":"Git","_id":"1gz3cthbtt102e8e","posts":["u5srw1edrsyau2y3"]},{"name":"add","_id":"2ydf0o8rnid86cn0","posts":["u5srw1edrsyau2y3"]},{"name":"信号","_id":"irrucl4gtn3uqwwl","posts":["v71pjf7p082fpda7"]},{"name":"槽","_id":"8lhl3hpx77ayl9zw","posts":["v71pjf7p082fpda7"]}]}
{"Asset":[{"_id":"themes\\pacman\\source\\font\\FontAwesome.otf","path":"font/FontAwesome.otf","modified":true},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":true},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":true},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":true},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":true},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":true},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":true},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":true},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":true},{"_id":"themes\\pacman\\source\\img\\author.jpg","path":"img/author.jpg","modified":true},{"_id":"themes\\pacman\\source\\img\\copy_right.png","path":"img/copy_right.png","modified":true},{"_id":"themes\\pacman\\source\\img\\favicon.ico","path":"img/favicon.ico","modified":true},{"_id":"themes\\pacman\\source\\img\\logo.svg","path":"img/logo.svg","modified":true},{"_id":"themes\\pacman\\source\\img\\pacman.jpg","path":"img/pacman.jpg","modified":true},{"_id":"themes\\pacman\\source\\img\\to_top.png","path":"img/to_top.png","modified":true},{"_id":"themes\\pacman\\source\\js\\jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":true},{"_id":"themes\\pacman\\source\\js\\to_top.js","path":"js/to_top.js","modified":true},{"_id":"themes\\pacman\\source\\css\\style.styl","path":"css/style.styl","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\blank.gif","path":"fancybox/blank.gif","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":true},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":true},{"_id":"source\\_posts\\2015-01-17-PyQt之自定义无边框窗口遮盖任务栏显示问题\\2011091922270416.jpg","path":"2015/01/17/PyQt之自定义无边框窗口遮盖任务栏显示问题/2011091922270416.jpg","modified":true,"post_id":"g0svv9li2jpb6k3d","post_path":"2015/01/17/PyQt之自定义无边框窗口遮盖任务栏显示问题/"},{"_id":"source\\_posts\\2015-01-19-Qt字体大小的计算\\110211082116831.jpg","path":"2015/01/19/Qt字体大小的计算/110211082116831.jpg","modified":true,"post_id":"9wcfjw7eb82cle3n","post_path":"2015/01/19/Qt字体大小的计算/"},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考\\9213b07eca8065387d4c671896dda144ad348213.jpg","path":"2015/02/03/ASCII-字符表参考/9213b07eca8065387d4c671896dda144ad348213.jpg","modified":true,"post_id":"wtgogrza6xk7nnp3","post_path":"2015/02/03/ASCII-字符表参考/"},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考\\fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg","path":"2015/02/03/ASCII-字符表参考/fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg","modified":true,"post_id":"wtgogrza6xk7nnp3","post_path":"2015/02/03/ASCII-字符表参考/"},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio\\5e22d182jw1eowhbmlgsxj20m80gotcg.jpg","path":"2015/02/03/One-night-in-Mok-s-Studio/5e22d182jw1eowhbmlgsxj20m80gotcg.jpg","modified":true,"post_id":"zyq7op9lj65cukal","post_path":"2015/02/03/One-night-in-Mok-s-Studio/"},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio\\5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg","path":"2015/02/03/One-night-in-Mok-s-Studio/5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg","modified":true,"post_id":"zyq7op9lj65cukal","post_path":"2015/02/03/One-night-in-Mok-s-Studio/"},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南\\687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png","path":"2015/02/03/Python正则表达式指南/687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png","modified":true,"post_id":"n9k2aom6k5vc843e","post_path":"2015/02/03/Python正则表达式指南/"},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南\\687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png","path":"2015/02/03/Python正则表达式指南/687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png","modified":true,"post_id":"n9k2aom6k5vc843e","post_path":"2015/02/03/Python正则表达式指南/"},{"_id":"source\\_posts\\2015-03-06-CSS3快速弄明白border-image\\2010-06-21_103813.png","path":"2015/03/06/CSS3快速弄明白border-image/2010-06-21_103813.png","modified":true,"post_id":"b68twshop34rdtzj","post_path":"2015/03/06/CSS3快速弄明白border-image/"},{"_id":"source\\_posts\\2015-03-06-CSS3快速弄明白border-image\\border.jpg","path":"2015/03/06/CSS3快速弄明白border-image/border.jpg","modified":true,"post_id":"b68twshop34rdtzj","post_path":"2015/03/06/CSS3快速弄明白border-image/"},{"_id":"source\\_posts\\2015-03-06-CSS3快速弄明白border-image\\jiexibtn.jpg","path":"2015/03/06/CSS3快速弄明白border-image/jiexibtn.jpg","modified":true,"post_id":"b68twshop34rdtzj","post_path":"2015/03/06/CSS3快速弄明白border-image/"},{"_id":"source\\_posts\\2015-03-06-CSS3快速弄明白border-image\\sliceHere.png","path":"2015/03/06/CSS3快速弄明白border-image/sliceHere.png","modified":true,"post_id":"b68twshop34rdtzj","post_path":"2015/03/06/CSS3快速弄明白border-image/"},{"_id":"source\\_posts\\2015-03-06-CSS3快速弄明白border-image\\whiteButton.png","path":"2015/03/06/CSS3快速弄明白border-image/whiteButton.png","modified":true,"post_id":"b68twshop34rdtzj","post_path":"2015/03/06/CSS3快速弄明白border-image/"},{"_id":"source\\_posts\\2015-05-10-自定义QTabWidget样式\\result.png","path":"2015/05/10/自定义QTabWidget样式/result.png","modified":true,"post_id":"iqthgkqq6c5mvs5k","post_path":"2015/05/10/自定义QTabWidget样式/"},{"_id":"source\\_posts\\2015-05-10-自定义QTabWidget样式\\result2.png","path":"2015/05/10/自定义QTabWidget样式/result2.png","modified":true,"post_id":"iqthgkqq6c5mvs5k","post_path":"2015/05/10/自定义QTabWidget样式/"},{"_id":"source\\_posts\\2015-05-10-自定义QTabWidget样式\\tab-normal.png","path":"2015/05/10/自定义QTabWidget样式/tab-normal.png","modified":true,"post_id":"iqthgkqq6c5mvs5k","post_path":"2015/05/10/自定义QTabWidget样式/"},{"_id":"source\\_posts\\2015-05-10-自定义QTabWidget样式\\tab-selected.png","path":"2015/05/10/自定义QTabWidget样式/tab-selected.png","modified":true,"post_id":"iqthgkqq6c5mvs5k","post_path":"2015/05/10/自定义QTabWidget样式/"},{"_id":"source\\_posts\\2015-05-11-自定义QScrollBar样式\\QScrollBar-qss.png","path":"2015/05/11/自定义QScrollBar样式/QScrollBar-qss.png","modified":true,"post_id":"jyt1o9wvks4f88sb","post_path":"2015/05/11/自定义QScrollBar样式/"},{"_id":"source\\_posts\\2015-05-11-自定义QScrollBar样式\\QScrollBar-qss2.png","path":"2015/05/11/自定义QScrollBar样式/QScrollBar-qss2.png","modified":true,"post_id":"jyt1o9wvks4f88sb","post_path":"2015/05/11/自定义QScrollBar样式/"}],"Cache":[{"_id":"scaffolds\\draft.md","mtime":1431306846000},{"_id":"scaffolds\\page.md","mtime":1431306846000},{"_id":"scaffolds\\photo.md","mtime":1431306846000},{"_id":"scaffolds\\post.md","mtime":1431306846000},{"_id":"scaffolds\\repost.md","mtime":1431306846000},{"_id":"themes\\pacman\\README.md","mtime":1431306848000},{"_id":"themes\\pacman\\LICENSE","mtime":1431306848000},{"_id":"themes\\pacman\\_config.yml","mtime":1431306848000},{"_id":"themes\\pacman\\scripts\\fancybox.js","mtime":1431306848000},{"_id":"themes\\pacman\\languages\\zh-CN.yml","mtime":1431306848000},{"_id":"themes\\pacman\\languages\\zh-TW.yml","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\archive.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\languages\\default.yml","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\category.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\index.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\layout.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\page.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\post.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\tag.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_widget\\archive.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_widget\\rss.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_widget\\tag.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_widget\\tagcloud.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_widget\\links.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_widget\\category.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\after_footer.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\archive.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\article.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\categories.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\head.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\footer.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\header.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\pagination.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\google_analytics.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\search.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\sidebar.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\tags.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\to_top.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\post\\article.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\post\\catetags.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\post\\comment.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\post\\footer.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\post\\gallery.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\post\\header.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\post\\jiathis.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\layout\\_partial\\post\\pagination.ejs","mtime":1431306848000},{"_id":"themes\\pacman\\source\\font\\FontAwesome.otf","mtime":1431306849000},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.eot","mtime":1431306849000},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.svg","mtime":1431306849000},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.ttf","mtime":1431306849000},{"_id":"themes\\pacman\\source\\font\\coveredbyyourgrace-webfont.woff","mtime":1431306849000},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.eot","mtime":1431306849000},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.svg","mtime":1431306849000},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.ttf","mtime":1431306849000},{"_id":"themes\\pacman\\source\\font\\fontawesome-webfont.woff","mtime":1431306849000},{"_id":"themes\\pacman\\source\\img\\author.jpg","mtime":1431306849000},{"_id":"themes\\pacman\\source\\img\\copy_right.png","mtime":1431306849000},{"_id":"themes\\pacman\\source\\img\\favicon.ico","mtime":1431306849000},{"_id":"themes\\pacman\\source\\img\\logo.svg","mtime":1431306849000},{"_id":"themes\\pacman\\source\\img\\pacman.jpg","mtime":1431306849000},{"_id":"themes\\pacman\\source\\img\\to_top.png","mtime":1431306849000},{"_id":"themes\\pacman\\source\\js\\jquery-2.1.0.min.js","mtime":1431306849000},{"_id":"themes\\pacman\\source\\js\\to_top.js","mtime":1431306849000},{"_id":"themes\\pacman\\source\\css\\style.styl","mtime":1431306848000},{"_id":"themes\\pacman\\source\\css\\_base\\code.styl","mtime":1431306848000},{"_id":"themes\\pacman\\source\\css\\_base\\font.styl","mtime":1431306848000},{"_id":"themes\\pacman\\source\\css\\_base\\public.styl","mtime":1431306848000},{"_id":"themes\\pacman\\source\\css\\_base\\variable.styl","mtime":1431306848000},{"_id":"themes\\pacman\\source\\css\\_partial\\aside.styl","mtime":1431306848000},{"_id":"themes\\pacman\\source\\css\\_partial\\duoshuo.styl","mtime":1431306848000},{"_id":"themes\\pacman\\source\\css\\_partial\\footer.styl","mtime":1431306848000},{"_id":"themes\\pacman\\source\\css\\_partial\\gallery.styl","mtime":1431306848000},{"_id":"themes\\pacman\\source\\css\\_partial\\header.styl","mtime":1431306848000},{"_id":"themes\\pacman\\source\\css\\_partial\\helper.styl","mtime":1431306848000},{"_id":"themes\\pacman\\source\\css\\_partial\\index.styl","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\blank.gif","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_loading.gif","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_overlay.png","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_sprite.png","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.js","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\jquery.fancybox.css","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\fancybox_buttons.png","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-media.js","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","mtime":1431306848000},{"_id":"themes\\pacman\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","mtime":1431306848000},{"_id":"themes\\pacman\\source\\css\\_partial\\article.styl","mtime":1431306848000},{"_id":"source\\_posts\\2015-01-14-Python经验总结.md","mtime":1431306846000},{"_id":"source\\_posts\\2015-01-15-JSON解析器小练习.md","mtime":1431306846000},{"_id":"source\\_posts\\2015-01-16-PyQt4中使用qrc资源文件.md","mtime":1431306846000},{"_id":"source\\_posts\\2015-01-17-PyQt之自定义无边框窗口遮盖任务栏显示问题.md","mtime":1431306846000},{"_id":"source\\_posts\\2015-01-18-开发管理中的版本管理Trunk-Branch和Tags.md","mtime":1431306846000},{"_id":"source\\_posts\\2015-01-19-Qt字体大小的计算.md","mtime":1431306846000},{"_id":"source\\_posts\\2015-01-20-Qt-之-show-hide-setVisible-setHidden-close-等小结.md","mtime":1431306846000},{"_id":"source\\_posts\\2015-01-22-QLabel几种小技巧.md","mtime":1431306846000},{"_id":"source\\_posts\\2015-01-21-Qt-QLabel-显示网络图片.md","mtime":1431306846000},{"_id":"source\\_posts\\2015-01-23-Qt开发者关于QThread的咆哮.md","mtime":1431306846000},{"_id":"source\\_posts\\2015-02-03-Linux-Shell-获取当前正在执行脚本的绝对路径.md","mtime":1431768472000},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考.md","mtime":1431306846000},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-04-Python-中-if-name-main-用法解析.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-06-Python-assert-用法.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-05-PyQt-窗口风格.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-12-为上云而备案.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-12-从Qt的delete说开来.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-13-QtWebkit-使用方法.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-15-Git-add-命令.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-15-Qt中槽函数如何获取按钮QPushButton的按钮文本.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-27-Qt-mapToGlobal-以及-mapToParent-理解要点.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-03-02-解决-Git-里-fatal-the-remote-end-hung-up-unexpectedly.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-03-04-在QtWebKit-QWebView中显示透明背景的网页.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-03-05-Python模块之uuid.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-03-06-CSS3快速弄明白border-image.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-03-07-Python格式化输出百分比.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-03-10-Murphy's-Law.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-03-11-Qt的setMouseTracking使用.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-03-13-Python-time-模块详解.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-03-14-解决UnicodeEncodeError-ascii-codec-can-t-encode-characters-in-position问题.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-03-03-Python增强的格式化字符串format函数.md","mtime":1431306847000},{"_id":"source\\_posts\\2015-03-15-Python使用正则表达式获得html标签数据.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-03-16-Qt之正则表达式.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-03-09-QT-获取系统屏幕分辨率.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-03-17-绘制支持富文本带阴影自适应大小的Tooltips.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-03-19-QLabel中html标签的使用.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-03-18-Python中计算字符串中某个字符个数的4种方法.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-03-08-Python对小数进行除法运算的正确方法示例.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-03-20-关于Python文件操作.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-04-01-Python使用UUID库生成唯一ID.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-04-19-Python单例模式.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-04-25-CSS禁止选择文本功能（兼容IE-火狐等浏览器）.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-04-27-Python分割路径与文件名分隔符.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-04-30-关于Shell的补零，用printf来格式化数字列。.md","mtime":1431774226000},{"_id":"source\\_posts\\2015-05-01-shell中-和-的使用方法.md","mtime":1431773937000},{"_id":"source\\_posts\\2015-05-02-shell编程中的date用法.md","mtime":1431769833000},{"_id":"source\\_posts\\2015-05-03-Python注释.md","mtime":1431768350000},{"_id":"source\\_posts\\2015-05-04-Qt剪贴板操作.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-05-05-py2exe-error-MSVCP90-dll-No-such-file-or-directory.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-05-06-py2exe使用方法.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-05-07-QT内置的ICON资源.md","mtime":1431437599000},{"_id":"source\\_posts\\2015-05-08-PyChecker使用指南.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-05-09-Notepad-命令行参数.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-05-10-自定义QTabWidget样式.md","mtime":1436690412000},{"_id":"source\\_posts\\2015-04-20-Python的lambda匿名函数.md","mtime":1431306848000},{"_id":"source\\_posts\\2015-05-13-Python字符串格式化千分位逗号分隔.md","mtime":1431766779000},{"_id":"source\\_posts\\2015-05-12-Qt重写paintEvent绘制窗体阴影.md","mtime":1432714685000},{"_id":"source\\_posts\\2015-05-11-自定义QScrollBar样式.md","mtime":1436689636000},{"_id":"source\\_posts\\2015-05-14-Qt中鼠标穿透的实现.md","mtime":1431767187000},{"_id":"source\\_posts\\2015-05-15-QTimer和QThread的调度时间精度.md","mtime":1431767634000},{"_id":"source\\_posts\\2015-05-16-Qt字符串显示不全显示省略号的实现.md","mtime":1432714663000},{"_id":"source\\_posts\\2015-07-02-Qt非window子窗体的透明度设置.md","mtime":1436795408000},{"_id":"source\\_posts\\2015-07-03-解决-Python-ConfigParser-的文件编码问题.md","mtime":1436794515000},{"_id":"source\\_posts\\2015-07-04-单例模式及C-实现代码.md","mtime":1436794237000},{"_id":"source\\_posts\\2015-07-06-Qt制作Aero特效窗口.md","mtime":1436792913000},{"_id":"source\\_posts\\2015-07-05-如何修改Qt标准对话框的文字-例如-英文改成中文.md","mtime":1436793539000},{"_id":"source\\_posts\\2015-07-07-Python中判断是否为Windows7或更高版本.md","mtime":1436691197000},{"_id":"source\\_posts\\2015-07-08-PyQt中利用winapi禁用系统默认阴影.md","mtime":1436690990000},{"_id":"source\\_posts\\2015-07-09-自定义窗口淡出淡入动画效果.md","mtime":1436690157000},{"_id":"source\\_posts\\2015-07-10-Qt里使QTooltips显示禁用Html支持.md","mtime":1436689272000},{"_id":"source\\_posts\\2015-07-11-Python中计算一个整形的位数.md","mtime":1436688166000},{"_id":"source\\_posts\\2015-07-12-Python单例模式实例.md","mtime":1436687777000},{"_id":"source\\_posts\\2015-07-12-自定义QScrollBar实例.md","mtime":1436689371000},{"_id":"source\\_posts\\2015-07-13-C-中获取系统变量的几种方法.md","mtime":1436751203000},{"_id":"source\\_posts\\2015-07-01-C-之类的前置声明.md","mtime":1436795788000},{"_id":"source\\_posts\\2015-01-19-Qt字体大小的计算\\110211082116831.jpg","mtime":1431306846000},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考\\fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg","mtime":1431306846000},{"_id":"source\\_posts\\2015-02-03-ASCII-字符表参考\\9213b07eca8065387d4c671896dda144ad348213.jpg","mtime":1431306846000},{"_id":"source\\_posts\\2015-01-17-PyQt之自定义无边框窗口遮盖任务栏显示问题\\2011091922270416.jpg","mtime":1431306846000},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio\\5e22d182jw1eowhbmlgsxj20m80gotcg.jpg","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-03-One-night-in-Mok-s-Studio\\5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg","mtime":1431306847000},{"_id":"source\\_posts\\2015-03-06-CSS3快速弄明白border-image\\2010-06-21_103813.png","mtime":1431306847000},{"_id":"source\\_posts\\2015-03-06-CSS3快速弄明白border-image\\border.jpg","mtime":1431306847000},{"_id":"source\\_posts\\2015-03-06-CSS3快速弄明白border-image\\jiexibtn.jpg","mtime":1431306847000},{"_id":"source\\_posts\\2015-03-06-CSS3快速弄明白border-image\\whiteButton.png","mtime":1431306847000},{"_id":"source\\_posts\\2015-03-06-CSS3快速弄明白border-image\\sliceHere.png","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南\\687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png","mtime":1431306847000},{"_id":"source\\_posts\\2015-02-03-Python正则表达式指南\\687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png","mtime":1431306847000},{"_id":"source\\_posts\\2015-05-10-自定义QTabWidget样式\\result.png","mtime":1431323034000},{"_id":"source\\_posts\\2015-05-10-自定义QTabWidget样式\\tab-normal.png","mtime":1431323034000},{"_id":"source\\_posts\\2015-05-10-自定义QTabWidget样式\\result2.png","mtime":1436690330000},{"_id":"source\\_posts\\2015-05-10-自定义QTabWidget样式\\tab-selected.png","mtime":1431323034000},{"_id":"source\\_posts\\2015-05-11-自定义QScrollBar样式\\QScrollBar-qss.png","mtime":1431323034000},{"_id":"source\\_posts\\2015-05-11-自定义QScrollBar样式\\QScrollBar-qss2.png","mtime":1433510594000}],"Category":[{"name":"PyQt","_id":"ccfn720olj32wb0n","posts":["mjn5obsgcnd6detm","g0svv9li2jpb6k3d","sot44szsa3p7lq26","n5xovi3r15js9fua","3uxh60a7w5jaykt8","jyyef3adlbkolk92","voe883omz8fn86ff","jplx6ppamxqho8fn","30i2jzydeq93rdci"]},{"name":"SVN","_id":"l3vrhs48n4vgyrre","posts":["6pusrcj3mb4g3bfv"]},{"name":"Qt","_id":"2zuml5ffoy5vkypb","posts":["9wcfjw7eb82cle3n","0lbqdvv8clo2h693","u1bsjt2ubkr67a8v","ue0pva1rwlnt6ls9","j573lu2v18wwjwts","z3oiy249wv9ik750","q3f4s1db7kqdia0y","fyuuojeoi40p5joe","vhifgrnxjej1xmpm","1ozetm98t5y3cx4g","0i7fnqmj2dj2jxtz","0gxvdboiq6ljput7","74bft70ix6wn7pp0","hag00ij41u20ccja","qkqph5e8290sjwo5","kxbs8lxoliuk9vo5","iqthgkqq6c5mvs5k","jyt1o9wvks4f88sb","p8sadt787a28weuo","jdez5mqfltze4mqw","at03tlqg3qbrcwt7","suf0b0jxc2mav0dc","orlmodgx70hawt21"]},{"name":"Shell","_id":"ve0hssdkfwgg7gho","posts":["3jl34h1ml4zv1nnz","wdmdc6cpxuylhg2v","j4nzm2sasrmujc1u","65y6y95ikqvh3tc3"]},{"name":"杂类","_id":"x8qrf2i2578tohs4","posts":["wtgogrza6xk7nnp3","1zcfq9mqowwsacrg"]},{"name":"猿人日常","_id":"25rjad5qpnh3qcyr","posts":["zyq7op9lj65cukal","wbd5mbc7de90igql","8ozldxq0q2popr6a","bwlg5wz4y1qjwtg4"]},{"name":"Python","_id":"ldi4kaat0baj4vp1","posts":["n9k2aom6k5vc843e","j9ngn4ixnfc36jho","tm4uywu8k16m65ka","74uefl28uuzudds2","lz3wn0v5waa6eu82","c12stl7ndbvue5an","dmw1vsbuvjkr6aye","v4y50s8d8zqnocvv","sfc4m8edt5bfx7eo","89xw3cwzeaosg4on","dq6dkp99qtivft8q","r2390x5x5rkpm10s","iie2w64o4z2snr3b","hk0vo11eb4hkkkny","icj6qh6wsdnnh8sv","2zxi8tsyde0uloti","2dw6fsd7zq9ezqh8","1sn562dxluf91hov","bwjeo26sxe9v4x6a","5zjqpuy8t13fyoj4","u5a10r1jwq1rh3td","ep5heraxgxkffo5l","3sntfkg41iqb2szk","708dycs0c6vybjzy","xltntm2zyn4jtnrv","odrvcxd4589akkhb"]},{"name":"Git","_id":"g4jvbrc8twywlctz","posts":["jtob0zmy721k28xg","a5ymqm3pmrgx8c1m"]},{"name":"CSS","_id":"eoozibpfeshi5a5g","posts":["b68twshop34rdtzj","kn75l7qesxdpjz8p"]},{"name":"C++","_id":"7szs0nee4z8h0y8w","posts":["fszvq0tnl8mvrvc4","dlfztt47qoy3ge9r","ba0f9uzvs9jm2kuk"]}],"Page":[],"Post":[{"title":"PyQt4中使用qrc资源文件","date":1421385470000,"categories":["ccfn720olj32wb0n"],"tags":["nmldk4hu366t8ktw","sgppjax8q005utka","crxl9ld2ghq8izj9"],"content":"<p>Qt提供了非常好用的<code>rcc</code>系统，尤其当系统使用了非常多的图片要管理的时候。Qt管理的方式就是使用qrc文件。</p>\n<ol>\n<li>在QtDesigner中可以直接建立qrc文件。</li>\n<li><p>编辑好自己的qrc文件之后，在<code>python目录/Lib/site-packages/PyQt4</code>下可以找到<code>pyrcc4.exe</code>文件，这个文件就是主角了。</p>\n<p><code>pyrcc4 -o D:/form_rc.py D:/form.qrc</code></p>\n</li>\n<li>然后它就会在D盘下建立form.qrc转换后的form_rc.py文件了。然后在PyQt中直接引用就行了。<br><br></li>\n</ol>\n<hr>\n<p>也可以用下面的代码，ui文件和qrc文件都可以转换：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\">reload(sys)</div><div class=\"line\">sys.setdefaultencoding(<span class=\"string\">\"utf-8\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'.'</span>):</div><div class=\"line\">    <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files:</div><div class=\"line\">        <span class=\"keyword\">if</span> file.endswith(<span class=\"string\">'.ui'</span>):</div><div class=\"line\">            os.system(<span class=\"string\">'pyuic4 -o ui_%s.py %s'</span> % (file.rsplit(<span class=\"string\">'.'</span>, <span class=\"number\">1</span>)[<span class=\"number\">0</span>], root + <span class=\"string\">'\\\\'</span> + file))</div><div class=\"line\">        <span class=\"keyword\">elif</span> file.endswith(<span class=\"string\">'.qrc'</span>):</div><div class=\"line\">            os.system(<span class=\"string\">'pyrcc4 -o %s_rc.py %s'</span> % (file.rsplit(<span class=\"string\">'.'</span>, <span class=\"number\">1</span>)[<span class=\"number\">0</span>], root + <span class=\"string\">'\\\\'</span> + file))</div></pre></td></tr></table></figure>\n\n<p>放到当前目录下执行即可。</p>\n","source":"_posts/2015-01-16-PyQt4中使用qrc资源文件.md","raw":"title: PyQt4中使用qrc资源文件\ndate: 2015-01-16 13:17:50\ncategories:\n- PyQt\ntags:\n- PyQt\n- 资源文件\n- qrc\n---\nQt提供了非常好用的`rcc`系统，尤其当系统使用了非常多的图片要管理的时候。Qt管理的方式就是使用qrc文件。\n\n1. 在QtDesigner中可以直接建立qrc文件。\n2. 编辑好自己的qrc文件之后，在`python目录/Lib/site-packages/PyQt4`下可以找到`pyrcc4.exe`文件，这个文件就是主角了。\n\n   `pyrcc4 -o D:/form_rc.py D:/form.qrc`\n3. 然后它就会在D盘下建立form.qrc转换后的form_rc.py文件了。然后在PyQt中直接引用就行了。\n<br>\n\n----------\n也可以用下面的代码，ui文件和qrc文件都可以转换：\n```python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\nreload(sys)\nsys.setdefaultencoding(\"utf-8\")\n\nfor root, dirs, files in os.walk('.'):\n    for file in files:\n        if file.endswith('.ui'):\n            os.system('pyuic4 -o ui_%s.py %s' % (file.rsplit('.', 1)[0], root + '\\\\' + file))\n        elif file.endswith('.qrc'):\n            os.system('pyrcc4 -o %s_rc.py %s' % (file.rsplit('.', 1)[0], root + '\\\\' + file))\n```\n放到当前目录下执行即可。\n","slug":"PyQt4中使用qrc资源文件","updated":1431306846000,"excerpt":"","_id":"mjn5obsgcnd6detm","comments":true,"layout":"post","photos":[],"link":""},{"title":"PyQt之自定义无边框窗口遮盖任务栏显示问题","date":1421467922000,"categories":["ccfn720olj32wb0n"],"tags":["nmldk4hu366t8ktw","53pw2lh340xusfjq","8ndaohvxlk2lql1z"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/caomingongli/archive/2011/09/19/2181842.html\" title=\"http://www.cnblogs.com/caomingongli/archive/2011/09/19/2181842.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/caomingongli/archive/2011/09/19/2181842.html</a></p>\n</blockquote>\n<p>问题：用PyQt来模仿实现Web桌面的问题之一，便是设置无边框窗口时遮盖任务栏的问题。<br><br>解决方案：</p>\n<ul>\n<li>设置窗口标记，实现无边框效果</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 设置窗口标记（无边框）</span></div><div class=\"line\">self.setWindowFlags(QtCore.Qt.FramelessWindowHint)</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>覆盖实现最大化函数<br><br>得到屏幕可显示尺寸，需要用到QDeskWidget类的availableGeometry函数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 得到桌面控件</span></div><div class=\"line\">desktop = QtGui.QApplication.desktop()</div><div class=\"line\"><span class=\"comment\"># 得到屏幕可显示尺寸</span></div><div class=\"line\">rect = desktop.availableGeometry()</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>设置窗口尺寸为屏幕可显示尺寸并显示</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 设置窗口尺寸</span></div><div class=\"line\">self.setGeometry(rect)</div><div class=\"line\"><span class=\"comment\"># 设置窗口显示</span></div><div class=\"line\">self.show()</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>实现效果<br><img src=\"2011091922270416.jpg\" alt=\"\"></li>\n</ul>\n<p><br></p>\n<ul>\n<li>示例程序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># coding=gbk</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 导入模块</span></div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">from</span> PyQt4 <span class=\"keyword\">import</span> QtGui,QtCore</div><div class=\"line\"><span class=\"comment\">######################################### 自定义窗口类 ########################################</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyWindow</span><span class=\"params\">(QtGui.QMainWindow)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''自定义窗口类'''</span></div><div class=\"line\">    <span class=\"comment\">###################################### 构造、析构函数 ###################################</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,parent=None)</span>:</span></div><div class=\"line\">        <span class=\"string\">'''构造函数'''</span></div><div class=\"line\">        <span class=\"comment\"># 调用父类构造函数</span></div><div class=\"line\">        super(MyWindow,self).__init__(parent)</div><div class=\"line\">        <span class=\"comment\"># 设置窗口标记（无边框|任务栏右键菜单）</span></div><div class=\"line\">        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowSystemMenuHint)</div><div class=\"line\">        <span class=\"comment\"># 便于显示，设置窗口背景颜色(采用QSS)</span></div><div class=\"line\">        self.setStyleSheet(<span class=\"string\">'''background-color:cyan;'''</span>)</div><div class=\"line\">    <span class=\"comment\">####################################### 覆盖函数 #######################################    </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">showMaximized</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">'''最大化'''</span></div><div class=\"line\">        <span class=\"comment\"># 得到桌面控件</span></div><div class=\"line\">        desktop = QtGui.QApplication.desktop()</div><div class=\"line\">        <span class=\"comment\"># 得到屏幕可显示尺寸</span></div><div class=\"line\">        rect = desktop.availableGeometry()</div><div class=\"line\">        <span class=\"comment\"># 设置窗口尺寸</span></div><div class=\"line\">        self.setGeometry(rect)</div><div class=\"line\">        <span class=\"comment\"># 设置窗口显示</span></div><div class=\"line\">        self.show()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">########################################### 主函数 #########################################        </span></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    <span class=\"string\">'''主函数'''</span></div><div class=\"line\">    <span class=\"comment\"># 声明变量</span></div><div class=\"line\">    app = QtGui.QApplication(sys.argv)</div><div class=\"line\">    <span class=\"comment\"># 创建窗口</span></div><div class=\"line\">    window = MyWindow()</div><div class=\"line\">    <span class=\"comment\"># 调用最大化显示</span></div><div class=\"line\">    window.showMaximized()</div><div class=\"line\">    <span class=\"comment\"># 应用程序事件循环</span></div><div class=\"line\">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-01-17-PyQt之自定义无边框窗口遮盖任务栏显示问题.md","raw":"title: \"PyQt之自定义无边框窗口遮盖任务栏显示问题\"\ndate: 2015-01-17 12:12:02\ncategories:\n- PyQt\ntags:\n- PyQt\n- 无边框窗口\n- 任务栏\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/caomingongli/archive/2011/09/19/2181842.html](http://www.cnblogs.com/caomingongli/archive/2011/09/19/2181842.html \"http://www.cnblogs.com/caomingongli/archive/2011/09/19/2181842.html\")\n\n问题：用PyQt来模仿实现Web桌面的问题之一，便是设置无边框窗口时遮盖任务栏的问题。<br>\n解决方案：\n- 设置窗口标记，实现无边框效果\n```python\n# 设置窗口标记（无边框）\nself.setWindowFlags(QtCore.Qt.FramelessWindowHint)\n```\n<br>\n- 覆盖实现最大化函数<br>\n得到屏幕可显示尺寸，需要用到QDeskWidget类的availableGeometry函数\n```python\n# 得到桌面控件\ndesktop = QtGui.QApplication.desktop()\n# 得到屏幕可显示尺寸\nrect = desktop.availableGeometry()\n```\n<br>\n- 设置窗口尺寸为屏幕可显示尺寸并显示\n```python\n# 设置窗口尺寸\nself.setGeometry(rect)\n# 设置窗口显示\nself.show()\n```\n<br>\n- 实现效果\n![](2011091922270416.jpg)\n\n<br>\n- 示例程序\n```python\n# coding=gbk\n\n# 导入模块\nimport sys\nfrom PyQt4 import QtGui,QtCore\n######################################### 自定义窗口类 ########################################\nclass MyWindow(QtGui.QMainWindow):\n    '''自定义窗口类'''\n    ###################################### 构造、析构函数 ###################################\n    def __init__(self,parent=None):\n        '''构造函数'''\n        # 调用父类构造函数\n        super(MyWindow,self).__init__(parent)\n        # 设置窗口标记（无边框|任务栏右键菜单）\n        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowSystemMenuHint)\n        # 便于显示，设置窗口背景颜色(采用QSS)\n        self.setStyleSheet('''background-color:cyan;''')\n    ####################################### 覆盖函数 #######################################    \n    def showMaximized(self):\n        '''最大化'''\n        # 得到桌面控件\n        desktop = QtGui.QApplication.desktop()\n        # 得到屏幕可显示尺寸\n        rect = desktop.availableGeometry()\n        # 设置窗口尺寸\n        self.setGeometry(rect)\n        # 设置窗口显示\n        self.show()\n\n########################################### 主函数 #########################################        \nif __name__ == \"__main__\":\n    '''主函数'''\n    # 声明变量\n    app = QtGui.QApplication(sys.argv)\n    # 创建窗口\n    window = MyWindow()\n    # 调用最大化显示\n    window.showMaximized()\n    # 应用程序事件循环\n    sys.exit(app.exec_())\n```\n","slug":"PyQt之自定义无边框窗口遮盖任务栏显示问题","updated":1431306846000,"excerpt":"","_id":"g0svv9li2jpb6k3d","comments":true,"layout":"post","photos":[],"link":""},{"title":"开发管理中的版本管理Trunk,Branch和Tags","date":1421583281000,"categories":["l3vrhs48n4vgyrre"],"tags":["evvgdtn5pqsys78s","gexy9pwbln4jsza2","az0s3islrhe48ovk","z8m8aoivyi0ctrfb","s7wumccbwq84eiez","075706iaeqolbwny"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.sina.com.cn/s/blog_49a94d1b0100r7id.html\" title=\"http://blog.sina.com.cn/s/blog_49a94d1b0100r7id.html\" target=\"_blank\" rel=\"external\">http://blog.sina.com.cn/s/blog_49a94d1b0100r7id.html</a></p>\n</blockquote>\n<p><code>trunk</code>:主线，开发过程中的工作目录</p>\n<p><code>branches</code>:支线，临时分支，定制化需求<br>branches/OtasApp001<br>branches/OtasApp002</p>\n<p><code>tags</code>:发布目录，不做修改<br>tags/release-1.0<br>tags/release-1.1</p>\n<p><code>场景一</code>：<br>产品开发已经基本完成，并且通过很严格的测试，这时候我们就想发布我们的1.0版本,不再提交代码<br><code>svn copy svn://server/trunk svn://server/tags/release-1.0 -m &quot;1.0 released&quot;</code></p>\n<p><code>场景二</code>：<br>有一个客户想对产品做定制，我们可以从已发布库中选择一个版本，做为起点来开发<br><code>svn copy svn://server/tags/release-1.0 svn://server/branches/order009 -m &quot;定单009&quot;</code></p>\n<p><code>场景三</code>：<br>有一天，突然在trunk下的core中发现一个致命的bug,那么所有的branches一定也一样，这时需要进行分支合并</p>\n<ol>\n<li><code>svn -r 148:149 merge svn://server/trunk branches/order008</code></li>\n<li><code>svn -r 148:149 merge svn://server/trunk branches/order009</code><br>其中<code>148</code>和<code>149</code>是两次修改的版本号</li>\n</ol>\n","source":"_posts/2015-01-18-开发管理中的版本管理Trunk-Branch和Tags.md","raw":"title: \"开发管理中的版本管理Trunk,Branch和Tags\"\ndate: 2015-01-18 20:14:41\ncategories:\n- SVN\ntags:\n- SVN\n- 开发管理\n- 版本控制\n- Trunk\n- Branch\n- Tags\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.sina.com.cn/s/blog_49a94d1b0100r7id.html](http://blog.sina.com.cn/s/blog_49a94d1b0100r7id.html \"http://blog.sina.com.cn/s/blog_49a94d1b0100r7id.html\")\n\n`trunk`:主线，开发过程中的工作目录\n\n`branches`:支线，临时分支，定制化需求\nbranches/OtasApp001\nbranches/OtasApp002\n\n`tags`:发布目录，不做修改\ntags/release-1.0\ntags/release-1.1\n\n`场景一`：\n产品开发已经基本完成，并且通过很严格的测试，这时候我们就想发布我们的1.0版本,不再提交代码\n`svn copy svn://server/trunk svn://server/tags/release-1.0 -m \"1.0 released\"`\n\n`场景二`：\n有一个客户想对产品做定制，我们可以从已发布库中选择一个版本，做为起点来开发\n`svn copy svn://server/tags/release-1.0 svn://server/branches/order009 -m \"定单009\"`\n\n`场景三`：\n有一天，突然在trunk下的core中发现一个致命的bug,那么所有的branches一定也一样，这时需要进行分支合并\n1. `svn -r 148:149 merge svn://server/trunk branches/order008`\n2. `svn -r 148:149 merge svn://server/trunk branches/order009`\n其中`148`和`149`是两次修改的版本号\n","slug":"开发管理中的版本管理Trunk-Branch和Tags","updated":1431306846000,"excerpt":"","_id":"6pusrcj3mb4g3bfv","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt 字体大小的计算","date":1421635030000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","qsthc0q63bw2486c"],"content":"<p><br></p>\n<h2 id=\"计算字符串或者字符宽度的系统函数有：\">计算字符串或者字符宽度的系统函数有：</h2>\n<h3 id=\"QLabel::fontMetrics()-width(QString_s):_获取字符串s的总像素宽度。\">QLabel::fontMetrics().width(QString s): 获取字符串s的总像素宽度。</h3>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">int QFontMetrics::width ( const QString & <span class=\"keyword\">text</span>, int <span class=\"built_in\">len</span> = -<span class=\"number\">1</span> ) const</div><div class=\"line\"></div><div class=\"line\">Returns <span class=\"operator\">the</span> width <span class=\"operator\">in</span> pixels <span class=\"operator\">of</span> <span class=\"operator\">the</span> <span class=\"keyword\">first</span> <span class=\"built_in\">len</span> <span class=\"keyword\">characters</span> <span class=\"operator\">of</span> <span class=\"keyword\">text</span>. If <span class=\"built_in\">len</span> is negative (<span class=\"operator\">the</span> default), <span class=\"operator\">the</span> entire <span class=\"keyword\">string</span> is used.</div><div class=\"line\"></div><div class=\"line\">Note that this <span class=\"built_in\">value</span> is <span class=\"operator\">not</span> equal <span class=\"built_in\">to</span> boundingRect().width(); boundingRect() returns <span class=\"operator\">a</span> rectangle describing <span class=\"operator\">the</span> pixels this <span class=\"keyword\">string</span> will cover whereas width() returns <span class=\"operator\">the</span> distance <span class=\"built_in\">to</span> where <span class=\"operator\">the</span> next <span class=\"keyword\">string</span> should be drawn.</div><div class=\"line\"></div><div class=\"line\">See also boundingRect().</div></pre></td></tr></table></figure>\n\n<h3 id=\"QLabel::fontMetrics()-height():_获取字体的高度。\">QLabel::fontMetrics().height(): 获取字体的高度。</h3>\n<p>int QFontMetrics::height () const</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Returns <span class=\"operator\">the</span> height <span class=\"operator\">of</span> <span class=\"operator\">the</span> font.</div><div class=\"line\"></div><div class=\"line\">This is always equal <span class=\"built_in\">to</span> ascent()+descent()+<span class=\"number\">1</span> (<span class=\"operator\">the</span> <span class=\"number\">1</span> is <span class=\"keyword\">for</span> <span class=\"operator\">the</span> base <span class=\"built_in\">line</span>).</div><div class=\"line\"></div><div class=\"line\">See also leading() <span class=\"operator\">and</span> lineSpacing().</div></pre></td></tr></table></figure>\n\n<h3 id=\"QLabel::fontMetrics()-lineSpacing():_获取字体的高度，包括文字的实际宽度和行距。\">QLabel::fontMetrics().lineSpacing(): 获取字体的高度，包括文字的实际宽度和行距。</h3>\n<h3 id=\"QLabel::fontMetrics()-leading():_行间距\">QLabel::fontMetrics().leading(): 行间距</h3>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">int QFontMetrics::leading () const</div><div class=\"line\"></div><div class=\"line\">Returns <span class=\"operator\">the</span> leading <span class=\"operator\">of</span> <span class=\"operator\">the</span> font.</div><div class=\"line\"></div><div class=\"line\">This is <span class=\"operator\">the</span> natural inter-<span class=\"built_in\">line</span> spacing.</div><div class=\"line\"></div><div class=\"line\">See also height() <span class=\"operator\">and</span> lineSpacing().</div></pre></td></tr></table></figure>\n\n<h3 id=\"QT内部计算字体、像素和字符宽度之间的方法是：\">QT内部计算字体、像素和字符宽度之间的方法是：</h3>\n<p>见地址：<a href=\"http://losemyheaven.blog.163.com/blog/static/17071980920111283934557/\" target=\"_blank\" rel=\"external\">http://losemyheaven.blog.163.com/blog/static/17071980920111283934557/</a></p>\n<blockquote>\n<p>在QFont当中有两种方式设置字体大小，一种是PixelSize，另一种是PointSize</p>\n<p>Point实际是磅，也就是 1/72 inch</p>\n<p>我们可以从PainterDevice中得到当前DPI(Dot per inch)。因此 Pixel = DPI * Point / 72</p>\n<p>例如设置字体为20Point。 那么字体的像素大小是 90 * 20 / 72 约等于 25.</p>\n<p>可以将字体设置为25Pixel，看到字体的大小就是20Point和25Pixel大小是一样的。</p>\n<p>QFont当中设置的大小，实际上字体的高度，由如下组成。<br><img src=\"110211082116831.jpg\" alt=\"\"></p>\n<p>由PixelSize设置的高度，实际是Asent + 1像素(baseline的高度)。</p>\n<p>在字体大小中涉及了以下知识：</p>\n<p>DPI: Dot per inch，在显示器上也就是每英寸包含的像素。英尺的换算为 1 cm = 0.39 inch, 1 inch = 2.54 cm。</p>\n<p>DPI 可以通过如下计算得来：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">水平 dpi = 水平 resolution * <span class=\"number\">2.54</span> / 显示器宽度</div><div class=\"line\">垂直 dpi = 垂直 resolution * <span class=\"number\">2.54</span> / 显示器高度</div><div class=\"line\">pixel pitch（点距）: 像素点间距离。可以用<span class=\"number\">25.4</span>mm / DPI得到。</div><div class=\"line\">字体在屏幕上的实际大小 = 字体像素大小 * 点距</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>大部分显示器的DPI为90.6左右，垂直和水平点距可能不一样。但windows为了方便就同一了点距，为96。我当前使用的Ubuntu的点距也是96。因此如果想要看到更大的字体可以使用更大的点距。</p>\n<p>终于弄明白了 pixel size 是所占的像素大小  这样有一个缺点 有些显示器的分辨率(dpi)比较大  那么单位长度中的像素点就比较多 这样一个字所占的长度就会比较少</p>\n<p>而 point size 则规定了实际中我们肉眼看到的字体的大小 他和pixel无关的～ 他和显示器无关  不管在什么样上的显示器上 规定大小是多少&gt;就是多少…</p>\n</blockquote>\n","source":"_posts/2015-01-19-Qt字体大小的计算.md","raw":"title: Qt 字体大小的计算\ndate: 2015-01-19 10:37:10\ncategories:\n- Qt\ntags:\n- Qt\n- QFontMetrics\n---\n<br>\n## 计算字符串或者字符宽度的系统函数有：\n\n### QLabel::fontMetrics().width(QString s): 获取字符串s的总像素宽度。\n``` cplusplus\nint QFontMetrics::width ( const QString & text, int len = -1 ) const\n\nReturns the width in pixels of the first len characters of text. If len is negative (the default), the entire string is used.\n\nNote that this value is not equal to boundingRect().width(); boundingRect() returns a rectangle describing the pixels this string will cover whereas width() returns the distance to where the next string should be drawn.\n\nSee also boundingRect().\n```\n\n### QLabel::fontMetrics().height(): 获取字体的高度。\n\nint QFontMetrics::height () const\n``` cplusplus\nReturns the height of the font.\n\nThis is always equal to ascent()+descent()+1 (the 1 is for the base line).\n\nSee also leading() and lineSpacing().\n```\n### QLabel::fontMetrics().lineSpacing(): 获取字体的高度，包括文字的实际宽度和行距。\n\n### QLabel::fontMetrics().leading(): 行间距\n``` cplusplus\nint QFontMetrics::leading () const\n\nReturns the leading of the font.\n\nThis is the natural inter-line spacing.\n\nSee also height() and lineSpacing().\n```\n\n### QT内部计算字体、像素和字符宽度之间的方法是：\n\n见地址：http://losemyheaven.blog.163.com/blog/static/17071980920111283934557/\n\n>在QFont当中有两种方式设置字体大小，一种是PixelSize，另一种是PointSize\n\n>Point实际是磅，也就是 1/72 inch\n>\n>我们可以从PainterDevice中得到当前DPI(Dot per inch)。因此 Pixel = DPI * Point / 72\n>\n>例如设置字体为20Point。 那么字体的像素大小是 90 * 20 / 72 约等于 25.\n>\n>可以将字体设置为25Pixel，看到字体的大小就是20Point和25Pixel大小是一样的。\n>\n>QFont当中设置的大小，实际上字体的高度，由如下组成。\n>![](110211082116831.jpg)\n>\n>由PixelSize设置的高度，实际是Asent + 1像素(baseline的高度)。\n>\n>在字体大小中涉及了以下知识：\n>\n>DPI: Dot per inch，在显示器上也就是每英寸包含的像素。英尺的换算为 1 cm = 0.39 inch, 1 inch = 2.54 cm。\n>\n>DPI 可以通过如下计算得来：\n```bash\n水平 dpi = 水平 resolution * 2.54 / 显示器宽度\n垂直 dpi = 垂直 resolution * 2.54 / 显示器高度\npixel pitch（点距）: 像素点间距离。可以用25.4mm / DPI得到。\n字体在屏幕上的实际大小 = 字体像素大小 * 点距\n```\n>大部分显示器的DPI为90.6左右，垂直和水平点距可能不一样。但windows为了方便就同一了点距，为96。我当前使用的Ubuntu的点距也是96。因此如果想要看到更大的字体可以使用更大的点距。\n>\n>终于弄明白了 pixel size 是所占的像素大小  这样有一个缺点 有些显示器的分辨率(dpi)比较大  那么单位长度中的像素点就比较多 这样一个字所占的长度就会比较少\n>\n>而 point size 则规定了实际中我们肉眼看到的字体的大小 他和pixel无关的～ 他和显示器无关  不管在什么样上的显示器上 规定大小是多少>就是多少...\n","slug":"Qt字体大小的计算","updated":1431306846000,"excerpt":"","_id":"9wcfjw7eb82cle3n","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt 之 show, hide, setVisible, setHidden, close 等小结","date":1421757484000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","y2rbtgpyn4jgustx","ja7led5bn6zbhkxe","7fmw7sesniw9p1dj","0whit5c4a4ieprce","v7cpksxssnmbvwfx"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/dbzhang800/article/details/6300021\" title=\"http://blog.csdn.net/dbzhang800/article/details/6300021\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dbzhang800/article/details/6300021</a></p>\n</blockquote>\n<p>不知道标题该怎么取了，文中就简单整理一下下面几个函数吧。因为不断有网友问到此类问题(包括相关问题)，所以，自己整理一下，也算学习小结了。</p>\n<p>这些函数分两类，一类是用来删除对象的（从内存中干掉），一类是用来隐藏窗口的(从界面上干掉)</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td style=\"text-align:center\">QObject::deleteLater()</td>\n<td style=\"text-align:left\">delete obj; 析构对象</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">QWidget::setVisible(bool)</td>\n<td style=\"text-align:left\">使得Widget可见或不可见</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:center\">QWidget::setHidden(bool)</td>\n<td style=\"text-align:left\">1号的马甲</td>\n</tr>\n<tr>\n<td>3</td>\n<td style=\"text-align:center\">QWidget::show()</td>\n<td style=\"text-align:left\">1号的马甲</td>\n</tr>\n<tr>\n<td>4</td>\n<td style=\"text-align:center\">QWidget::hide()</td>\n<td style=\"text-align:left\">1号的马甲</td>\n</tr>\n<tr>\n<td>5</td>\n<td style=\"text-align:center\">QWidget::close()</td>\n<td style=\"text-align:left\">视情况确定是否调用4号0号</td>\n</tr>\n<tr>\n<td>6</td>\n<td style=\"text-align:center\">QDialog::done(int)</td>\n<td style=\"text-align:left\">始终会调用4号，视情况调用0号</td>\n</tr>\n<tr>\n<td>7</td>\n<td style=\"text-align:center\">QDialog::accept()</td>\n<td style=\"text-align:left\">6号的马甲</td>\n</tr>\n<tr>\n<td>8</td>\n<td style=\"text-align:center\">QDialog::reject()</td>\n<td style=\"text-align:left\">6号的马甲</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h4 id=\"写在前面\">写在前面</h4>\n<p>我们知道：</p>\n<ul>\n<li>分配到heap中的对象(通过 new)，当对其delete，才会被析构。</li>\n<li>分配在stack中的对象，当其离开作用域是被析构</li>\n</ul>\n<p>在 Qt 中，一般建议你使用 new 的方式创建对象。或者，你可以看看  从 Qt 的 delete 说开来</p>\n<p>注意：<br>本文接下来的讨论，都是假定你用的 new 创建的对象。</p>\n<h4 id=\"QObject\">QObject</h4>\n<p>从Qt类的祖宗开始吧。因为QObject不涉及界面啊，成员中只涉及析构问题。在从 Qt 的 delete 说开来 一文中，我们知道：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj-&gt;deleteLater();</div></pre></td></tr></table></figure>\n\n<p>最后调用的就是：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"operator\"><span class=\"keyword\">delete</span> obj;</span></div></pre></td></tr></table></figure>\n\n<p>很简单哈。所以，这个函数的谈论（略）<br>另外：对象析构时会发射 destroyed 信号。注意，是对象析构时，这是句废话，但要记住。</p>\n<h4 id=\"QWidget\">QWidget</h4>\n<h5 id=\"setVisible\">setVisible</h5>\n<p>呵呵，show()、hide()、setVisible()、setHidden() 这4个函数让人看得眼花缭乱。怎么办？</p>\n<p>看看代码吧：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtual void <span class=\"function\">setVisible</span>(bool <span class=\"value\">visible</span>);</div><div class=\"line\"><span class=\"value\">inline</span> void <span class=\"function\">setHidden</span>(bool <span class=\"value\">hidden</span>) { <span class=\"function\">setVisible</span>(!<span class=\"value\">hidden</span>); }</div><div class=\"line\"><span class=\"value\">inline</span> void <span class=\"function\">show</span>() { <span class=\"function\">setVisible</span>(true); }</div><div class=\"line\"><span class=\"value\">inline</span> void <span class=\"function\">hide</span>() { <span class=\"function\">setVisible</span>(false); }</div></pre></td></tr></table></figure>\n\n<p>代码很清楚：这四个东西之中，只有 setVisible 是独立的，其他三个都是它的马甲！</p>\n<p>setVisible 的作用是什么呢？顾名思义，使得一个Widget可见或不可见。</p>\n<p>要点：不可见，是Widget不在界面上显示，但不代表对象被析构！</p>\n<h5 id=\"close\">close</h5>\n<p>这个函数，Manual中给的其实很详细的，很透彻。但一开始想弄明白还真是不容易。</p>\n<p>首先，我们直接调用close时(或者点击关闭按钮调用)，它会生成 QCloseEvent 事件：（我们可以选择接受或阻止它，如果我们阻止事件，close将直接返回，什么都不做）</p>\n<p>看点源码：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool QWidgetPrivate::close_helper(CloseMode mode)</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">...</span></div><div class=\"line\">        QCloseEvent e;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mode == CloseWithSpontaneousEvent)</div><div class=\"line\">            QApplication::sendSpontaneousEvent(q, &e);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            QApplication::sendEvent(q, &e);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!that.isNull() && !e.isAccepted()) {</div><div class=\"line\">            data.is_closing = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> false;</div><div class=\"line\">        }</div><div class=\"line\"><span class=\"keyword\">...</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>其次：如果我们接受了事件(默认)，她就直接调用我们前面提到的朋友。（从界面上干掉）</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">q-&gt;<span class=\"literal\">hide</span>()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n\n<p>再次：如果我们为它设置过标记位（关闭时删除它）：又看到老朋友不是？（从内存中干掉）</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (q-&gt;testAttribute(Qt::WA_DeleteOnClose)) {</div><div class=\"line\">    q-&gt;setAttribute(Qt::WA_DeleteOnClose, <span class=\"keyword\">false</span>);</div><div class=\"line\">    q-&gt;deleteLater();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>题外：close 还是其他代码，但与本主题无关，不再涉及。</p>\n<h4 id=\"QDialog\">QDialog</h4>\n<p>QDialog 和 QWidget 相比，多了 done、reject 和 accept 3个相关函数：</p>\n<p>先看看两个马甲：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">void QDialog<span class=\"value\">::<span class=\"function\">accept</span>()</span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"function\">done</span>(Accepted);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">void QDialog<span class=\"value\">::<span class=\"function\">reject</span>()</span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"function\">done</span>(Rejected);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h5 id=\"done\">done</h5>\n<p>done 做的事情和close比较类似：因为它调用了close所调用的 close_helper 函数。只不过不同于close函数，它始终会先让Widget不可见。然后close操作，最后根据参数发射信号</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">void QDialog::done(<span class=\"keyword\">int</span> r)</div><div class=\"line\">{</div><div class=\"line\">    Q_D(QDialog);</div><div class=\"line\">    <span class=\"keyword\">hide</span>();</div><div class=\"line\">    setResult(r);</div><div class=\"line\"></div><div class=\"line\">    d-&gt;close_helper(QWidgetPrivate::CloseNoEvent);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">emit</span> finished(r);</div><div class=\"line\">    <span class=\"keyword\">if</span> (r == Accepted)</div><div class=\"line\">        <span class=\"keyword\">emit</span> accepted();</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (r == Rejected)</div><div class=\"line\">        <span class=\"keyword\">emit</span> rejected();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>注意：QDilaog可能包含事件循环，事件循环由QDialog::exec() 开始，QDialog::setVisible(false)将负责退出事件循环，这儿用的是其马甲hide()。</p>\n<h4 id=\"参考\">参考</h4>\n<p><a href=\"http://doc.qt.nokia.com/4.7/qobject.html\" title=\"http://doc.qt.nokia.com/4.7/qobject.html\" target=\"_blank\" rel=\"external\">http://doc.qt.nokia.com/4.7/qobject.html</a><br><a href=\"http://doc.qt.nokia.com/4.7/qwidget.html\" title=\"http://doc.qt.nokia.com/4.7/qwidget.html\" target=\"_blank\" rel=\"external\">http://doc.qt.nokia.com/4.7/qwidget.html</a><br><a href=\"http://doc.qt.nokia.com/4.7/qdialog.html\" title=\"http://doc.qt.nokia.com/4.7/qdialog.html\" target=\"_blank\" rel=\"external\">http://doc.qt.nokia.com/4.7/qdialog.html</a></p>\n","source":"_posts/2015-01-20-Qt-之-show-hide-setVisible-setHidden-close-等小结.md","raw":"title: \"Qt 之 show, hide, setVisible, setHidden, close 等小结\"\ndate: 2015-01-20 20:38:04\ncategories:\n- Qt\ntags:\n- Qt\n- setVisible\n- setHidden\n- show\n- hide\n- close\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/dbzhang800/article/details/6300021](http://blog.csdn.net/dbzhang800/article/details/6300021 \"http://blog.csdn.net/dbzhang800/article/details/6300021\")\n\n不知道标题该怎么取了，文中就简单整理一下下面几个函数吧。因为不断有网友问到此类问题(包括相关问题)，所以，自己整理一下，也算学习小结了。\n\n这些函数分两类，一类是用来删除对象的（从内存中干掉），一类是用来隐藏窗口的(从界面上干掉)\n\n||||\n|---|:-:|:--|\n|0|QObject::deleteLater()|delete obj; 析构对象|\n|1|QWidget::setVisible(bool)|使得Widget可见或不可见|\n|2|QWidget::setHidden(bool)|1号的马甲|\n|3|QWidget::show()|1号的马甲|\n|4|QWidget::hide()|1号的马甲|\n|5|QWidget::close()|视情况确定是否调用4号0号|\n|6|QDialog::done(int)|始终会调用4号，视情况调用0号|\n|7|QDialog::accept()|6号的马甲|\n|8|QDialog::reject()|6号的马甲|\n<br>\n#### 写在前面\n我们知道：\n- 分配到heap中的对象(通过 new)，当对其delete，才会被析构。\n- 分配在stack中的对象，当其离开作用域是被析构\n\n在 Qt 中，一般建议你使用 new 的方式创建对象。或者，你可以看看  从 Qt 的 delete 说开来\n\n注意：\n本文接下来的讨论，都是假定你用的 new 创建的对象。\n\n#### QObject\n从Qt类的祖宗开始吧。因为QObject不涉及界面啊，成员中只涉及析构问题。在从 Qt 的 delete 说开来 一文中，我们知道：\n```cplusplus\nobj->deleteLater();\n```\n\n最后调用的就是：\n```cplusplus\ndelete obj;\n```\n\n很简单哈。所以，这个函数的谈论（略）\n另外：对象析构时会发射 destroyed 信号。注意，是对象析构时，这是句废话，但要记住。\n\n#### QWidget\n##### setVisible\n呵呵，show()、hide()、setVisible()、setHidden() 这4个函数让人看得眼花缭乱。怎么办？\n\n看看代码吧：\n```cplusplus\nvirtual void setVisible(bool visible);\ninline void setHidden(bool hidden) { setVisible(!hidden); }\ninline void show() { setVisible(true); }\ninline void hide() { setVisible(false); }\n```\n代码很清楚：这四个东西之中，只有 setVisible 是独立的，其他三个都是它的马甲！\n\nsetVisible 的作用是什么呢？顾名思义，使得一个Widget可见或不可见。\n\n要点：不可见，是Widget不在界面上显示，但不代表对象被析构！\n\n##### close\n这个函数，Manual中给的其实很详细的，很透彻。但一开始想弄明白还真是不容易。\n\n首先，我们直接调用close时(或者点击关闭按钮调用)，它会生成 QCloseEvent 事件：（我们可以选择接受或阻止它，如果我们阻止事件，close将直接返回，什么都不做）\n\n看点源码：\n```cplusplus\nbool QWidgetPrivate::close_helper(CloseMode mode)\n{\n...\n        QCloseEvent e;\n        if (mode == CloseWithSpontaneousEvent)\n            QApplication::sendSpontaneousEvent(q, &e);\n        else\n            QApplication::sendEvent(q, &e);\n        if (!that.isNull() && !e.isAccepted()) {\n            data.is_closing = 0;\n            return false;\n        }\n...\n}\n```\n其次：如果我们接受了事件(默认)，她就直接调用我们前面提到的朋友。（从界面上干掉）\n```cplusplus\nq->hide();\n```\n\n再次：如果我们为它设置过标记位（关闭时删除它）：又看到老朋友不是？（从内存中干掉）\n```cplusplus\nif (q->testAttribute(Qt::WA_DeleteOnClose)) {\n    q->setAttribute(Qt::WA_DeleteOnClose, false);\n    q->deleteLater();\n}\n```\n\n题外：close 还是其他代码，但与本主题无关，不再涉及。\n\n#### QDialog\nQDialog 和 QWidget 相比，多了 done、reject 和 accept 3个相关函数：\n\n先看看两个马甲：\n```cplusplus\nvoid QDialog::accept()\n{\n    done(Accepted);\n}\n\nvoid QDialog::reject()\n{\n    done(Rejected);\n}\n```\n\n##### done\ndone 做的事情和close比较类似：因为它调用了close所调用的 close_helper 函数。只不过不同于close函数，它始终会先让Widget不可见。然后close操作，最后根据参数发射信号\n```cplusplus\nvoid QDialog::done(int r)\n{\n    Q_D(QDialog);\n    hide();\n    setResult(r);\n\n    d->close_helper(QWidgetPrivate::CloseNoEvent);\n\n    emit finished(r);\n    if (r == Accepted)\n        emit accepted();\n    else if (r == Rejected)\n        emit rejected();\n}\n```\n\n注意：QDilaog可能包含事件循环，事件循环由QDialog::exec() 开始，QDialog::setVisible(false)将负责退出事件循环，这儿用的是其马甲hide()。\n\n#### 参考\n[http://doc.qt.nokia.com/4.7/qobject.html](http://doc.qt.nokia.com/4.7/qobject.html \"http://doc.qt.nokia.com/4.7/qobject.html\")\n[http://doc.qt.nokia.com/4.7/qwidget.html](http://doc.qt.nokia.com/4.7/qwidget.html \"http://doc.qt.nokia.com/4.7/qwidget.html\") \n[http://doc.qt.nokia.com/4.7/qdialog.html](http://doc.qt.nokia.com/4.7/qdialog.html \"http://doc.qt.nokia.com/4.7/qdialog.html\")\n","slug":"Qt-之-show-hide-setVisible-setHidden-close-等小结","updated":1431306846000,"excerpt":"","_id":"0lbqdvv8clo2h693","comments":true,"layout":"post","photos":[],"link":""},{"title":"QLabel几种小技巧","date":1421932539000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","64aols9iwmw96ty8"],"content":"<h4 id=\"1、设置行间距\">1、设置行间距</h4>\n<p>QLabel没有设置行间距的函数，所以这种办法是行不通的。只能采用其它类似的方法来实现，例如设置行高，使用样式代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">style</span>=<span class=\"value\">'line-height:18px'</span>&gt;</span>推荐<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h4 id=\"2、链接文本\">2、链接文本</h4>\n<p>实现点击Label，即可打开网页，且文本没有下划线效果，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"http://www.sina.com\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span> <span class=\"attribute\">style</span>=<span class=\"value\">\"text-decoration: none; color:#ff0000\"</span>&gt;</span>新浪<span class=\"tag\">&lt;/<span class=\"title\">style</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p><code>text-decoration: none</code>，表示没有文本修饰，下划线就没有了。</p>\n","source":"_posts/2015-01-22-QLabel几种小技巧.md","raw":"title: QLabel几种小技巧\ndate: 2015-01-22 21:15:39\ncategories:\n- Qt\ntags:\n- Qt\n- QLabel\n---\n#### 1、设置行间距\nQLabel没有设置行间距的函数，所以这种办法是行不通的。只能采用其它类似的方法来实现，例如设置行高，使用样式代码如下：\n```html\n<p style='line-height:18px'>推荐</p>\n```\n\n#### 2、链接文本\n实现点击Label，即可打开网页，且文本没有下划线效果，如下：\n```html\n<a href=\"http://www.sina.com\"><span style=\"text-decoration: none; color:#ff0000\">新浪</style></a>\n```\n`text-decoration: none`，表示没有文本修饰，下划线就没有了。\n","slug":"QLabel几种小技巧","updated":1431306846000,"excerpt":"","_id":"u1bsjt2ubkr67a8v","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt QLabel 显示网络图片","date":1421845678000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","64aols9iwmw96ty8","1a5ylj1ew4qcavay"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/sollyu/p/3628091.html?utm_source=tuicool\" title=\"http://www.cnblogs.com/sollyu/p/3628091.html?utm_source=tuicool\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/sollyu/p/3628091.html?utm_source=tuicool</a></p>\n</blockquote>\n<p>在网上试了很多代码都不能使用，自己写了写代码。</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">void QMusicLogo::setNetworkPic(<span class=\"keyword\">const</span> QString &szUrl)</div><div class=\"line\">{</div><div class=\"line\">    QUrl url(szUrl);</div><div class=\"line\">    QNetworkAccessManager manager;</div><div class=\"line\">    QEventLoop <span class=\"keyword\">loop</span>; </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// qDebug() &lt;&lt; \"Reading picture form \" &lt;&lt; url;</span></div><div class=\"line\">    QNetworkReply *reply = manager.get(QNetworkRequest(url));</div><div class=\"line\">    <span class=\"comment\">//请求结束并下载完成后，退出子事件循环</span></div><div class=\"line\">    QObject::connect(reply, SIGNAL(finished()), &<span class=\"keyword\">loop</span>, SLOT(quit()));</div><div class=\"line\">    <span class=\"comment\">//开启子事件循环</span></div><div class=\"line\">    <span class=\"keyword\">loop</span>.exec(); </div><div class=\"line\"></div><div class=\"line\">    QByteArray jpegData = reply-&gt;readAll();</div><div class=\"line\">    QPixmap pixmap;</div><div class=\"line\">    pixmap.loadFromData(jpegData);</div><div class=\"line\">    setPixmap(pixmap); <span class=\"comment\">// 你在QLabel显示图片</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-01-21-Qt-QLabel-显示网络图片.md","raw":"title: Qt QLabel 显示网络图片\ndate: 2015-01-21 21:07:58\ncategories:\n- Qt\ntags:\n- Qt\n- QLabel\n- 显示网络图片\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/sollyu/p/3628091.html?utm_source=tuicool](http://www.cnblogs.com/sollyu/p/3628091.html?utm_source=tuicool \"http://www.cnblogs.com/sollyu/p/3628091.html?utm_source=tuicool\")\n\n在网上试了很多代码都不能使用，自己写了写代码。\n```cplusplus\nvoid QMusicLogo::setNetworkPic(const QString &szUrl)\n{\n    QUrl url(szUrl);\n    QNetworkAccessManager manager;\n    QEventLoop loop; \n\n    // qDebug() << \"Reading picture form \" << url;\n    QNetworkReply *reply = manager.get(QNetworkRequest(url));\n    //请求结束并下载完成后，退出子事件循环\n    QObject::connect(reply, SIGNAL(finished()), &loop, SLOT(quit()));\n    //开启子事件循环\n    loop.exec(); \n\n    QByteArray jpegData = reply->readAll();\n    QPixmap pixmap;\n    pixmap.loadFromData(jpegData);\n    setPixmap(pixmap); // 你在QLabel显示图片\n}\n```\n","slug":"Qt-QLabel-显示网络图片","updated":1431306846000,"excerpt":"","_id":"ue0pva1rwlnt6ls9","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt开发者关于QThread的咆哮","date":1422019172000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","3dbr054fi1tql2ug"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.jobbole.com/84149/\" title=\"http://blog.jobbole.com/84149/\" target=\"_blank\" rel=\"external\">http://blog.jobbole.com/84149/</a></p>\n</blockquote>\n<p>我们（Qt用户）正广泛地使用IRC来进行交流。我在Freenode网站挂出了#qt标签，用于帮助大家解答问题。我经常看到的一个问题（这让我不厌其烦），是关于理解Qt的线程机制以及如何让他们写的相关代码正确工作。人们贴出他们的代码，或者用代码写的范例，而我则总是以这样的感触告终：<br><strong>你们都用错了！</strong></p>\n<p>我觉得有件重要的事情得澄清一下，也许有点唐突了，然而，我不得不指出，下面的这个（假想中的）类是对面向对象原则的错误应用，同样也是对Qt的错误应用。</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">class MyThread : <span class=\"keyword\">public</span> QThread</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"title\">MyThread</span>()</div><div class=\"line\">    {</div><div class=\"line\">        moveToThread(<span class=\"keyword\">this</span>);</div><div class=\"line\">    }</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">void</span> run();</div><div class=\"line\"> </div><div class=\"line\">signals:</div><div class=\"line\">    <span class=\"keyword\">void</span> progress(<span class=\"keyword\">int</span>);</div><div class=\"line\">    <span class=\"keyword\">void</span> dataReady(QByteArray);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> slots:</div><div class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title\">doWork</span>();</div><div class=\"line\">    <span class=\"keyword\">void</span> timeoutHandler();</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>我对这份代码最大的质疑在于 moveToThread(this);  我见过太多人这么使用，并且完全不明白它做了些什么。那么你会问，它究竟做了什么？moveToThread()函数通知Qt准备好事件处理程序，让扩展的信号（signal）和槽（slot）在指定线程的作用域中调用。QThread是线程的接口，所以我们是在告诉这个线程在“它内部”执行代码。我们也应该在线程运行之前做这些事。即使这份代码看起来可以运行，但它很混乱，并不是QThread设计中的用法（QThread中写的所有函数都应该在创建它的线程中调用，而不是QThread开启的线程）。</p>\n<p>在我的印象中，moveToThread(this);  是因为人们在某些文章中看到并且使用而流传开来的。一次快速的网络搜索就能找到此类文章，所有这些文章中都有类似如下情形的段落：</p>\n<ol>\n<li>继承QThread类</li>\n<li>添加用来进行工作的信号和槽</li>\n<li>测试代码，发现槽函数并没有在“正确的线程”中执行</li>\n<li>谷歌一下，发现了moveToThread(this);  然后写上“看起来的确管用，所以我加上了这行代码”</li>\n</ol>\n<p>我认为，这些都源于第一步。QThread是被设计来作为一个操作系统线程的接口和控制点，而不是用来写入你想在线程里执行的代码的地方。我们（面向对象程序员）编写子类，是因为我们想扩充或者特化基类中的功能。我唯一想到的继承QThread类的合理原因，是添加QThread中不包含的功能，比如，也许可以提供一个内存指针来作为线程的堆栈，或者可以添加实时的接口和支持。用于下载文件、查询数据库，或者做任何其他操作的代码都不应该被加入到QThread的子类中；它应该被封装在它自己的对象中。</p>\n<p>通常，你可以简单地把类从继承QThread改为继承QObject，并且，也许得修改下类名。QThread类提供了start()信号，你可以将它连接到你需要的地方来进行初始化操作。为了让你的代码实际运行在新线程的作用域中，你需要实例化一个QThread对象，并且使用moveToThread()函数将你的对象分配给它。你同过moveToThread()来告诉Qt将你的代码运行在特定线程的作用域中，让线程接口和代码对象分离。如果需要的话，现在你可以将一个类的多个对象分配到一个线程中，或者将多个类的多个对象分配到一个线程。换句话说，将一个实例与一个线程绑定并不是必须的。</p>\n<p>我已经听到了许多关于编写Qt多线程代码时过于复杂的抱怨。原始的QThread类是抽象类，所以必须进行继承。但到了Qt4.4不再如此，因为QThread::run()有了一个默认的实现。在之前，唯一使用QThread的方式就是继承。有了线程关联性的支持，和信号槽连接机制的扩展，我们有了一种更为便利地使用线程的方式。我们喜欢便利，我们想使用它。不幸的是，我太晚地意识到之前迫使人们继承QThread的做法让新的方式更难普及。</p>\n<p>我也听到了一些抱怨，是关于没有同步更新范例程序和文档来向人们展示如何用最不令人头疼的方式便利地进行开发的。如今，我能引用的最佳的资源是<a href=\"http://blog.qt.io/blog/2006/12/04/threading-without-the-headache/\" title=\"我数年前写的一篇博客\" target=\"_blank\" rel=\"external\">我数年前写的一篇博客</a>。</p>\n<p>免责声明：你所看到的上面的一切，当然都只是个人观点。我在这些类上面花费了很多精力，因此关于要如何使用和不要如何使用它们，我有着相当清晰的想法。</p>\n<p>译者注：<br>最新的Qt帮助文档同时提供了建立QThread实例和继承QThread的两种多线程实现方式。根据文档描述和范例代码来看，若想在子线程中使用信号槽机制，应使用分别建立QThread和对象实例的方式；若只是单纯想用子线程运行阻塞式函数，则可继承QThread并重写QThread::run()函数。</p>\n<p>由于继承QThread后，必须在QThread::run()函数中显示调用QThread::exec()来提供对消息循环机制的支持，而QThread::exec()本身会阻塞调用方线程，因此对于需要在子线程中使用信号槽机制的情况，并不推荐使用继承QThread的形式，否则程序编写会较为复杂。</p>\n<p>扩展阅读：<a href=\"http://blog.csdn.net/dbzhang800/article/details/6557272\" title=\"QObject 之 Thread Affinity\" target=\"_blank\" rel=\"external\">QObject 之 Thread Affinity</a></p>\n<p>注：</p>\n<ol>\n<li>Thread Affinity：线程相关性</li>\n<li>“删除QThread对象前，确保线程内所有对象都没销毁”一句有误，应为“被销毁”，Qt文档中相关记录为“You must ensure that all objects created in a thread are deleted before you delete the QThread.”</li>\n</ol>\n","source":"_posts/2015-01-23-Qt开发者关于QThread的咆哮.md","raw":"title: Qt开发者关于QThread的咆哮\ndate: 2015-01-23 21:19:32\ncategories:\n- Qt\ntags:\n- Qt\n- QThread\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.jobbole.com/84149/](http://blog.jobbole.com/84149/ \"http://blog.jobbole.com/84149/\")\n\n我们（Qt用户）正广泛地使用IRC来进行交流。我在Freenode网站挂出了#qt标签，用于帮助大家解答问题。我经常看到的一个问题（这让我不厌其烦），是关于理解Qt的线程机制以及如何让他们写的相关代码正确工作。人们贴出他们的代码，或者用代码写的范例，而我则总是以这样的感触告终：\n**你们都用错了！**\n\n我觉得有件重要的事情得澄清一下，也许有点唐突了，然而，我不得不指出，下面的这个（假想中的）类是对面向对象原则的错误应用，同样也是对Qt的错误应用。\n```cplusplus\nclass MyThread : public QThread\n{\npublic:\n    MyThread()\n    {\n        moveToThread(this);\n    }\n \n    void run();\n \nsignals:\n    void progress(int);\n    void dataReady(QByteArray);\n \npublic slots:\n    void doWork();\n    void timeoutHandler();\n};\n```\n\n我对这份代码最大的质疑在于 moveToThread(this);  我见过太多人这么使用，并且完全不明白它做了些什么。那么你会问，它究竟做了什么？moveToThread()函数通知Qt准备好事件处理程序，让扩展的信号（signal）和槽（slot）在指定线程的作用域中调用。QThread是线程的接口，所以我们是在告诉这个线程在“它内部”执行代码。我们也应该在线程运行之前做这些事。即使这份代码看起来可以运行，但它很混乱，并不是QThread设计中的用法（QThread中写的所有函数都应该在创建它的线程中调用，而不是QThread开启的线程）。\n\n在我的印象中，moveToThread(this);  是因为人们在某些文章中看到并且使用而流传开来的。一次快速的网络搜索就能找到此类文章，所有这些文章中都有类似如下情形的段落：\n1. 继承QThread类\n2. 添加用来进行工作的信号和槽\n3. 测试代码，发现槽函数并没有在“正确的线程”中执行\n4. 谷歌一下，发现了moveToThread(this);  然后写上“看起来的确管用，所以我加上了这行代码”\n\n我认为，这些都源于第一步。QThread是被设计来作为一个操作系统线程的接口和控制点，而不是用来写入你想在线程里执行的代码的地方。我们（面向对象程序员）编写子类，是因为我们想扩充或者特化基类中的功能。我唯一想到的继承QThread类的合理原因，是添加QThread中不包含的功能，比如，也许可以提供一个内存指针来作为线程的堆栈，或者可以添加实时的接口和支持。用于下载文件、查询数据库，或者做任何其他操作的代码都不应该被加入到QThread的子类中；它应该被封装在它自己的对象中。\n\n通常，你可以简单地把类从继承QThread改为继承QObject，并且，也许得修改下类名。QThread类提供了start()信号，你可以将它连接到你需要的地方来进行初始化操作。为了让你的代码实际运行在新线程的作用域中，你需要实例化一个QThread对象，并且使用moveToThread()函数将你的对象分配给它。你同过moveToThread()来告诉Qt将你的代码运行在特定线程的作用域中，让线程接口和代码对象分离。如果需要的话，现在你可以将一个类的多个对象分配到一个线程中，或者将多个类的多个对象分配到一个线程。换句话说，将一个实例与一个线程绑定并不是必须的。\n\n我已经听到了许多关于编写Qt多线程代码时过于复杂的抱怨。原始的QThread类是抽象类，所以必须进行继承。但到了Qt4.4不再如此，因为QThread::run()有了一个默认的实现。在之前，唯一使用QThread的方式就是继承。有了线程关联性的支持，和信号槽连接机制的扩展，我们有了一种更为便利地使用线程的方式。我们喜欢便利，我们想使用它。不幸的是，我太晚地意识到之前迫使人们继承QThread的做法让新的方式更难普及。\n\n我也听到了一些抱怨，是关于没有同步更新范例程序和文档来向人们展示如何用最不令人头疼的方式便利地进行开发的。如今，我能引用的最佳的资源是[我数年前写的一篇博客](http://blog.qt.io/blog/2006/12/04/threading-without-the-headache/ \"我数年前写的一篇博客\")。\n\n免责声明：你所看到的上面的一切，当然都只是个人观点。我在这些类上面花费了很多精力，因此关于要如何使用和不要如何使用它们，我有着相当清晰的想法。\n\n译者注：\n最新的Qt帮助文档同时提供了建立QThread实例和继承QThread的两种多线程实现方式。根据文档描述和范例代码来看，若想在子线程中使用信号槽机制，应使用分别建立QThread和对象实例的方式；若只是单纯想用子线程运行阻塞式函数，则可继承QThread并重写QThread::run()函数。\n\n由于继承QThread后，必须在QThread::run()函数中显示调用QThread::exec()来提供对消息循环机制的支持，而QThread::exec()本身会阻塞调用方线程，因此对于需要在子线程中使用信号槽机制的情况，并不推荐使用继承QThread的形式，否则程序编写会较为复杂。\n\n扩展阅读：[QObject 之 Thread Affinity](http://blog.csdn.net/dbzhang800/article/details/6557272 \"QObject 之 Thread Affinity\")\n\n\n注：\n1. Thread Affinity：线程相关性\n2. “删除QThread对象前，确保线程内所有对象都没销毁”一句有误，应为“被销毁”，Qt文档中相关记录为“You must ensure that all objects created in a thread are deleted before you delete the QThread.”\n","slug":"Qt开发者关于QThread的咆哮","updated":1431306846000,"excerpt":"","_id":"j573lu2v18wwjwts","comments":true,"layout":"post","photos":[],"link":""},{"title":"Linux Shell 获取当前正在执行脚本的绝对路径","date":1422934710000,"categories":["ve0hssdkfwgg7gho"],"tags":["xdg529s3cek3qqt1","ismvvc24c0hypp9w"],"content":"<p>不知道为什么，以前经常使用的一些Linux命令或者使用技巧经常忘记。虽说在汇丰软件一年半都有使用Linux命令，照常理这些是记得很清楚的，但是我就是依赖笔记。每次忘记了就拿出个笔记看一下，命令复制粘贴。<br>哎~现在那一年半积累写下的笔记，早已随我的离开而烟消云散。<code>涉及前公司的保密协议和商业风险，电子版笔记一律不准拷贝出公司电脑。</code>所以在以后的日子里，我会把我学到的东西在<code>One Night In Mok&#39;s Studio</code>。<br>这里记录回以前经常忘记的一条Linux命令：<br>转自： <a href=\"http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm\" title=\"http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm\" target=\"_blank\" rel=\"external\">http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"shebang\">#!/bin/bash</span></div><div class=\"line\">basepath=$(<span class=\"built_in\">cd</span> `dirname <span class=\"variable\">$0</span>` && <span class=\"built_in\">pwd</span>)</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$basepath</span></div></pre></td></tr></table></figure>\n\n<p>常见的一种误区，是使用pwd命令，该命令的作用是“print name of current/working directory”，这才是此命令的真实含义，当前的工作目录，这里没有任何意思说明，这个目录就是脚本存放的目录。所以，这是不对的。</p>\n<p>另一个误人子弟的答案，是$0，这个也是不对的，这个$0是Bash环境下的特殊变量，其真实含义是：</p>\n<blockquote>\n<p>Expands to the name of the shell or shell script. This is set at shell initialization. If bash is invoked with a file of commands, $0 is set to the name of that file. If bash is started with the -c option, then $0 is set to the first argument after the string to be executed, if one is present. Otherwise, it is set to the file name used to invoke bash, as given by argument zero.</p>\n</blockquote>\n<p>这个$0有可能是好几种值，跟调用的方式有关系：</p>\n<blockquote>\n<ol>\n<li>使用一个文件调用bash，那$0的值，是那个文件的名字（没说是绝对路径噢）</li>\n<li>使用-c选项启动bash的话，真正执行的命令会从一个字符串中读取，字符串后面如果还有别的参数的话，使用从$0开始的特殊变量引用（跟路径无关了）</li>\n<li>除此以外，$0会被设置成调用bash的那个文件的名字（没说是绝对路径）</li>\n</ol>\n</blockquote>\n<p>很靠近了，但是还是不对，最后，我们说一下上面的脚本是什么意思，从里往外看：</p>\n<blockquote>\n<p><strong>dirname $0</strong> 取得当前执行的脚本文件的父目录<br><strong>cd `dirname $0`</strong> 进入这个目录（切换当前工作目录）<br><strong>pwd</strong> 显示当前工作目录（cd执行后的）</p>\n</blockquote>\n<p>由此，我们获得了当前正在执行的脚本的存放路径。</p>\n","source":"_posts/2015-02-03-Linux-Shell-获取当前正在执行脚本的绝对路径.md","raw":"title: Linux Shell 获取当前正在执行脚本的绝对路径\ndate: 2015-02-03 11:38:30\ncategories:\n- Shell\ntags:\n- Linux\n- 获取运行路径\n---\n不知道为什么，以前经常使用的一些Linux命令或者使用技巧经常忘记。虽说在汇丰软件一年半都有使用Linux命令，照常理这些是记得很清楚的，但是我就是依赖笔记。每次忘记了就拿出个笔记看一下，命令复制粘贴。\n哎~现在那一年半积累写下的笔记，早已随我的离开而烟消云散。`涉及前公司的保密协议和商业风险，电子版笔记一律不准拷贝出公司电脑。`所以在以后的日子里，我会把我学到的东西在`One Night In Mok's Studio`。\n这里记录回以前经常忘记的一条Linux命令：\n转自： [http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm](http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm \"http://sexywp.com/bash-how-to-get-the-basepath-of-current-running-script.htm\")\n\n```bash\n#!/bin/bash\nbasepath=$(cd `dirname $0` && pwd)\necho $basepath\n```\n常见的一种误区，是使用pwd命令，该命令的作用是“print name of current/working directory”，这才是此命令的真实含义，当前的工作目录，这里没有任何意思说明，这个目录就是脚本存放的目录。所以，这是不对的。\n\n另一个误人子弟的答案，是$0，这个也是不对的，这个$0是Bash环境下的特殊变量，其真实含义是：\n\n>Expands to the name of the shell or shell script. This is set at shell initialization. If bash is invoked with a file of commands, $0 is set to the name of that file. If bash is started with the -c option, then $0 is set to the first argument after the string to be executed, if one is present. Otherwise, it is set to the file name used to invoke bash, as given by argument zero.\n\n这个$0有可能是好几种值，跟调用的方式有关系：\n>1. 使用一个文件调用bash，那$0的值，是那个文件的名字（没说是绝对路径噢）\n>2. 使用-c选项启动bash的话，真正执行的命令会从一个字符串中读取，字符串后面如果还有别的参数的话，使用从$0开始的特殊变量引用（跟路径无关了）\n>3. 除此以外，$0会被设置成调用bash的那个文件的名字（没说是绝对路径）\n\n很靠近了，但是还是不对，最后，我们说一下上面的脚本是什么意思，从里往外看：\n>**dirname $0** 取得当前执行的脚本文件的父目录\n>**cd \\`dirname $0\\`** 进入这个目录（切换当前工作目录）\n>**pwd** 显示当前工作目录（cd执行后的）\n\n由此，我们获得了当前正在执行的脚本的存放路径。\n","slug":"Linux-Shell-获取当前正在执行脚本的绝对路径","updated":1431768472000,"excerpt":"","_id":"3jl34h1ml4zv1nnz","comments":true,"layout":"post","photos":[],"link":""},{"title":"ASCII 字符表参考","date":1422970347000,"categories":["x8qrf2i2578tohs4"],"tags":["2j5941kqa44n59dj"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>经常会用到的<code>ASCII</code>字符表，记录一下，免得每次都百度了。</p>\n<p><img src=\"9213b07eca8065387d4c671896dda144ad348213.jpg\" alt=\"\"></p>\n<p><img src=\"fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg\" alt=\"\"></p>\n","source":"_posts/2015-02-03-ASCII-字符表参考.md","raw":"title: ASCII 字符表参考\ndate: 2015-02-03 21:32:27\ncategories:\n- 杂类\ntags:\n- ASCII\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n经常会用到的`ASCII`字符表，记录一下，免得每次都百度了。\n\n![](9213b07eca8065387d4c671896dda144ad348213.jpg)\n\n![](fcfaaf51f3deb48fdf63a9faf21f3a292df5788f.jpg)\n","slug":"ASCII-字符表参考","updated":1431306846000,"excerpt":"","_id":"wtgogrza6xk7nnp3","comments":true,"layout":"post","photos":[],"link":""},{"title":"One Night in Mok's Studio","date":1422962463000,"categories":["25rjad5qpnh3qcyr"],"tags":["sdb4sy8v5fh8i517","3zcnbn9setgxuor9"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>想了很久，实在是想不到应该帮我的个人网站起个怎样的名字。本人不喜欢高富帅或者屌丝的命名风格，也不喜欢不够特别的命名。思考良久，我想还是用回以前想到的一个名字吧 - <strong><code>One Night in Mok&#39;s Studio</code></strong>。许多灵感都是在不经意间来的，<strong><code>One Night in Mok&#39;s Studio</code></strong> 记录了我一次又一次不经意间萌发的灵感，没有多复杂的意思，这就是我以此命名的原因。<br><br>近日，我终于入手了<code>moky.cc</code>这个域名，这一买就是十年。说到买这个域名，其实我都拖了整整四年。四年前，我就计划要搞个人网站，但毕竟人都是有惰性的，当时也不断有其他事情干，于是就这样慢慢淡出了这个计划。直到最近，我才狠下心来好好做，虽然最近比以前还忙，但我总会留出一点时间去准备网站。<br><br>最近生活变化挺大的，以至于我特别想静下心去记录一下。很多东西，错过了也不值得留恋，有的东西却想好好地记录下来，以后再拿出来留念。2015年1月12日，这是我在我第一家公司<code>汇丰软件</code>工作的最后一天。那天我没有因此而特别高兴，因为我不仅面临新公司更大的挑战，而且要和我相处一年半的好同事好朋友告别了，我想我这辈子也不会忘记我在<code>汇丰软件</code>工作的这段深刻回忆。<br><img src=\"5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg\" alt=\"\"></p>\n<p><img src=\"5e22d182jw1eowhbmlgsxj20m80gotcg.jpg\" alt=\"\"></p>\n<p>我发现我有一个非常好的习惯，那就是记笔记。干我们程序猿这一行，用到的技术使用技巧和知识要点是非常多的，而我的记性是非常不好的，所以我就逐渐养成了记笔记的习惯。记得我在以前公司，用的就是<code>OneNote</code>，但是出于公司信息安全，这个1G多的笔记并没有随我离开公司，现在我的心血应该已经随电脑硬盘格式化了。所以以后的笔记，我只会记录在这个网站里，我希望这既可以方便自己也可以帮助别人。<br><br>来到新公司，对于我来说是一个新的起点，在接下来的日子里，用两个字概括 - <code>奋斗</code>。我一直都相信，念念不忘，必有回响。上一个念念不忘已经有所回响，下一个念念不忘会因为我的努力而有所回响么？</p>\n","source":"_posts/2015-02-03-One-night-in-Mok-s-Studio.md","raw":"title: \"One Night in Mok's Studio\"\ndate: 2015-02-03 19:21:03\ncategories:\n- 猿人日常\ntags:\n- 新起点\n- 奋斗\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n想了很久，实在是想不到应该帮我的个人网站起个怎样的名字。本人不喜欢高富帅或者屌丝的命名风格，也不喜欢不够特别的命名。思考良久，我想还是用回以前想到的一个名字吧 - **`One Night in Mok's Studio`**。许多灵感都是在不经意间来的，**`One Night in Mok's Studio`** 记录了我一次又一次不经意间萌发的灵感，没有多复杂的意思，这就是我以此命名的原因。<br>\n近日，我终于入手了`moky.cc`这个域名，这一买就是十年。说到买这个域名，其实我都拖了整整四年。四年前，我就计划要搞个人网站，但毕竟人都是有惰性的，当时也不断有其他事情干，于是就这样慢慢淡出了这个计划。直到最近，我才狠下心来好好做，虽然最近比以前还忙，但我总会留出一点时间去准备网站。<br>\n最近生活变化挺大的，以至于我特别想静下心去记录一下。很多东西，错过了也不值得留恋，有的东西却想好好地记录下来，以后再拿出来留念。2015年1月12日，这是我在我第一家公司`汇丰软件`工作的最后一天。那天我没有因此而特别高兴，因为我不仅面临新公司更大的挑战，而且要和我相处一年半的好同事好朋友告别了，我想我这辈子也不会忘记我在`汇丰软件`工作的这段深刻回忆。\n![](5e22d182jw1eowhbz5rwmj238w1tsx6q.jpg)\n\n![](5e22d182jw1eowhbmlgsxj20m80gotcg.jpg)\n\n我发现我有一个非常好的习惯，那就是记笔记。干我们程序猿这一行，用到的技术使用技巧和知识要点是非常多的，而我的记性是非常不好的，所以我就逐渐养成了记笔记的习惯。记得我在以前公司，用的就是`OneNote`，但是出于公司信息安全，这个1G多的笔记并没有随我离开公司，现在我的心血应该已经随电脑硬盘格式化了。所以以后的笔记，我只会记录在这个网站里，我希望这既可以方便自己也可以帮助别人。<br>\n来到新公司，对于我来说是一个新的起点，在接下来的日子里，用两个字概括 - `奋斗`。我一直都相信，念念不忘，必有回响。上一个念念不忘已经有所回响，下一个念念不忘会因为我的努力而有所回响么？","slug":"One-night-in-Mok-s-Studio","updated":1431306847000,"excerpt":"","_id":"zyq7op9lj65cukal","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python正则表达式指南","date":1422943812000,"categories":["ldi4kaat0baj4vp1"],"tags":["3bwun56tv7lalf9k","yb0jyqwoc5uhl1xh"],"content":"<blockquote>\n<p>本文介绍了Python对于正则表达式的支持，包括正则表达式基础以及Python正则表达式标准库的完整介绍及使用示例。本文的内容不包括如何编写高效的正则表达式、如何优化正则表达式，这些主题请查看其他教程。</p>\n<p>注意：本文基于Python2.4完成；如果看到不明白的词汇请记得百度谷歌或维基，whatever。</p>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html\" title=\"http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html</a></p>\n</blockquote>\n<h3 id=\"1-_正则表达式基础\">1. 正则表达式基础</h3>\n<h4 id=\"1-1-_简单介绍\">1.1. 简单介绍</h4>\n<p>正则表达式并不是Python的一部分。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。如果已经在其他语言里使用过正则表达式，只需要简单看一看就可以上手了。</p>\n<p>下图展示了使用正则表达式进行匹配的流程：<br><img src=\"687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png\" alt=\"\"></p>\n<p>正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。如果表达式中有量词或边界，这个过程会稍微有一些不同，但也是很好理解的，看下图中的示例以及自己多使用几次就能明白。</p>\n<p>下图列出了Python支持的正则表达式元字符和语法：<br><img src=\"687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png\" alt=\"\"></p>\n<h4 id=\"1-2-_数量词的贪婪模式与非贪婪模式\">1.2. 数量词的贪婪模式与非贪婪模式</h4>\n<p>正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式”ab*“如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab*?”，将找到”a”。</p>\n<h4 id=\"1-3-_反斜杠的困扰\">1.3. 反斜杠的困扰</h4>\n<p>与大多数编程语言相同，正则表达式里使用”\\”作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\\\\“：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r”\\“表示。同样，匹配一个数字的”\\d”可以写成r”\\d”。有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。</p>\n<h4 id=\"1-4-_匹配模式\">1.4. 匹配模式</h4>\n<p>正则表达式提供了一些可用的匹配模式，比如忽略大小写、多行匹配等，这部分内容将在Pattern类的工厂方法<code>re.compile(pattern[, flags])</code>中一起介绍。</p>\n<p><br></p>\n<h3 id=\"2-_re模块\">2. re模块</h3>\n<h4 id=\"2-1-_开始使用re\">2.1. 开始使用re</h4>\n<p>Python通过re模块提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># encoding: UTF-8</span></div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将正则表达式编译成Pattern对象</span></div><div class=\"line\">pattern = re.compile(<span class=\"string\">r'hello'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None</span></div><div class=\"line\">match = pattern.match(<span class=\"string\">'hello world!'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> match:</div><div class=\"line\">    <span class=\"comment\"># 使用Match获得分组信息</span></div><div class=\"line\">    <span class=\"keyword\">print</span> match.group()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### 输出 ###</span></div><div class=\"line\"><span class=\"comment\"># hello</span></div></pre></td></tr></table></figure>\n\n<p><code>re.compile(strPattern[, flag]):</code><br>这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。 第二个参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如<code>re.I | re.M</code>另外，你也可以在regex字符串中指定模式，比如<code>re.compile(&#39;pattern&#39;, re.I | re.M)与re.compile(&#39;(?im)pattern&#39;)</code>是等价的。</p>\n<p>可选值有：</p>\n<ul>\n<li><code>re.I(re.IGNORECASE)</code>: 忽略大小写（括号内是完整写法，下同）</li>\n<li><code>M(MULTILINE)</code>: 多行模式，改变’^’和’$’的行为（参见上图）</li>\n<li><code>S(DOTALL)</code>: 点任意匹配模式，改变’.’的行为</li>\n<li><code>L(LOCALE)</code>: 使预定字符类 \\w \\W \\b \\B \\s \\S 取决于当前区域设定</li>\n<li><code>U(UNICODE)</code>: 使预定字符类 \\w \\W \\b \\B \\s \\S \\d \\D 取决于unicode定义的字符属性</li>\n<li><code>X(VERBOSE)</code>: 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。以下两个正则表达式是等价的：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = re.compile(<span class=\"string\">r\"\"\"\\d +  # the integral part</span></div><div class=\"line\">                   \\.    # the decimal point</div><div class=\"line\">                   \\d *  # some fractional digits\"\"\", re.X)</div><div class=\"line\">b = re.compile(<span class=\"string\">r\"\\d+\\.\\d*\"</span></div></pre></td></tr></table></figure>\n\n<p>re提供了众多模块方法用于完成正则表达式的功能。这些方法可以使用Pattern实例的相应方法替代，唯一的好处是少写一行re.compile()代码，但同时也无法复用编译后的Pattern对象。这些方法将在Pattern类的实例方法部分一起介绍。如上面这个例子可以简写为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">m = re.match(<span class=\"string\">r'hello'</span>, <span class=\"string\">'hello world!'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> m.group()</div></pre></td></tr></table></figure>\n\n<p>re模块还提供了一个方法escape(string)，用于将string中的正则表达式元字符如*/+/?等之前加上转义符再返回，在需要大量匹配元字符时有那么一点用。</p>\n<h4 id=\"2-2-_Match\">2.2. Match</h4>\n<p>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p>\n<p>属性：</p>\n<ul>\n<li><code>string</code>: 匹配时使用的文本。</li>\n<li><code>re</code>: 匹配时使用的Pattern对象。</li>\n<li><code>pos</code>: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</li>\n<li><code>endpos</code>: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</li>\n<li><code>lastindex</code>: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</li>\n<li><code>lastgroup</code>: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</li>\n</ul>\n<p>方法：</p>\n<ul>\n<li><code>group([group1, …])</code>: 获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。</li>\n<li><code>groups([default])</code>: 以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。</li>\n<li><code>groupdict([default])</code>: 返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</li>\n<li><code>start([group])</code>: 返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</li>\n<li><code>end([group])</code>: 返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</li>\n<li><code>span([group])</code>: 返回(start(group), end(group))。</li>\n<li><code>expand(template)</code>: 将匹配到的分组代入template中然后返回。template中可以使用\\id或\\g<id>、\\g<name>引用分组，但不能使用编号0。\\id与\\g<id>是等价的；但\\10将被认为是第10个分组，如果你想表达\\1之后是字符’0’，只能使用\\g<1>0。</1></id></name></id></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\">m = re.match(<span class=\"string\">r'(\\w+) (\\w+)(?P&lt;sign&gt;.*)'</span>, <span class=\"string\">'hello world!'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.string:\"</span>, m.string</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.re:\"</span>, m.re</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.pos:\"</span>, m.pos</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.endpos:\"</span>, m.endpos</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.lastindex:\"</span>, m.lastindex</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.lastgroup:\"</span>, m.lastgroup</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.group(1,2):\"</span>, m.group(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.groups():\"</span>, m.groups()</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.groupdict():\"</span>, m.groupdict()</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.start(2):\"</span>, m.start(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.end(2):\"</span>, m.end(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"m.span(2):\"</span>, m.span(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">r\"m.expand(r'\\2 \\1\\3'):\"</span>, m.expand(<span class=\"string\">r'\\2 \\1\\3'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># m.string: hello world!</span></div><div class=\"line\"><span class=\"comment\"># m.re: &lt;_sre.SRE_Pattern object at 0x016E1A38&gt;</span></div><div class=\"line\"><span class=\"comment\"># m.pos: 0</span></div><div class=\"line\"><span class=\"comment\"># m.endpos: 12</span></div><div class=\"line\"><span class=\"comment\"># m.lastindex: 3</span></div><div class=\"line\"><span class=\"comment\"># m.lastgroup: sign</span></div><div class=\"line\"><span class=\"comment\"># m.group(1,2): ('hello', 'world')</span></div><div class=\"line\"><span class=\"comment\"># m.groups(): ('hello', 'world', '!')</span></div><div class=\"line\"><span class=\"comment\"># m.groupdict(): {'sign': '!'}</span></div><div class=\"line\"><span class=\"comment\"># m.start(2): 6</span></div><div class=\"line\"><span class=\"comment\"># m.end(2): 11</span></div><div class=\"line\"><span class=\"comment\"># m.span(2): (6, 11)</span></div><div class=\"line\"><span class=\"comment\"># m.expand(r'\\2 \\1\\3'): world hello!</span></div></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-_Pattern\">2.3. Pattern</h4>\n<p>Pattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。<br>Pattern不能直接实例化，必须使用re.compile()进行构造。<br>Pattern提供了几个可读属性用于获取表达式的相关信息：</p>\n<ul>\n<li><code>pattern</code>: 编译时用的表达式字符串。</li>\n<li><code>flags</code>: 编译时用的匹配模式。数字形式。</li>\n<li><code>groups</code>: 表达式中分组的数量。</li>\n<li><code>groupindex</code>: 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\">p = re.compile(<span class=\"string\">r'(\\w+) (\\w+)(?P&lt;sign&gt;.*)'</span>, re.DOTALL)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"p.pattern:\"</span>, p.pattern</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"p.flags:\"</span>, p.flags</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"p.groups:\"</span>, p.groups</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"p.groupindex:\"</span>, p.groupindex</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># p.pattern: (\\w+) (\\w+)(?P&lt;sign&gt;.*)</span></div><div class=\"line\"><span class=\"comment\"># p.flags: 16</span></div><div class=\"line\"><span class=\"comment\"># p.groups: 3</span></div><div class=\"line\"><span class=\"comment\"># p.groupindex: {'sign': 3}</span></div></pre></td></tr></table></figure>\n\n<p>实例方法[ | re模块方法]：</p>\n<ul>\n<li><code>match(string[, pos[, endpos]]) | re.match(pattern, string[, flags])</code>:<br><br>这个方法将从string的pos下标处起尝试匹配pattern；如果pattern结束时仍可匹配，则返回一个Match对象；如果匹配过程中pattern无法匹配，或者匹配未结束就已到达endpos，则返回None。<br><br>pos和endpos的默认值分别为0和len(string)；re.match()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。<br><br>注意：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符’$’。<br><br>示例参见2.1小节。</li>\n<li><code>search(string[, pos[, endpos]]) | re.search(pattern, string[, flags])</code>:<br><br>这个方法用于查找字符串中可以匹配成功的子串。从string的pos下标处起尝试匹配pattern，如果pattern结束时仍可匹配，则返回一个Match对象；若无法匹配，则将pos加1后重新尝试匹配；直到pos=endpos时仍无法匹配则返回None。<br><br>pos和endpos的默认值分别为0和len(string))；re.search()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># encoding: UTF-8 </span></div><div class=\"line\"><span class=\"keyword\">import</span> re </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 将正则表达式编译成Pattern对象 </span></div><div class=\"line\">pattern = re.compile(<span class=\"string\">r'world'</span>) </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 使用search()查找匹配的子串，不存在能匹配的子串时将返回None </span></div><div class=\"line\"><span class=\"comment\"># 这个例子中使用match()无法成功匹配 </span></div><div class=\"line\">match = pattern.search(<span class=\"string\">'hello world!'</span>) </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> match: </div><div class=\"line\">    <span class=\"comment\"># 使用Match获得分组信息 </span></div><div class=\"line\">    <span class=\"keyword\">print</span> match.group() </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### 输出 ### </span></div><div class=\"line\"><span class=\"comment\"># world</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>split(string[, maxsplit]) | re.split(pattern, string[, maxsplit])</code>:<br><br>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> p.split(<span class=\"string\">'one1two2three3four4'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># ['one', 'two', 'three', 'four', '']</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags])</code>:<br><br>搜索string，以列表形式返回全部能匹配的子串。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> p.findall(<span class=\"string\">'one1two2three3four4'</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># ['1', '2', '3', '4']</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags])</code>:<br><br>搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'\\d+'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> p.finditer(<span class=\"string\">'one1two2three3four4'</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> m.group(),</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># 1 2 3 4</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>sub(repl, string[, count]) | re.sub(pattern, repl, string[, count])</code>:<br><br>使用repl替换string中每一个匹配的子串后返回替换后的字符串。<br><br>当repl是一个字符串时，可以使用\\id或\\g<id>、\\g<name>引用分组，但不能使用编号0。<br><br>当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。<br><br>count用于指定最多替换次数，不指定时全部替换。</name></id></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'(\\w+) (\\w+)'</span>)</div><div class=\"line\">s = <span class=\"string\">'i say, hello world!'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> p.sub(<span class=\"string\">r'\\2 \\1'</span>, s)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(m)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> m.group(<span class=\"number\">1</span>).title() + <span class=\"string\">' '</span> + m.group(<span class=\"number\">2</span>).title()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> p.sub(func, s)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># say i, world hello!</span></div><div class=\"line\"><span class=\"comment\"># I Say, Hello World!</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><code>subn(repl, string[, count]) |re.sub(pattern, repl, string[, count])</code>:<br><br>返回 (sub(repl, string[, count]), 替换次数)。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"> </div><div class=\"line\">p = re.compile(<span class=\"string\">r'(\\w+) (\\w+)'</span>)</div><div class=\"line\">s = <span class=\"string\">'i say, hello world!'</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> p.subn(<span class=\"string\">r'\\2 \\1'</span>, s)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(m)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> m.group(<span class=\"number\">1</span>).title() + <span class=\"string\">' '</span> + m.group(<span class=\"number\">2</span>).title()</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> p.subn(func, s)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">### output ###</span></div><div class=\"line\"><span class=\"comment\"># ('say i, world hello!', 2)</span></div><div class=\"line\"><span class=\"comment\"># ('I Say, Hello World!', 2)</span></div></pre></td></tr></table></figure>\n\n<p>以上就是Python对于正则表达式的支持。熟练掌握正则表达式是每一个程序员必须具备的技能，这年头没有不与字符串打交道的程序了。笔者也处于初级阶段，与君共勉，^_^</p>\n<p>另外，图中的特殊构造部分没有举出例子，用到这些的正则表达式是具有一定难度的。有兴趣可以思考一下，如何匹配不是以abc开头的单词，^_^</p>\n<p>全文结束</p>\n","source":"_posts/2015-02-03-Python正则表达式指南.md","raw":"title: Python正则表达式指南\ndate: 2015-02-03 14:10:12\ncategories:\n- Python\ntags:\n- Python\n- 正则表达式\n---\n>本文介绍了Python对于正则表达式的支持，包括正则表达式基础以及Python正则表达式标准库的完整介绍及使用示例。本文的内容不包括如何编写高效的正则表达式、如何优化正则表达式，这些主题请查看其他教程。\n>\n>注意：本文基于Python2.4完成；如果看到不明白的词汇请记得百度谷歌或维基，whatever。\n\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html](http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html \"http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html\")\n\n### 1. 正则表达式基础\n#### 1.1. 简单介绍\n正则表达式并不是Python的一部分。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。如果已经在其他语言里使用过正则表达式，只需要简单看一看就可以上手了。\n\n下图展示了使用正则表达式进行匹配的流程：\n![](687474703a2f2f692e696d6775722e636f6d2f567142566b57472e706e67.png)\n\n正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。如果表达式中有量词或边界，这个过程会稍微有一些不同，但也是很好理解的，看下图中的示例以及自己多使用几次就能明白。\n\n下图列出了Python支持的正则表达式元字符和语法：\n![](687474703a2f2f692e696d6775722e636f6d2f6174566b7578592e706e67.png)\n\n#### 1.2. 数量词的贪婪模式与非贪婪模式\n正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式\"ab\\*\"如果用于查找\"abbbc\"，将找到\"abbb\"。而如果使用非贪婪的数量词\"ab\\*?\"，将找到\"a\"。\n\n#### 1.3. 反斜杠的困扰\n与大多数编程语言相同，正则表达式里使用\"\\\"作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符\"\\\"，那么使用编程语言表示的正则表达式里将需要4个反斜杠\"\\\\\\\\\"：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r\"\\\\\"表示。同样，匹配一个数字的\"\\\\d\"可以写成r\"\\d\"。有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。\n\n#### 1.4. 匹配模式\n正则表达式提供了一些可用的匹配模式，比如忽略大小写、多行匹配等，这部分内容将在Pattern类的工厂方法`re.compile(pattern[, flags])`中一起介绍。\n\n<br>\n### 2. re模块\n#### 2.1. 开始使用re\nPython通过re模块提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。\n```python\n# encoding: UTF-8\nimport re\n \n# 将正则表达式编译成Pattern对象\npattern = re.compile(r'hello')\n \n# 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None\nmatch = pattern.match('hello world!')\n \nif match:\n    # 使用Match获得分组信息\n    print match.group()\n \n### 输出 ###\n# hello\n```\n`re.compile(strPattern[, flag]):`\n这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。 第二个参数flag是匹配模式，取值可以使用按位或运算符'|'表示同时生效，比如`re.I | re.M`另外，你也可以在regex字符串中指定模式，比如`re.compile('pattern', re.I | re.M)与re.compile('(?im)pattern')`是等价的。\n\n可选值有：\n- `re.I(re.IGNORECASE)`: 忽略大小写（括号内是完整写法，下同）\n- `M(MULTILINE)`: 多行模式，改变'^'和'$'的行为（参见上图）\n- `S(DOTALL)`: 点任意匹配模式，改变'.'的行为\n- `L(LOCALE)`: 使预定字符类 \\w \\W \\b \\B \\s \\S 取决于当前区域设定\n- `U(UNICODE)`: 使预定字符类 \\w \\W \\b \\B \\s \\S \\d \\D 取决于unicode定义的字符属性\n- `X(VERBOSE)`: 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。以下两个正则表达式是等价的：\n```python\na = re.compile(r\"\"\"\\d +  # the integral part\n                   \\.    # the decimal point\n                   \\d *  # some fractional digits\"\"\", re.X)\nb = re.compile(r\"\\d+\\.\\d*\"\n```\n\nre提供了众多模块方法用于完成正则表达式的功能。这些方法可以使用Pattern实例的相应方法替代，唯一的好处是少写一行re.compile()代码，但同时也无法复用编译后的Pattern对象。这些方法将在Pattern类的实例方法部分一起介绍。如上面这个例子可以简写为：\n```python\nm = re.match(r'hello', 'hello world!')\nprint m.group()\n```\n\nre模块还提供了一个方法escape(string)，用于将string中的正则表达式元字符如*/+/?等之前加上转义符再返回，在需要大量匹配元字符时有那么一点用。\n\n#### 2.2. Match\nMatch对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。\n\n属性：\n- `string`: 匹配时使用的文本。\n- `re`: 匹配时使用的Pattern对象。\n- `pos`: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。\n- `endpos`: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。\n- `lastindex`: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。\n- `lastgroup`: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。\n\n方法：\n- `group([group1, …])`: 获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。\n- `groups([default])`: 以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。\n- `groupdict([default])`: 返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。\n- `start([group])`: 返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。\n- `end([group])`: 返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。\n- `span([group])`: 返回(start(group), end(group))。\n- `expand(template)`: 将匹配到的分组代入template中然后返回。template中可以使用\\id或\\g<id>、\\g<name>引用分组，但不能使用编号0。\\id与\\g<id>是等价的；但\\10将被认为是第10个分组，如果你想表达\\1之后是字符'0'，只能使用\\g<1>0。\n```python\nimport re\nm = re.match(r'(\\w+) (\\w+)(?P<sign>.*)', 'hello world!')\n \nprint \"m.string:\", m.string\nprint \"m.re:\", m.re\nprint \"m.pos:\", m.pos\nprint \"m.endpos:\", m.endpos\nprint \"m.lastindex:\", m.lastindex\nprint \"m.lastgroup:\", m.lastgroup\n \nprint \"m.group(1,2):\", m.group(1, 2)\nprint \"m.groups():\", m.groups()\nprint \"m.groupdict():\", m.groupdict()\nprint \"m.start(2):\", m.start(2)\nprint \"m.end(2):\", m.end(2)\nprint \"m.span(2):\", m.span(2)\nprint r\"m.expand(r'\\2 \\1\\3'):\", m.expand(r'\\2 \\1\\3')\n \n### output ###\n# m.string: hello world!\n# m.re: <_sre.SRE_Pattern object at 0x016E1A38>\n# m.pos: 0\n# m.endpos: 12\n# m.lastindex: 3\n# m.lastgroup: sign\n# m.group(1,2): ('hello', 'world')\n# m.groups(): ('hello', 'world', '!')\n# m.groupdict(): {'sign': '!'}\n# m.start(2): 6\n# m.end(2): 11\n# m.span(2): (6, 11)\n# m.expand(r'\\2 \\1\\3'): world hello!\n```\n\n#### 2.3. Pattern\nPattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。\nPattern不能直接实例化，必须使用re.compile()进行构造。\nPattern提供了几个可读属性用于获取表达式的相关信息：\n- `pattern`: 编译时用的表达式字符串。\n- `flags`: 编译时用的匹配模式。数字形式。\n- `groups`: 表达式中分组的数量。\n- `groupindex`: 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。\n```python\nimport re\np = re.compile(r'(\\w+) (\\w+)(?P<sign>.*)', re.DOTALL)\n \nprint \"p.pattern:\", p.pattern\nprint \"p.flags:\", p.flags\nprint \"p.groups:\", p.groups\nprint \"p.groupindex:\", p.groupindex\n \n### output ###\n# p.pattern: (\\w+) (\\w+)(?P<sign>.*)\n# p.flags: 16\n# p.groups: 3\n# p.groupindex: {'sign': 3}\n```\n实例方法[ | re模块方法]：\n\n- `match(string[, pos[, endpos]]) | re.match(pattern, string[, flags])`:\n<br>这个方法将从string的pos下标处起尝试匹配pattern；如果pattern结束时仍可匹配，则返回一个Match对象；如果匹配过程中pattern无法匹配，或者匹配未结束就已到达endpos，则返回None。\n<br>pos和endpos的默认值分别为0和len(string)；re.match()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。\n<br>注意：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符'$'。\n<br>示例参见2.1小节。\n- `search(string[, pos[, endpos]]) | re.search(pattern, string[, flags])`:\n<br>这个方法用于查找字符串中可以匹配成功的子串。从string的pos下标处起尝试匹配pattern，如果pattern结束时仍可匹配，则返回一个Match对象；若无法匹配，则将pos加1后重新尝试匹配；直到pos=endpos时仍无法匹配则返回None。\n<br>pos和endpos的默认值分别为0和len(string))；re.search()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。\n```python\n# encoding: UTF-8 \nimport re \n \n# 将正则表达式编译成Pattern对象 \npattern = re.compile(r'world') \n \n# 使用search()查找匹配的子串，不存在能匹配的子串时将返回None \n# 这个例子中使用match()无法成功匹配 \nmatch = pattern.search('hello world!') \n \nif match: \n    # 使用Match获得分组信息 \n    print match.group() \n \n### 输出 ### \n# world\n```\n- `split(string[, maxsplit]) | re.split(pattern, string[, maxsplit])`:\n<br>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。\n```python\nimport re\n \np = re.compile(r'\\d+')\nprint p.split('one1two2three3four4')\n \n### output ###\n# ['one', 'two', 'three', 'four', '']\n```\n- `findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags])`:\n<br>搜索string，以列表形式返回全部能匹配的子串。\n```python\nimport re\n \np = re.compile(r'\\d+')\nprint p.findall('one1two2three3four4')\n \n### output ###\n# ['1', '2', '3', '4']\n```\n- `finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags])`:\n<br>搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。\n```python\nimport re\n \np = re.compile(r'\\d+')\nfor m in p.finditer('one1two2three3four4'):\n    print m.group(),\n \n### output ###\n# 1 2 3 4\n```\n- `sub(repl, string[, count]) | re.sub(pattern, repl, string[, count])`:\n<br>使用repl替换string中每一个匹配的子串后返回替换后的字符串。\n<br>当repl是一个字符串时，可以使用\\id或\\g<id>、\\g<name>引用分组，但不能使用编号0。\n<br>当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。\n<br>count用于指定最多替换次数，不指定时全部替换。\n```python\nimport re\n \np = re.compile(r'(\\w+) (\\w+)')\ns = 'i say, hello world!'\n \nprint p.sub(r'\\2 \\1', s)\n \ndef func(m):\n    return m.group(1).title() + ' ' + m.group(2).title()\n \nprint p.sub(func, s)\n \n### output ###\n# say i, world hello!\n# I Say, Hello World!\n```\n- `subn(repl, string[, count]) |re.sub(pattern, repl, string[, count])`:\n<br>返回 (sub(repl, string[, count]), 替换次数)。\n```python\nimport re\n \np = re.compile(r'(\\w+) (\\w+)')\ns = 'i say, hello world!'\n \nprint p.subn(r'\\2 \\1', s)\n \ndef func(m):\n    return m.group(1).title() + ' ' + m.group(2).title()\n \nprint p.subn(func, s)\n \n### output ###\n# ('say i, world hello!', 2)\n# ('I Say, Hello World!', 2)\n```\n以上就是Python对于正则表达式的支持。熟练掌握正则表达式是每一个程序员必须具备的技能，这年头没有不与字符串打交道的程序了。笔者也处于初级阶段，与君共勉，^_^\n\n另外，图中的特殊构造部分没有举出例子，用到这些的正则表达式是具有一定难度的。有兴趣可以思考一下，如何匹配不是以abc开头的单词，^_^\n\n全文结束\n","slug":"Python正则表达式指南","updated":1431306847000,"excerpt":"","_id":"n9k2aom6k5vc843e","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python 中if  _name _ == ' _main _'：用法解析","date":1423031926000,"categories":["ldi4kaat0baj4vp1"],"tags":["3bwun56tv7lalf9k","dyd0bryk8b1rst9g"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://keliang.blog.51cto.com/3359430/649318\" title=\"http://keliang.blog.51cto.com/3359430/649318\" target=\"_blank\" rel=\"external\">http://keliang.blog.51cto.com/3359430/649318</a></p>\n</blockquote>\n<p>想必很多初次接触python的同学都会见到这样一个语句，if __name__ == “__main__“：</p>\n<p>那么这个语句到底是做什么用的呢？在解释之前，首先要声明的是，不管你是多么小白，你一定要知道的是：</p>\n<ol>\n<li>python文件的后缀为.py；</li>\n<li>py文件既可以用来直接执行，就像一个小程序一样，也可以用来作为模块被导入（比如360安全卫士，就是依靠一个个功能模块来实现的，好比360安全卫士本身框架是一个桌面，而上面的图标就是快捷方式，这些快捷方式所指向的就是这一个个功能模块）</li>\n<li>在python中导入模块一般使用的是import</li>\n</ol>\n<p>好了，在确定知道以上几点之后，就可以开始解释if __name__ == “__main__“：这个语句了。</p>\n<p>首先解释一下if，顾名思义，if就是如果的意思，在句子开始处加上if，就说明，这个句子是一个条件语句。学习if语句的使用是很简单的，当然想要真正灵活运用还需大量的实践。</p>\n<p>接着是 __name__，__name__作为模块的内置属性，简单点说呢，就是.py文件的调用方式。</p>\n<p>最后是__main__，刚才我也提过，.py文件有两种使用方式：作为模块被调用和直接使用。如果它等于”__main__“就表示是直接执行。</p>\n<p>总结：在if __name__ == “__main__“：之后的语句作为模块被调用的时候，语句之后的代码不执行；直接使用的时候，语句之后的代码执行。通常，此语句用于模块测试中使用。</p>\n","source":"_posts/2015-02-04-Python-中-if-name-main-用法解析.md","raw":"title: \"Python 中if \\__name\\__ == '\\__main\\__'：用法解析\"\ndate: 2015-02-04 14:38:46\ncategories:\n- Python\ntags:\n- Python\n- main\n---\n\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://keliang.blog.51cto.com/3359430/649318](http://keliang.blog.51cto.com/3359430/649318 \"http://keliang.blog.51cto.com/3359430/649318\")\n\n想必很多初次接触python的同学都会见到这样一个语句，if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"：\n\n那么这个语句到底是做什么用的呢？在解释之前，首先要声明的是，不管你是多么小白，你一定要知道的是：\n\n1. python文件的后缀为.py；\n2. py文件既可以用来直接执行，就像一个小程序一样，也可以用来作为模块被导入（比如360安全卫士，就是依靠一个个功能模块来实现的，好比360安全卫士本身框架是一个桌面，而上面的图标就是快捷方式，这些快捷方式所指向的就是这一个个功能模块）\n3. 在python中导入模块一般使用的是import\n\n好了，在确定知道以上几点之后，就可以开始解释if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"：这个语句了。\n\n首先解释一下if，顾名思义，if就是如果的意思，在句子开始处加上if，就说明，这个句子是一个条件语句。学习if语句的使用是很简单的，当然想要真正灵活运用还需大量的实践。\n\n接着是 \\_\\_name\\_\\_，\\_\\_name\\_\\_作为模块的内置属性，简单点说呢，就是.py文件的调用方式。\n\n最后是\\_\\_main\\_\\_，刚才我也提过，.py文件有两种使用方式：作为模块被调用和直接使用。如果它等于\"\\_\\_main\\_\\_\"就表示是直接执行。\n\n总结：在if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"：之后的语句作为模块被调用的时候，语句之后的代码不执行；直接使用的时候，语句之后的代码执行。通常，此语句用于模块测试中使用。\n","slug":"Python-中-if-name-main-用法解析","updated":1431306847000,"excerpt":"","_id":"j9ngn4ixnfc36jho","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python assert 用法","date":1423199709000,"categories":["ldi4kaat0baj4vp1"],"tags":["3bwun56tv7lalf9k","ssp1lgcx9ff9fg5o"],"content":"<ol>\n<li><code>assert</code>语句用来声明某个条件是真的。</li>\n<li>如果你非常确信某个你使用的列表中至少有一个元素，而你想要检验这一点，并且在它非真的时候引发一个错误，那么<code>assert</code>语句是应用在这种情形下的理想语句。</li>\n<li>当<code>assert</code>语句失败的时候，会引发一<code>AssertionError</code>。</li>\n</ol>\n<p><strong>测试程序：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">mylist = [<span class=\"string\">'item'</span>]</div><div class=\"line\"><span class=\"keyword\">assert</span> len(mylist) &gt;= <span class=\"number\">1</span></div><div class=\"line\">mylist.pop()</div><div class=\"line\"><span class=\"string\">'item'</span></div><div class=\"line\"><span class=\"keyword\">assert</span> len(mylist) &gt;= <span class=\"number\">1</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">AssertionError</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-02-06-Python-assert-用法.md","raw":"title: Python assert 用法\ndate: 2015-02-06 13:15:09\ncategories:\n- Python\ntags:\n- Python\n- assert\n---\n1. `assert`语句用来声明某个条件是真的。\n2. 如果你非常确信某个你使用的列表中至少有一个元素，而你想要检验这一点，并且在它非真的时候引发一个错误，那么`assert`语句是应用在这种情形下的理想语句。\n3. 当`assert`语句失败的时候，会引发一`AssertionError`。\n\n**测试程序：**\n```python\nmylist = ['item']\nassert len(mylist) >= 1\nmylist.pop()\n'item'\nassert len(mylist) >= 1\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAssertionError\n```\n","slug":"Python-assert-用法","updated":1431306847000,"excerpt":"","_id":"tm4uywu8k16m65ka","comments":true,"layout":"post","photos":[],"link":""},{"title":"PyQt 窗口风格","date":1423135646000,"categories":["ccfn720olj32wb0n"],"tags":["nmldk4hu366t8ktw","sysdkahssjfhuopp"],"content":"<h5 id=\"PyQt窗口风格使用setWindowFlags(Qt-WindowFlags)函数设置，具体参数如下:\">PyQt窗口风格使用<code>setWindowFlags(Qt.WindowFlags)</code>函数设置，具体参数如下:</h5>\n<h6 id=\"工具/原料\">工具/原料</h6>\n<p><code>Python</code><br><code>PyQt</code></p>\n<h6 id=\"方法/步骤\">方法/步骤</h6>\n<ol>\n<li><p>PyQt基本窗口类型有如下类型：</p>\n<blockquote>\n<p>Qt.Qt.Widget#插件默认窗口，有最小化、最大化、关闭按钮<br>Qt.Qt.Window#普通窗口，有最小化、最大化、关闭按钮<br>Qt.Qt.Dialog#对话框窗口，有问号和关闭按钮<br>Qt.Qt.Popup#弹出窗口，窗口无边框化<br>Qt.Qt.ToolTip#提示窗口，窗口无边框化，无任务栏窗口<br>Qt.Qt.SplashScreen#飞溅屏幕，窗口无边框化，无任务栏窗口<br>Qt.Qt.SubWindow#子窗口，窗口无按钮但有标题栏</p>\n</blockquote>\n</li>\n<li><p>自定义外观的顶层窗口标志：</p>\n<blockquote>\n<p>Qt.Qt.MSWindowsFixedSizeDialogHint#窗口无法调整大小<br>Qt.Qt.FramelessWindowHint#窗口无边框化<br>Qt.Qt.CustomizeWindowHint#有边框但无标题栏和按钮，不能移动和拖动<br>Qt.Qt.WindowTitleHint#添加标题栏和一个关闭按钮<br>Qt.Qt.WindowSystemMenuHint#添加系统目录和一个关闭按钮<br>Qt.Qt.WindowMaximizeButtonHint#激活最大化和关闭按钮，禁止最小化按钮<br>Qt.Qt.WindowMinimizeButtonHint#激活最小化和关闭按钮，禁止最大化按钮<br>Qt.Qt.WindowMinMaxButtonsHint#激活最小化、最大化和关闭按钮，#相当于Qt.Qt.WindowMaximizeButtonHint|Qt.Qt.WindowMinimizeButtonHint<br>Qt.Qt.WindowCloseButtonHint#添加一个关闭按钮<br>Qt.Qt.WindowContextHelpButtonHint#添加问号和关闭按钮，像对话框一样<br>Qt.Qt.WindowStaysOnTopHint#窗口始终处于顶层位置<br>Qt.Qt.WindowStaysOnBottomHint#窗口始终处于底层位置</p>\n</blockquote>\n</li>\n<li><p>使用方法：<br>在窗口类<code>__init__</code>函数中使用<code>self.setWindowFlags()</code>函数，如：</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> PyQt4 <span class=\"keyword\">import</span> QtCore, QtGui, Qtfrom UI <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainWindow</span><span class=\"params\">(QtGui.QMainWindow)</span>:</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,parent=None)</span>:</span></div><div class=\"line\">        QtGui.QWidget.__init__(self,parent)</div><div class=\"line\">        self.ui=Ui_Form() <span class=\"comment\"># Ui_Form来源于UI.py，参见系列第一课</span></div><div class=\"line\">        self.ui.setupUi(self)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># 设置普通窗口样式</span></div><div class=\"line\">        self.setWindowFlags(Qt.Qt.Window)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    <span class=\"keyword\">import</span> sys</div><div class=\"line\">    app = QtGui.QApplication(sys.argv)</div><div class=\"line\">    myapp=MainWindow()</div><div class=\"line\">    myapp.show()</div><div class=\"line\">    app.exec_()</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-02-05-PyQt-窗口风格.md","raw":"title: PyQt 窗口风格\ndate: 2015-02-05 19:27:26\ncategories:\n- PyQt\ntags:\n- PyQt\n- 窗口风格\n---\n##### PyQt窗口风格使用`setWindowFlags(Qt.WindowFlags)`函数设置，具体参数如下: #####\n\n###### 工具/原料\n`Python`\n`PyQt`\n\n###### 方法/步骤\n\n1. PyQt基本窗口类型有如下类型：\n>Qt.Qt.Widget#插件默认窗口，有最小化、最大化、关闭按钮\n>Qt.Qt.Window#普通窗口，有最小化、最大化、关闭按钮\n>Qt.Qt.Dialog#对话框窗口，有问号和关闭按钮\n>Qt.Qt.Popup#弹出窗口，窗口无边框化\n>Qt.Qt.ToolTip#提示窗口，窗口无边框化，无任务栏窗口\n>Qt.Qt.SplashScreen#飞溅屏幕，窗口无边框化，无任务栏窗口\n>Qt.Qt.SubWindow#子窗口，窗口无按钮但有标题栏\n\n2. 自定义外观的顶层窗口标志：\n>Qt.Qt.MSWindowsFixedSizeDialogHint#窗口无法调整大小\n>Qt.Qt.FramelessWindowHint#窗口无边框化\n>Qt.Qt.CustomizeWindowHint#有边框但无标题栏和按钮，不能移动和拖动\n>Qt.Qt.WindowTitleHint#添加标题栏和一个关闭按钮\n>Qt.Qt.WindowSystemMenuHint#添加系统目录和一个关闭按钮\n>Qt.Qt.WindowMaximizeButtonHint#激活最大化和关闭按钮，禁止最小化按钮\n>Qt.Qt.WindowMinimizeButtonHint#激活最小化和关闭按钮，禁止最大化按钮\n>Qt.Qt.WindowMinMaxButtonsHint#激活最小化、最大化和关闭按钮，#相当于Qt.Qt.WindowMaximizeButtonHint|Qt.Qt.WindowMinimizeButtonHint\n>Qt.Qt.WindowCloseButtonHint#添加一个关闭按钮\n>Qt.Qt.WindowContextHelpButtonHint#添加问号和关闭按钮，像对话框一样\n>Qt.Qt.WindowStaysOnTopHint#窗口始终处于顶层位置\n>Qt.Qt.WindowStaysOnBottomHint#窗口始终处于底层位置\n\n3. 使用方法：\n在窗口类`__init__`函数中使用`self.setWindowFlags()`函数，如：\n```python\n# -*- coding: utf-8 -*-\nfrom PyQt4 import QtCore, QtGui, Qtfrom UI import *\nclass MainWindow(QtGui.QMainWindow): \n    def __init__(self,parent=None):\n        QtGui.QWidget.__init__(self,parent)\n        self.ui=Ui_Form() # Ui_Form来源于UI.py，参见系列第一课\n        self.ui.setupUi(self)\n\n        # 设置普通窗口样式\n        self.setWindowFlags(Qt.Qt.Window)\n\nif __name__ == \"__main__\":\n    import sys\n    app = QtGui.QApplication(sys.argv)\n    myapp=MainWindow()\n    myapp.show()\n    app.exec_()\n```\n","slug":"PyQt-窗口风格","updated":1431306847000,"excerpt":"","_id":"sot44szsa3p7lq26","comments":true,"layout":"post","photos":[],"link":""},{"title":"为上云而备案","date":1423741332000,"categories":["25rjad5qpnh3qcyr"],"tags":["rwnmq57079fl11vb","sq0fmjp8ji4nq708"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>这几天在研究网站<code>SEO</code>和加载速度优化，说到<code>SEO</code>，<code>Hexo</code>有个<code>sitemap</code>的生成器，不过有点蛋疼，<code>百度</code>和<code>谷歌</code>识别的<code>sitemap</code>不太一样，这样就需要生成两个<code>sitemap</code>，还好两个搜索引擎的站长工具后台都非常易用。<br>虽说这个网站是纯静态的网站，但是也是寄外国服务器篱下<code>我这种穷缺没钱买网站服务器只能用Github静态页服务器</code>，加上部分<code>CSS</code>和<code>JS</code>体积比较大，第一次访问网站的确需要点时间。然后我就想到了百度云服务，百度云可以在你设定的时间间隔将你的网站页面缓存到百度云服务器，而百度云服务器采用分布式架构，至少在国内拥有大量云节点，这保证了网站的快速加载。所以，对于我这种纯静态的网站来说，使用云加速是优势。<br>但是，百度云有个蛋疼的规定，就是必须获得工信部网站备案的域名才可以使用国内云服务器<code>未备案网站会分配到海外服务器</code>，而且未备案的网站似乎也不可以使用一些功能。所以为了体验云服务，还是乖乖备案吧。记得高中建站的时候就玩过一次备案<code>到现在都还记得当时的域名-mokyue.com，挺喜欢这个域名的，就是有点长。后来没钱就没继续搞啦，汗~</code>，以前备案没有那么严格，也不记得当时是怎么通过的了。这次备案没有自己去撞板，花了几十块让<code>创宇云</code>帮我备案，网站关了大概一周时间，备案就搞定了<code>果然是有钱使得鬼推磨</code>，anyway，终于可以上云了。</p>\n","source":"_posts/2015-02-12-为上云而备案.md","raw":"title: 为上云而备案\ndate: 2015-02-12 19:42:12\ncategories:\n- 猿人日常\ntags:\n- 百度云\n- 网站备案\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n这几天在研究网站`SEO`和加载速度优化，说到`SEO`，`Hexo`有个`sitemap`的生成器，不过有点蛋疼，`百度`和`谷歌`识别的`sitemap`不太一样，这样就需要生成两个`sitemap`，还好两个搜索引擎的站长工具后台都非常易用。\n虽说这个网站是纯静态的网站，但是也是寄外国服务器篱下`我这种穷缺没钱买网站服务器只能用Github静态页服务器`，加上部分`CSS`和`JS`体积比较大，第一次访问网站的确需要点时间。然后我就想到了百度云服务，百度云可以在你设定的时间间隔将你的网站页面缓存到百度云服务器，而百度云服务器采用分布式架构，至少在国内拥有大量云节点，这保证了网站的快速加载。所以，对于我这种纯静态的网站来说，使用云加速是优势。\n但是，百度云有个蛋疼的规定，就是必须获得工信部网站备案的域名才可以使用国内云服务器`未备案网站会分配到海外服务器`，而且未备案的网站似乎也不可以使用一些功能。所以为了体验云服务，还是乖乖备案吧。记得高中建站的时候就玩过一次备案`到现在都还记得当时的域名-mokyue.com，挺喜欢这个域名的，就是有点长。后来没钱就没继续搞啦，汗~`，以前备案没有那么严格，也不记得当时是怎么通过的了。这次备案没有自己去撞板，花了几十块让`创宇云`帮我备案，网站关了大概一周时间，备案就搞定了`果然是有钱使得鬼推磨`，anyway，终于可以上云了。\n","slug":"为上云而备案","updated":1431306847000,"excerpt":"","_id":"wbd5mbc7de90igql","comments":true,"layout":"post","photos":[],"link":""},{"title":"从Qt的delete说开来","date":1423745856000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","ay58ftdklt83adfv","0plw9xqd7tnl0999","69s8fo898tszh9p1"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/dbzhang800/article/details/6300025\" title=\"http://blog.csdn.net/dbzhang800/article/details/6300025\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dbzhang800/article/details/6300025</a></p>\n</blockquote>\n<p>在C++中学习过程中，我们都知道：</p>\n<ul>\n<li>delete 和 new 必须 配对使用(一 一对应)：delete少了，则内存泄露，多了麻烦更大。</li>\n</ul>\n<p>Qt作为C++的库，显然是不会违背C++的前述原则的。可是:</p>\n<ul>\n<li>在Qt中，我们很多时候都疯狂地用new，却很少用delete，缺少的 delete 去哪儿了？！</li>\n</ul>\n<h5 id=\"Qt半自动的内存管理\">Qt半自动的内存管理</h5>\n<p>在Qt中，以下情况下你new出的对象你可以不用 亲自去delete (但你应该清楚delete在何处被Qt调用的，怎么被调用的)：</p>\n<ul>\n<li>QObject及其派生类的对象，如果其parent非0，那么其parent析构时会析构该对象(本文内容围绕这一点展开 )</li>\n</ul>\n<p>除此之外，有些类的对象可以接收设置一些特别的标记，比如：</p>\n<ul>\n<li>QWidget及其派生类的对象，可以设置 Qt::WA_DeleteOnClose 标志位(当close时会析构该对象)</li>\n<li>QAbstractAnimation派生类的对象，可以设置 QAbstractAnimation::DeleteWhenStopped</li>\n<li>QRunnable::setAutoDelete()</li>\n<li>MediaSource::setAutoDelete()</li>\n<li>…</li>\n</ul>\n<p>注意：这些用法会有些陷阱 ，请注意看本文最后的3个小例子。</p>\n<p>在Qt中，最基础和核心的类是：QObject 。它的魔力很大，本文只关注两点：</p>\n<ul>\n<li>父子关系</li>\n<li>deleteLater</li>\n</ul>\n<h5 id=\"父子关系\">父子关系</h5>\n<p>在Qt中，每个 QObject 内部都有一个list，用来保存所有的 children，还有一个指针，保存自己的parent。当它自己析构时，它会将自己从parent的列表中删除，并且析构掉所有的children。</p>\n<p>注意：在 Qt 中，我们经常会遇到</p>\n<ul>\n<li><strong>基类</strong>、<strong>派生类</strong>，或<strong>父类</strong>、<strong>子类</strong>。 这是对于派生体系来说的，和在C++相关书中看到的完全一样，与这的parent无关</li>\n<li><strong>父对象</strong>、<strong>子对象</strong>、<strong>父子关系</strong>。 这是Qt中所特有的，也就是这儿的parent所引入的，与类的继承关系无关</li>\n</ul>\n<h6 id=\"建立与解除\">建立与解除</h6>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q_INVOKABLE QObject<span class=\"tag\">::QObject</span> ( QObject <span class=\"subst\">*</span> <span class=\"keyword\">parent</span> <span class=\"subst\">=</span> <span class=\"number\">0</span> )</div></pre></td></tr></table></figure>\n\n<p>创建一个QObject对象时，如果指定了父对象，它就会将自己添加到父对象的 children 列表中</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">QObject::~QObject () [<span class=\"keyword\">virtual</span>]</div></pre></td></tr></table></figure>\n\n<p>当一个QObject对象析构时，它会将自己从父对象的 children 列表中移除(parent非0的话)</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">void</span> QObject<span class=\"tag\">::setParent</span> ( QObject <span class=\"subst\">*</span> <span class=\"keyword\">parent</span> )</div></pre></td></tr></table></figure>\n\n<p>通过该函数，将自己从原父对象的children中删除，添加到新parent的children列表中</p>\n<p>注：这三个函数都是通过一个内部私有函数来实现的，这就是</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">QObjectPrivate::<span class=\"keyword\">set</span>Parent_helper(QObject *o)</div></pre></td></tr></table></figure>\n\n<h6 id=\"获取父、子对象\">获取父、子对象</h6>\n<p>每个QObject只有一个父对象：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">QObject * QObject::parent () <span class=\"keyword\">const</span></div></pre></td></tr></table></figure>\n\n<p>子对象可以有多个</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> QObjectList & QObject::children () <span class=\"keyword\">const</span></div></pre></td></tr></table></figure>\n\n<p>所以可以根据条件来查找喽：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">T QObject::findChild ( <span class=\"keyword\">const</span> QString & name = QString() ) <span class=\"keyword\">const</span></div><div class=\"line\">QList&lt;T&gt; QObject::findChildren ( <span class=\"keyword\">const</span> QString & name = QString() ) <span class=\"keyword\">const</span></div></pre></td></tr></table></figure>\n\n<h5 id=\"deleteLater\">deleteLater</h5>\n<p>deleteLater 包含两层意思了</p>\n<ul>\n<li>delete</li>\n<li>later</li>\n</ul>\n<p>呵呵，似乎这是废话哈。</p>\n<h6 id=\"删除自己\">删除自己</h6>\n<p>在去年春节前的时候吧，有人对</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">obj-&gt;</span> deleteLater()</span></div></pre></td></tr></table></figure>\n\n<p>会像下面一样调用delete：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"operator\"><span class=\"keyword\">delete</span> obj;</span></div></pre></td></tr></table></figure>\n\n<p>感到不解。然后我写了这样一个C++例子：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class A</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">  <span class=\"title\">A</span>(){}</div><div class=\"line\">  <span class=\"keyword\">void</span> deleteMe()</div><div class=\"line\">  {</div><div class=\"line\">      delete <span class=\"keyword\">this</span>;</div><div class=\"line\">  }</div><div class=\"line\">};</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main()</div><div class=\"line\">{</div><div class=\"line\">  A * a = <span class=\"keyword\">new</span> A;</div><div class=\"line\">  a-&gt;deleteMe();</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>应该不需要解释吧</p>\n<h6 id=\"later\">later</h6>\n<p>Qt 是事件驱动的，所以发送一个删除事件到事件系统就可以啦：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">void</span> <span class=\"tag\">QObject</span><span class=\"pseudo\">::deleteLater()</span></div><div class=\"line\"><span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">QCoreApplication</span>:<span class=\"value\">:<span class=\"function\">postEvent</span>(this, new <span class=\"function\">QEvent</span>(QEvent::DeferredDelete))</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>事件循环稍后看到该事件就会将其派发会这个widget：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool QObject::event(QEvent *e)</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">switch</span> (e-&gt;type()) {</div><div class=\"line\"><span class=\"keyword\">...</span></div><div class=\"line\">    case QEvent::DeferredDelete:</div><div class=\"line\">         <span class=\"keyword\">...</span></div></pre></td></tr></table></figure>\n\n<h5 id=\"一些例子\">一些例子</h5>\n<h6 id=\"无关痛痒\">无关痛痒</h6>\n<p>很简短、很熟悉的一个例子是不？但是 如果你发现对象的析构函数始终不被成功调用 ，会有什么感觉？</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QApplication&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QLabel&gt;</span></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</div><div class=\"line\">{</div><div class=\"line\">QApplication app(argc, argv);</div><div class=\"line\">QLabel *label = <span class=\"keyword\">new</span> QLabel(<span class=\"string\">\"Hello Qt!\"</span>);</div><div class=\"line\">label-&gt;show();</div><div class=\"line\"><span class=\"keyword\">return</span> app.exec();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这是 C++ GUI Programming with Qt 4 一书的第一个例子。我们注意到这儿的 label 既没有指定parent，也没有对其调用delete。</p>\n<p>所以，这儿会造成内存泄露。</p>\n<p>书中解释说，对于这种小例子，这点内存泄露不算什么。不清楚官方这个例子的意图是什么，或许是一开始就让大家用指针吧。</p>\n<p>三种改进方式</p>\n<ul>\n<li>分配对象到stack而不是heap中</li>\n</ul>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">QLabel <span class=\"keyword\">label</span>(<span class=\"string\">\"Hello Qt!\"</span>);</div><div class=\"line\"><span class=\"keyword\">label</span>.show();</div></pre></td></tr></table></figure>\n\n<ul>\n<li>设置标志位，这样，当我们点击关闭按钮时，close()函数将会调用deleteLater</li>\n</ul>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">label-&gt;setAttribute(Qt::WA_DeleteOnClose);</div></pre></td></tr></table></figure>\n\n<ul>\n<li>动手调用delete(不就是少了一个么，我们补上还不行么)</li>\n</ul>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">ret</span> = app.exec();</div><div class=\"line\"><span class=\"built_in\">delete</span> label;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">ret</span>;</div></pre></td></tr></table></figure>\n\n<h6 id=\"单独列一个吧\">单独列一个吧</h6>\n<p>强化一下对前一个例子的了解</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QApplication&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QLabel&gt;</span></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</div><div class=\"line\">{</div><div class=\"line\">QApplication app(argc, argv);</div><div class=\"line\">QLabel label(<span class=\"string\">\"Hello Qt!\"</span>);</div><div class=\"line\">label.show();</div><div class=\"line\">label.setAttribute(Qt::WA_DeleteOnClose);</div><div class=\"line\"><span class=\"keyword\">return</span> app.exec();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>运行正常，退出时会崩溃 ，因为label被close时，将会 delete 这儿label对象，但label对象却不是通过new分配到heap中的。</p>\n<p>为了使得用户减少自己显式使用delete，Qt将delete隐藏的比较深。这样一来，不使用new为对象分配空间时，反倒需要多多小心了。</p>\n<h6 id=\"隐蔽很深？\">隐蔽很深？</h6>\n<p>看个小例子：这个程序退出时会直接崩溃 。</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#include &lt;QtGui&gt;</span></div><div class=\"line\">int main(int argc, char* argv[])</div><div class=\"line\">{</div><div class=\"line\">   QApplication app(argc, argv);</div><div class=\"line\">   QLabel label(t<span class=\"string\">r\"Hello Qt!\"</span>);</div><div class=\"line\">   QWidget w;</div><div class=\"line\">   label.setParent(&w);</div><div class=\"line\">   w.show();</div><div class=\"line\">   <span class=\"keyword\">return</span> app.exec();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>问题出在哪儿呢？因为退出时，w 比 label 先被析构，当 w 被析构时，会删除chilren列表中的对象，也就是这儿的 label。但 label 却不是通过new分配在heap中，而是在stack中，可想而知，delete 一个再stack中的对象会怎么样了。相当于</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">QLabel label();</div><div class=\"line\"><span class=\"operator\"><span class=\"keyword\">delete</span> &label;</span></div></pre></td></tr></table></figure>\n\n<p>两种改进办法：</p>\n<ul>\n<li>一是，将label分配到heap中</li>\n</ul>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">QLabel *<span class=\"keyword\">label</span> = <span class=\"keyword\">new</span> QLabel(<span class=\"string\">\"Hello Qt!\"</span>);</div><div class=\"line\"><span class=\"keyword\">label</span>.setParent(&w)</div></pre></td></tr></table></figure>\n\n<ul>\n<li>再一种就是，确保label先于其parent被析构(调整一下顺序)，这样，label析构时将自己从父对象的列表中移除自己，w析构时，children列表中就不会有分配在stack中的对象了。</li>\n</ul>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">QWidget w;</div><div class=\"line\">QLabel label(t<span class=\"string\">r\"Hello Qt!\"</span>);</div></pre></td></tr></table></figure>\n\n<p>Qt 对象的父子关系的引入，简化了我们对内存的管理，但是，由于它会在你不太注意的地方调用 delete，所以，使用时还是要当心。</p>\n<h5 id=\"参考\">参考</h5>\n<ul>\n<li><a href=\"http://doc.qt.nokia.com/4.7/qobject.html\" title=\"http://doc.qt.nokia.com/4.7/qobject.html\" target=\"_blank\" rel=\"external\">http://doc.qt.nokia.com/4.7/qobject.html</a></li>\n<li><a href=\"http://www.cuteqt.com/blog/?p=824\" title=\"http://www.cuteqt.com/blog/?p=824\" target=\"_blank\" rel=\"external\">http://www.cuteqt.com/blog/?p=824</a></li>\n</ul>\n","source":"_posts/2015-02-12-从Qt的delete说开来.md","raw":"title: 从Qt的delete说开来\ndate: 2015-02-12 20:57:36\ncategories:\n- Qt\ntags:\n- Qt\n- delete\n- 内存管理\n- C++\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/dbzhang800/article/details/6300025](http://blog.csdn.net/dbzhang800/article/details/6300025 \"http://blog.csdn.net/dbzhang800/article/details/6300025\")\n\n在C++中学习过程中，我们都知道：\n- delete 和 new 必须 配对使用(一 一对应)：delete少了，则内存泄露，多了麻烦更大。\n\nQt作为C++的库，显然是不会违背C++的前述原则的。可是:\n- 在Qt中，我们很多时候都疯狂地用new，却很少用delete，缺少的 delete 去哪儿了？！\n\n##### Qt半自动的内存管理\n在Qt中，以下情况下你new出的对象你可以不用 亲自去delete (但你应该清楚delete在何处被Qt调用的，怎么被调用的)：\n- QObject及其派生类的对象，如果其parent非0，那么其parent析构时会析构该对象(本文内容围绕这一点展开 )\n\n除此之外，有些类的对象可以接收设置一些特别的标记，比如：\n\n- QWidget及其派生类的对象，可以设置 Qt::WA_DeleteOnClose 标志位(当close时会析构该对象)\n- QAbstractAnimation派生类的对象，可以设置 QAbstractAnimation::DeleteWhenStopped\n- QRunnable::setAutoDelete()\n- MediaSource::setAutoDelete()\n- ...\n\n注意：这些用法会有些陷阱 ，请注意看本文最后的3个小例子。\n\n在Qt中，最基础和核心的类是：QObject 。它的魔力很大，本文只关注两点：\n- 父子关系\n- deleteLater\n\n##### 父子关系\n在Qt中，每个 QObject 内部都有一个list，用来保存所有的 children，还有一个指针，保存自己的parent。当它自己析构时，它会将自己从parent的列表中删除，并且析构掉所有的children。\n\n注意：在 Qt 中，我们经常会遇到\n- **基类**、**派生类**，或**父类**、**子类**。 这是对于派生体系来说的，和在C++相关书中看到的完全一样，与这的parent无关\n- **父对象**、**子对象**、**父子关系**。 这是Qt中所特有的，也就是这儿的parent所引入的，与类的继承关系无关\n\n###### 建立与解除\n```cplusplus\nQ_INVOKABLE QObject::QObject ( QObject * parent = 0 )\n```\n创建一个QObject对象时，如果指定了父对象，它就会将自己添加到父对象的 children 列表中\n\n```cplusplus\nQObject::~QObject () [virtual]\n```\n当一个QObject对象析构时，它会将自己从父对象的 children 列表中移除(parent非0的话)\n\n```cplusplus\nvoid QObject::setParent ( QObject * parent )\n```\n通过该函数，将自己从原父对象的children中删除，添加到新parent的children列表中\n\n注：这三个函数都是通过一个内部私有函数来实现的，这就是\n```cplusplus\nQObjectPrivate::setParent_helper(QObject *o)\n```\n\n###### 获取父、子对象\n每个QObject只有一个父对象：\n```cplusplus\nQObject * QObject::parent () const\n```\n\n子对象可以有多个\n```cplusplus\nconst QObjectList & QObject::children () const\n```\n\n所以可以根据条件来查找喽：\n```cplusplus\nT QObject::findChild ( const QString & name = QString() ) const\nQList<T> QObject::findChildren ( const QString & name = QString() ) const\n```\n\n##### deleteLater\ndeleteLater 包含两层意思了\n- delete\n- later\n\n呵呵，似乎这是废话哈。\n\n###### 删除自己\n在去年春节前的时候吧，有人对\n```cplusplus\nobj-> deleteLater()\n```\n\n会像下面一样调用delete：\n```cplusplus\ndelete obj;\n```\n\n感到不解。然后我写了这样一个C++例子：\n```cplusplus\nclass A\n{\n  public:\n  A(){}\n  void deleteMe()\n  {\n      delete this;\n  }\n};\n\nint main()\n{\n  A * a = new A;\n  a->deleteMe();\n  return 0;\n}\n```\n应该不需要解释吧\n\n###### later\nQt 是事件驱动的，所以发送一个删除事件到事件系统就可以啦：\n```cplusplus\nvoid QObject::deleteLater()\n{\n    QCoreApplication::postEvent(this, new QEvent(QEvent::DeferredDelete));\n}\n```\n\n事件循环稍后看到该事件就会将其派发会这个widget：\n```cplusplus\nbool QObject::event(QEvent *e)\n{\n    switch (e->type()) {\n...\n    case QEvent::DeferredDelete:\n         ...\n```\n\n##### 一些例子\n###### 无关痛痒\n很简短、很熟悉的一个例子是不？但是 如果你发现对象的析构函数始终不被成功调用 ，会有什么感觉？\n```cplusplus\n#include <QApplication>\n#include <QLabel>\nint main(int argc, char *argv[])\n{\nQApplication app(argc, argv);\nQLabel *label = new QLabel(\"Hello Qt!\");\nlabel->show();\nreturn app.exec();\n}\n```\n\n这是 C++ GUI Programming with Qt 4 一书的第一个例子。我们注意到这儿的 label 既没有指定parent，也没有对其调用delete。\n\n所以，这儿会造成内存泄露。\n\n书中解释说，对于这种小例子，这点内存泄露不算什么。不清楚官方这个例子的意图是什么，或许是一开始就让大家用指针吧。\n\n三种改进方式\n\n- 分配对象到stack而不是heap中\n```cplusplus\nQLabel label(\"Hello Qt!\");\nlabel.show();\n```\n- 设置标志位，这样，当我们点击关闭按钮时，close()函数将会调用deleteLater\n```cplusplus\nlabel->setAttribute(Qt::WA_DeleteOnClose);\n```\n- 动手调用delete(不就是少了一个么，我们补上还不行么)\n```cplusplus\nint ret = app.exec();\ndelete label;\nreturn ret;\n```\n\n###### 单独列一个吧\n强化一下对前一个例子的了解\n```cplusplus\n#include <QApplication>\n#include <QLabel>\nint main(int argc, char *argv[])\n{\nQApplication app(argc, argv);\nQLabel label(\"Hello Qt!\");\nlabel.show();\nlabel.setAttribute(Qt::WA_DeleteOnClose);\nreturn app.exec();\n}\n```\n运行正常，退出时会崩溃 ，因为label被close时，将会 delete 这儿label对象，但label对象却不是通过new分配到heap中的。\n\n为了使得用户减少自己显式使用delete，Qt将delete隐藏的比较深。这样一来，不使用new为对象分配空间时，反倒需要多多小心了。\n\n###### 隐蔽很深？\n看个小例子：这个程序退出时会直接崩溃 。\n```cplusplus\n#include <QtGui>\nint main(int argc, char* argv[])\n{\n   QApplication app(argc, argv);\n   QLabel label(tr\"Hello Qt!\");\n   QWidget w;\n   label.setParent(&w);\n   w.show();\n   return app.exec();\n}\n```\n问题出在哪儿呢？因为退出时，w 比 label 先被析构，当 w 被析构时，会删除chilren列表中的对象，也就是这儿的 label。但 label 却不是通过new分配在heap中，而是在stack中，可想而知，delete 一个再stack中的对象会怎么样了。相当于\n```cplusplus\nQLabel label();\ndelete &label;\n```\n\n两种改进办法：\n- 一是，将label分配到heap中\n```cplusplus\nQLabel *label = new QLabel(\"Hello Qt!\");\nlabel.setParent(&w)\n```\n- 再一种就是，确保label先于其parent被析构(调整一下顺序)，这样，label析构时将自己从父对象的列表中移除自己，w析构时，children列表中就不会有分配在stack中的对象了。\n```cplusplus\nQWidget w;\nQLabel label(tr\"Hello Qt!\");\n```\n\nQt 对象的父子关系的引入，简化了我们对内存的管理，但是，由于它会在你不太注意的地方调用 delete，所以，使用时还是要当心。\n\n##### 参考\n\n- [http://doc.qt.nokia.com/4.7/qobject.html](http://doc.qt.nokia.com/4.7/qobject.html \"http://doc.qt.nokia.com/4.7/qobject.html\")\n- [http://www.cuteqt.com/blog/?p=824](http://www.cuteqt.com/blog/?p=824 \"http://www.cuteqt.com/blog/?p=824\")\n","slug":"从Qt的delete说开来","updated":1431306847000,"excerpt":"","_id":"z3oiy249wv9ik750","comments":true,"layout":"post","photos":[],"link":""},{"title":"QtWebkit 使用方法","date":1423829329000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","y6dal2tmjzagxp8r"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/gisbeginner/archive/2012/11/10/2763997.html\" title=\"http://www.cnblogs.com/gisbeginner/archive/2012/11/10/2763997.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/gisbeginner/archive/2012/11/10/2763997.html</a></p>\n</blockquote>\n<p><br></p>\n<h5 id=\"让qwebview_设置代理服务器\">让qwebview 设置代理服务器</h5>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">QNetworkProxyproxy;</div><div class=\"line\">proxy<span class=\"subst\">=</span>QNetworkProxy<span class=\"tag\">::HttpProxy</span>;</div><div class=\"line\">proxy<span class=\"built_in\">.</span>setHostName(tr(<span class=\"string\">\"15.12.110.252\"</span>));<span class=\"comment\">//代理服务器</span></div><div class=\"line\">proxy<span class=\"built_in\">.</span>setPort(<span class=\"number\">8080</span>);</div><div class=\"line\">netwkAcssMng<span class=\"subst\">=</span><span class=\"literal\">new</span> QNetworkAccessManager;</div><div class=\"line\">netwkAcssMng<span class=\"subst\">-&gt;</span>setProxy(proxy);</div><div class=\"line\">webV<span class=\"subst\">=</span>qFindChild<span class=\"subst\">&lt;</span>QWebView<span class=\"subst\">*&gt;</span>(this,<span class=\"string\">\"webView\"</span>);<span class=\"comment\">//全局函数</span></div><div class=\"line\">webV<span class=\"subst\">-&gt;</span>page()<span class=\"subst\">-&gt;</span>setNetworkAccessManager(netwkAcssMng);</div><div class=\"line\">webV<span class=\"subst\">-&gt;</span>load(QUrl(<span class=\"string\">\"http://www.google.com.hk/\"</span>));</div><div class=\"line\">webV<span class=\"subst\">-&gt;</span>show();</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h5 id=\"给qtwebkit_创建_插件\">给qtwebkit 创建 插件</h5>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span>\"intelliplugin.h\"</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span>\"shineprint.h\"</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span>&lt;QDebug&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span>&lt;QWebView&gt;</span></div><div class=\"line\"></div><div class=\"line\">IntelliPlugin::IntelliPlugin(QWidget*parent):</div><div class=\"line\">QWebPluginFactory(parent)</div><div class=\"line\">{</div><div class=\"line\">    qDebug()&lt;&lt;<span class=\"string\">\"IntelliPlugin::IntelliPlugin()\"</span>&lt;&lt;endl;</div><div class=\"line\">    MimeTypemime;</div><div class=\"line\">    mime.name=<span class=\"string\">\"application/print-plugin\"</span>;</div><div class=\"line\">    m_mimeType.append(mime);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">IntelliPlugin::~IntelliPlugin()</div><div class=\"line\">{</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">QObject*IntelliPlugin::create(constQString&mimeType,constQUrl&,constQStringList&argumentNames,constQStringList&argumentValues)<span class=\"keyword\">const</span></div><div class=\"line\">{</div><div class=\"line\">    qDebug()&lt;&lt;<span class=\"string\">\"IntelliPlugin::create()\"</span>&lt;&lt;endl;</div><div class=\"line\">    foreach(MimeTypemime,<span class=\"keyword\">this</span>-&gt;m_mimeType){</div><div class=\"line\">        <span class=\"keyword\">if</span>(!mime.name.isEmpty()&&mime.name==mimeType){</div><div class=\"line\">            <span class=\"keyword\">if</span>(mimeType==<span class=\"string\">\"application/print-plugin\"</span>){</div><div class=\"line\">                qDebug()&lt;&lt;<span class=\"string\">\"createshineprint\"</span>&lt;&lt;endl;</div><div class=\"line\">                <span class=\"comment\">//写入自己的类</span></div><div class=\"line\">                ShinePrint*pShinePrint=newShinePrint();</div><div class=\"line\">                qDebug()&lt;&lt;<span class=\"string\">\"finishcreateshineprint.\"</span>&lt;&lt;endl;</div><div class=\"line\">                returnpShinePrint;</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    returnNULL;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">QList&lt;IntelliPlugin::Plugin&gt;IntelliPlugin::plugins()<span class=\"keyword\">const</span></div><div class=\"line\">{</div><div class=\"line\">    Pluginplugin;</div><div class=\"line\">    plugin.name=<span class=\"string\">\"application/print-plugin\"</span>;</div><div class=\"line\">    plugin.description=<span class=\"string\">\"JustforPrintMessagecalltest\"</span>;</div><div class=\"line\">    plugin.mimeTypes.append(m_mimeType);</div><div class=\"line\">    QList&lt;IntelliPlugin::Plugin&gt;plugList;</div><div class=\"line\">    plugList.append(plugin);</div><div class=\"line\">    returnplugList;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//shineprint.cpp 类</span></div><div class=\"line\"></div><div class=\"line\">ShinePrint<span class=\"value\">::<span class=\"function\">ShinePrint</span>(QWidget*parent):<span class=\"function\">QLabel</span>(parent)</span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"function\">qDebug</span>()&lt;&lt;<span class=\"string\">\"ShinePrint::ShinePrint()\"</span>&lt;&lt;endl;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">ShinePrint<span class=\"value\">::~<span class=\"function\">ShinePrint</span>()</span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"function\">qDebug</span>()&lt;&lt;<span class=\"string\">\"ShinePrint::~ShinePrint()\"</span>&lt;&lt;endl;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">voidShinePrint<span class=\"value\">::<span class=\"function\">PrintMessag</span>(QStringmsg)</span></div><div class=\"line\">{</div><div class=\"line\">    QMessageBoxmsgBox;</div><div class=\"line\">    <span class=\"comment\">//QFontfont;</span></div><div class=\"line\">    <span class=\"comment\">//font.setPixelSize(30);</span></div><div class=\"line\">    <span class=\"comment\">//msgBox.setFont(font);</span></div><div class=\"line\">    msgBox<span class=\"class\">.setText</span>(msg);</div><div class=\"line\">    msgBox<span class=\"class\">.setInformativeText</span>(\"Justfortest!\");</div><div class=\"line\">    msgBox<span class=\"class\">.setStandardButtons</span>(QMessageBox<span class=\"value\">::Save|QMessageBox::Cancel);</span></div><div class=\"line\">    msgBox<span class=\"class\">.setDefaultButton</span>(QMessageBox<span class=\"value\">::Save);</span></div><div class=\"line\">    msgBox<span class=\"class\">.exec</span>();</div><div class=\"line\">    <span class=\"function\">qDebug</span>()&lt;&lt;\"<span class=\"function\">JavaAlert</span>()JavaScriptWillbecalled\"&lt;&lt;endl;</div><div class=\"line\">    <span class=\"comment\">//view-&gt;page()-&gt;mainFrame()-&gt;evaluateJavaScript(\"JavaAlert();\");</span></div><div class=\"line\">    qApp-&gt;<span class=\"function\">exit</span>(0);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h5 id=\"让javascript_调用c++_类\">让javascript 调用c++ 类</h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;object type=<span class=\"string\">\"application/print-plugin\"</span> data=<span class=\"string\">\"http://www.sohu.com\"</span> width=<span class=\"string\">\"1\"</span> height=<span class=\"string\">\"1\"</span> id=<span class=\"string\">\"Callobject\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"title\">object</span>&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">function print() {</div><div class=\"line\">var s5 = \"请耐心等待，过号请到分诊台重新分诊，谢谢合作\";</div><div class=\"line\">/*调用的Qt中的方法: class ShinePrint::void PrintMessag(QString msg)*/</div><div class=\"line\">var printResult = document.getElementById(\"Callobject\").PrintMessag(s5);</div><div class=\"line\">if (printResult <span class=\"tag\">&lt; <span class=\"attribute\">0</span>)</span></div><div class=\"line\"><span class=\"attribute\">alert</span>(\"网络出现故障，打印失败，请联系管理员\");</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">&lt;<span class=\"attribute\">button</span> <span class=\"attribute\">onclick</span>=<span class=\"value\">\"print()\"</span>&gt;clickqtjavascript <span class=\"tag\">&lt;/<span class=\"title\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">webview 进行必要的设置</div><div class=\"line\"></div><div class=\"line\">ui-&gt;webView-&gt;settings()-&gt;setAttribute(QWebSettings::PluginsEnabled,true);</div><div class=\"line\"></div><div class=\"line\">ui-&gt;webView-&gt;settings()-&gt;setAttribute(QWebSettings::JavascriptEnabled,true);</div><div class=\"line\"></div><div class=\"line\">ui-&gt;webView-&gt;page()-&gt;setPluginFactory(newIntelliPlugin);</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h5 id=\"当一个load一个页面，希望通过点击这个页面的2级连接来做其他事情,其中需要在load之后\">当一个load一个页面，希望通过点击这个页面的2级连接来做其他事情,其中需要在load之后</h5>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">ui-&gt;webView-&gt;load(QUrl(<span class=\"string\">\"http://www.baidu.com\"</span>));</div><div class=\"line\">ui-&gt;webView-&gt;page()-&gt;setLinkDelegationPolicy(QWebPage::DelegateAllLinks);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//需要给webveiw 的siganal    （linkClicked）  加个槽函数</span></div><div class=\"line\">voidMainWindow::on_webView_linkClicked(constQUrl&arg1)</div><div class=\"line\">{</div><div class=\"line\">    ui-&gt;webView-&gt;load(QUrl(<span class=\"string\">\"http://www.qq.com\"</span>));</div><div class=\"line\">    QMessageBoxhimessagebox;</div><div class=\"line\">    himessagebox.setText(<span class=\"string\">\"hitodayisaniceday\"</span>);</div><div class=\"line\">    himessagebox.exec();</div><div class=\"line\">}<span class=\"comment\">// 这样就行了</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//打开本地 html 文件</span></div><div class=\"line\">QStringfilename=QFileDialog::getOpenFileName(this,tr(<span class=\"string\">\"打开文件...\"</span>),QString(),tr(<span class=\"string\">\"网页文件(*.htm*.mht*.html);;AllFiles(*.*)\"</span>));</div><div class=\"line\"><span class=\"keyword\">if</span>(!filename.isEmpty())</div><div class=\"line\">{</div><div class=\"line\">    ui-&gt;webView-&gt;settings()-&gt;setAttribute(QWebSettings::PluginsEnabled,<span class=\"keyword\">true</span>);</div><div class=\"line\">    ui-&gt;webView-&gt;settings()-&gt;setAttribute(QWebSettings::JavascriptEnabled,<span class=\"keyword\">true</span>);</div><div class=\"line\">    ui-&gt;webView-&gt;page()-&gt;setPluginFactory(newIntelliPlugin);</div><div class=\"line\">    ui-&gt;webView-&gt;load(QUrl::fromUserInput(filename));</div><div class=\"line\">    QStringcurFile=QFileInfo(filename).canonicalFilePath();<span class=\"comment\">//获得文件的标准路径</span></div><div class=\"line\">    this-&gt;setWindowTitle(curFile+<span class=\"string\">\"-WebView\"</span>);</div><div class=\"line\">    <span class=\"comment\">//this-&gt;statusLabel-&gt;setText(\"\");</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//隐藏qwebview 的滑动条</span></div><div class=\"line\">ui.webView-&gt;page()-&gt;mainFrame()-&gt;setScrollBarPolicy(Qt::Horizontal,Qt::ScrollBarAlwaysOff);</div><div class=\"line\">ui.webView-&gt;page()-&gt;mainFrame()-&gt;setScrollBarPolicy(Qt::Vertical,Qt::ScrollBarAlwaysOff);</div><div class=\"line\">ui.webView_2-&gt;page()-&gt;mainFrame()-&gt;setScrollBarPolicy(Qt::Horizontal,Qt::ScrollBarAlwaysOff);</div><div class=\"line\">ui.webView_2-&gt;page()-&gt;mainFrame()-&gt;setScrollBarPolicy(Qt::Vertical,Qt::ScrollBarAlwaysOff);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//qt 启动其他默认浏览器打开一个网页</span></div><div class=\"line\">Qt.openUrlExternally(<span class=\"string\">\"http://yoururl\"</span>)</div><div class=\"line\">Qt.openUrlExternally(<span class=\"string\">\"tel:&lt;number&gt;\"</span>)</div><div class=\"line\">QDesktopServices::openUrl(arg1);</div><div class=\"line\">qt 调用html页面的javascript</div><div class=\"line\">ui.webView-&gt;page()-&gt;mainFrame()-&gt;evaluateJavaScript(<span class=\"string\">\"helloworld()\"</span>); <span class=\"comment\">//helloworld是html 里面的自定义javascript 方法</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//任何获得焦点的控件 不论是qt自己的控件还是html页面里德控件都会 获得剪切板里面的文字</span></div><div class=\"line\"></div><div class=\"line\">ui.webView-&gt;page()-&gt;setContentEditable(<span class=\"keyword\">true</span>);</div><div class=\"line\">ui.webView-&gt;page()-&gt;triggerAction(QWebPage::Paste,<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-02-13-QtWebkit-使用方法.md","raw":"title: QtWebkit 使用方法\ndate: 2015-02-13 20:08:49\ncategories:\n- Qt\ntags:\n- Qt\n- QtWebkit\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/gisbeginner/archive/2012/11/10/2763997.html](http://www.cnblogs.com/gisbeginner/archive/2012/11/10/2763997.html \"http://www.cnblogs.com/gisbeginner/archive/2012/11/10/2763997.html\")\n\n<br>\n##### 让qwebview 设置代理服务器\n```cplusplus\nQNetworkProxyproxy;\nproxy=QNetworkProxy::HttpProxy;\nproxy.setHostName(tr(\"15.12.110.252\"));//代理服务器\nproxy.setPort(8080);\nnetwkAcssMng=new QNetworkAccessManager;\nnetwkAcssMng->setProxy(proxy);\nwebV=qFindChild<QWebView*>(this,\"webView\");//全局函数\nwebV->page()->setNetworkAccessManager(netwkAcssMng);\nwebV->load(QUrl(\"http://www.google.com.hk/\"));\nwebV->show();\n```\n<br>\n##### 给qtwebkit 创建 插件\n```cplusplus\n#include\"intelliplugin.h\"\n#include\"shineprint.h\"\n#include<QDebug>\n#include<QWebView>\n\nIntelliPlugin::IntelliPlugin(QWidget*parent):\nQWebPluginFactory(parent)\n{\n    qDebug()<<\"IntelliPlugin::IntelliPlugin()\"<<endl;\n    MimeTypemime;\n    mime.name=\"application/print-plugin\";\n    m_mimeType.append(mime);\n}\n\nIntelliPlugin::~IntelliPlugin()\n{\n}\n\nQObject*IntelliPlugin::create(constQString&mimeType,constQUrl&,constQStringList&argumentNames,constQStringList&argumentValues)const\n{\n    qDebug()<<\"IntelliPlugin::create()\"<<endl;\n    foreach(MimeTypemime,this->m_mimeType){\n        if(!mime.name.isEmpty()&&mime.name==mimeType){\n            if(mimeType==\"application/print-plugin\"){\n                qDebug()<<\"createshineprint\"<<endl;\n                //写入自己的类\n                ShinePrint*pShinePrint=newShinePrint();\n                qDebug()<<\"finishcreateshineprint.\"<<endl;\n                returnpShinePrint;\n            }\n        }\n    }\n    returnNULL;\n}\n\nQList<IntelliPlugin::Plugin>IntelliPlugin::plugins()const\n{\n    Pluginplugin;\n    plugin.name=\"application/print-plugin\";\n    plugin.description=\"JustforPrintMessagecalltest\";\n    plugin.mimeTypes.append(m_mimeType);\n    QList<IntelliPlugin::Plugin>plugList;\n    plugList.append(plugin);\n    returnplugList;\n}\n```\n```cplusplus\n//shineprint.cpp 类\n\nShinePrint::ShinePrint(QWidget*parent):QLabel(parent)\n{\n    qDebug()<<\"ShinePrint::ShinePrint()\"<<endl;\n}\n\nShinePrint::~ShinePrint()\n{\n    qDebug()<<\"ShinePrint::~ShinePrint()\"<<endl;\n}\n\nvoidShinePrint::PrintMessag(QStringmsg)\n{\n    QMessageBoxmsgBox;\n    //QFontfont;\n    //font.setPixelSize(30);\n    //msgBox.setFont(font);\n    msgBox.setText(msg);\n    msgBox.setInformativeText(\"Justfortest!\");\n    msgBox.setStandardButtons(QMessageBox::Save|QMessageBox::Cancel);\n    msgBox.setDefaultButton(QMessageBox::Save);\n    msgBox.exec();\n    qDebug()<<\"JavaAlert()JavaScriptWillbecalled\"<<endl;\n    //view->page()->mainFrame()->evaluateJavaScript(\"JavaAlert();\");\n    qApp->exit(0);\n}\n```\n<br>\n##### 让javascript 调用c++ 类\n```javascript \n<object type=\"application/print-plugin\" data=\"http://www.sohu.com\" width=\"1\" height=\"1\" id=\"Callobject\">\n</object>\n\nfunction print() {\nvar s5 = \"请耐心等待，过号请到分诊台重新分诊，谢谢合作\";\n/*调用的Qt中的方法: class ShinePrint::void PrintMessag(QString msg)*/\nvar printResult = document.getElementById(\"Callobject\").PrintMessag(s5);\nif (printResult < 0)\nalert(\"网络出现故障，打印失败，请联系管理员\");\n}\n\n<button onclick=\"print()\">clickqtjavascript </button>\n\nwebview 进行必要的设置\n\nui->webView->settings()->setAttribute(QWebSettings::PluginsEnabled,true);\n\nui->webView->settings()->setAttribute(QWebSettings::JavascriptEnabled,true);\n\nui->webView->page()->setPluginFactory(newIntelliPlugin);\n```\n<br>\n##### 当一个load一个页面，希望通过点击这个页面的2级连接来做其他事情,其中需要在load之后\n```cplusplus\nui->webView->load(QUrl(\"http://www.baidu.com\"));\nui->webView->page()->setLinkDelegationPolicy(QWebPage::DelegateAllLinks);\n\n//需要给webveiw 的siganal    （linkClicked）  加个槽函数\nvoidMainWindow::on_webView_linkClicked(constQUrl&arg1)\n{\n    ui->webView->load(QUrl(\"http://www.qq.com\"));\n    QMessageBoxhimessagebox;\n    himessagebox.setText(\"hitodayisaniceday\");\n    himessagebox.exec();\n}// 这样就行了\n\n//打开本地 html 文件\nQStringfilename=QFileDialog::getOpenFileName(this,tr(\"打开文件...\"),QString(),tr(\"网页文件(*.htm*.mht*.html);;AllFiles(*.*)\"));\nif(!filename.isEmpty())\n{\n    ui->webView->settings()->setAttribute(QWebSettings::PluginsEnabled,true);\n    ui->webView->settings()->setAttribute(QWebSettings::JavascriptEnabled,true);\n    ui->webView->page()->setPluginFactory(newIntelliPlugin);\n    ui->webView->load(QUrl::fromUserInput(filename));\n    QStringcurFile=QFileInfo(filename).canonicalFilePath();//获得文件的标准路径\n    this->setWindowTitle(curFile+\"-WebView\");\n    //this->statusLabel->setText(\"\");\n}\n\n//隐藏qwebview 的滑动条\nui.webView->page()->mainFrame()->setScrollBarPolicy(Qt::Horizontal,Qt::ScrollBarAlwaysOff);\nui.webView->page()->mainFrame()->setScrollBarPolicy(Qt::Vertical,Qt::ScrollBarAlwaysOff);\nui.webView_2->page()->mainFrame()->setScrollBarPolicy(Qt::Horizontal,Qt::ScrollBarAlwaysOff);\nui.webView_2->page()->mainFrame()->setScrollBarPolicy(Qt::Vertical,Qt::ScrollBarAlwaysOff);\n\n//qt 启动其他默认浏览器打开一个网页\nQt.openUrlExternally(\"http://yoururl\")\nQt.openUrlExternally(\"tel:<number>\")\nQDesktopServices::openUrl(arg1);\nqt 调用html页面的javascript\nui.webView->page()->mainFrame()->evaluateJavaScript(\"helloworld()\"); //helloworld是html 里面的自定义javascript 方法\n\n//任何获得焦点的控件 不论是qt自己的控件还是html页面里德控件都会 获得剪切板里面的文字\n\nui.webView->page()->setContentEditable(true);\nui.webView->page()->triggerAction(QWebPage::Paste,true);\n```\n","slug":"QtWebkit-使用方法","updated":1431306847000,"excerpt":"","_id":"q3f4s1db7kqdia0y","comments":true,"layout":"post","photos":[],"link":""},{"title":"Git add 命令","date":1424002561000,"categories":["g4jvbrc8twywlctz"],"tags":["pyz872qzssac5sut","srie2a2zkeb1koh7"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/tuhuolong/article/details/32956765\" title=\"http://blog.csdn.net/tuhuolong/article/details/32956765\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/tuhuolong/article/details/32956765</a></p>\n</blockquote>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add -<span class=\"constant\">A</span>    <span class=\"comment\">#stages All</span></div><div class=\"line\">git add .     <span class=\"comment\">#stages new and modified, without deleted</span></div><div class=\"line\">git add -u    <span class=\"comment\">#stages modified and deleted, without new</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-02-15-Git-add-命令.md","raw":"title: Git add 命令\ndate: 2015-02-15 20:16:01\ncategories:\n- Git\ntags:\n- Git\n- add\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/tuhuolong/article/details/32956765](http://blog.csdn.net/tuhuolong/article/details/32956765 \"http://blog.csdn.net/tuhuolong/article/details/32956765\")\n\n```ruby\ngit add -A    #stages All\ngit add .     #stages new and modified, without deleted\ngit add -u    #stages modified and deleted, without new\n```\n","slug":"Git-add-命令","updated":1431306847000,"excerpt":"","_id":"jtob0zmy721k28xg","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt中槽函数如何获取按钮QPushButton的按钮文本","date":1424003341000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","bbbe0lvo08zcm4v3","bq9vy0j638f5yy4p"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/sowhat_ah/article/details/43483557\" title=\"http://blog.csdn.net/sowhat_ah/article/details/43483557\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/sowhat_ah/article/details/43483557</a></p>\n</blockquote>\n<p>Qt中的信号-槽机制大大降低了编程的耦合度；</p>\n<p>QPushButton是按钮中最常用的一个组件；</p>\n<p>但是QPushButton的几个信号中除了缺省参之外都没有带参：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q_SIGNALS:  </div><div class=\"line\">    <span class=\"keyword\">void</span> pressed();  </div><div class=\"line\">    <span class=\"keyword\">void</span> released();  </div><div class=\"line\">    <span class=\"keyword\">void</span> clicked(<span class=\"keyword\">bool</span> <span class=\"keyword\">checked</span> = <span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure>\n\n<p><br><br>也就是说，若你的槽函数与多个QPushButton的clicked()信号相连，则你的槽函数根本无法区分是哪个QPushButton发出的信号；</p>\n<p>这在很多时候用起来也是很不方便；</p>\n<p>“软件开发中遇到的所有问题，都可以通过增加一层抽象而得以解决”</p>\n<p>同样的，这个问题我们可以通过子类化来解决：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">class KeyButton <span class=\"value\">: public QPushButton  </span></div><div class=\"line\">{  </div><div class=\"line\">    Q_OBJECT  </div><div class=\"line\">public:  </div><div class=\"line\">    explicit <span class=\"function\">KeyButton</span>(QWidget *parent = <span class=\"number\">0</span>) : <span class=\"function\">QPushButton</span>(parent),  </div><div class=\"line\">        <span class=\"function\">pauseMsecs</span>(<span class=\"number\">400</span>), <span class=\"function\">intervalMsecs</span>(<span class=\"number\">30</span>)  </div><div class=\"line\">    {  </div><div class=\"line\">        tm = new <span class=\"function\">QTimer</span>(this);  </div><div class=\"line\">        <span class=\"function\">connect</span>(tm, <span class=\"function\">SIGNAL</span>(<span class=\"function\">timeout</span>()), this, <span class=\"function\">SLOT</span>(<span class=\"function\">on_pressed_last</span>()));  </div><div class=\"line\">        <span class=\"function\">connect</span>(this, <span class=\"function\">SIGNAL</span>(<span class=\"function\">pressed</span>()), this, <span class=\"function\">SLOT</span>(<span class=\"function\">on_pressed</span>()));  </div><div class=\"line\">        <span class=\"function\">connect</span>(this, <span class=\"function\">SIGNAL</span>(<span class=\"function\">released</span>()), this, <span class=\"function\">SLOT</span>(<span class=\"function\">on_released</span>()));  </div><div class=\"line\">        <span class=\"function\">connect</span>(this, <span class=\"function\">SIGNAL</span>(<span class=\"function\">clicked</span>()), this, <span class=\"function\">SLOT</span>(<span class=\"function\">on_clicked</span>()));  </div><div class=\"line\">    }  </div><div class=\"line\">  </div><div class=\"line\">private<span class=\"value\">:  </span></div><div class=\"line\">    QTimer *tm;  </div><div class=\"line\">    long pauseMsecs;  </div><div class=\"line\">    long intervalMsecs;  </div><div class=\"line\">  </div><div class=\"line\">signals<span class=\"value\">:  </span></div><div class=\"line\">    void <span class=\"function\">keyPressed</span>(const QString &msg);  </div><div class=\"line\">    void <span class=\"function\">keyReleased</span>(const QString &msg);  </div><div class=\"line\">    void <span class=\"function\">keyClicked</span>(const QString &msg);  </div><div class=\"line\">  </div><div class=\"line\">public slots<span class=\"value\">:  </span></div><div class=\"line\">    void <span class=\"function\">on_pressed</span>() { emit this-&gt;<span class=\"function\">keyPressed</span>(this-&gt;<span class=\"function\">text</span>());  </div><div class=\"line\">                        tm-&gt;<span class=\"function\">start</span>(pauseMsecs); }  </div><div class=\"line\">    void <span class=\"function\">on_pressed_last</span>() { emit this-&gt;<span class=\"function\">keyPressed</span>(this-&gt;<span class=\"function\">text</span>());  </div><div class=\"line\">                             tm-&gt;<span class=\"function\">setInterval</span>(intervalMsecs); }  </div><div class=\"line\">    void <span class=\"function\">on_released</span>() { tm-&gt;<span class=\"function\">stop</span>(); emit this-&gt;<span class=\"function\">keyReleased</span>(this-&gt;<span class=\"function\">text</span>()); }  </div><div class=\"line\">    void <span class=\"function\">on_clicked</span>() { emit this-&gt;<span class=\"function\">keyClicked</span>(this-&gt;<span class=\"function\">text</span>()); }  </div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p><br><br>这其中的定时器，是为了实现类似长按则连续输入的按键效果；</p>\n<p>这样的按钮类就可以在自己的信号Clickied()、Pressed()或Released()中夹带各种信息，使得槽函数能根据信息不同进行不同处理，这里夹带的是按钮上的文本，你也可以根据需求随意修改，夹带各种你想传递的信息。</p>\n","source":"_posts/2015-02-15-Qt中槽函数如何获取按钮QPushButton的按钮文本.md","raw":"title: Qt中槽函数如何获取按钮QPushButton的按钮文本\ndate: 2015-02-15 20:29:01\ncategories:\n- Qt\ntags:\n- Qt\n- 信号\n- 槽\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/sowhat_ah/article/details/43483557](http://blog.csdn.net/sowhat_ah/article/details/43483557 \"http://blog.csdn.net/sowhat_ah/article/details/43483557\")\n\nQt中的信号-槽机制大大降低了编程的耦合度；\n\nQPushButton是按钮中最常用的一个组件；\n\n但是QPushButton的几个信号中除了缺省参之外都没有带参：\n```cplusplus\nQ_SIGNALS:  \n    void pressed();  \n    void released();  \n    void clicked(bool checked = false);  \n```\n<br>\n也就是说，若你的槽函数与多个QPushButton的clicked()信号相连，则你的槽函数根本无法区分是哪个QPushButton发出的信号；\n\n这在很多时候用起来也是很不方便；\n\n“软件开发中遇到的所有问题，都可以通过增加一层抽象而得以解决”\n\n同样的，这个问题我们可以通过子类化来解决：\n```cplusplus\nclass KeyButton : public QPushButton  \n{  \n    Q_OBJECT  \npublic:  \n    explicit KeyButton(QWidget *parent = 0) : QPushButton(parent),  \n        pauseMsecs(400), intervalMsecs(30)  \n    {  \n        tm = new QTimer(this);  \n        connect(tm, SIGNAL(timeout()), this, SLOT(on_pressed_last()));  \n        connect(this, SIGNAL(pressed()), this, SLOT(on_pressed()));  \n        connect(this, SIGNAL(released()), this, SLOT(on_released()));  \n        connect(this, SIGNAL(clicked()), this, SLOT(on_clicked()));  \n    }  \n  \nprivate:  \n    QTimer *tm;  \n    long pauseMsecs;  \n    long intervalMsecs;  \n  \nsignals:  \n    void keyPressed(const QString &msg);  \n    void keyReleased(const QString &msg);  \n    void keyClicked(const QString &msg);  \n  \npublic slots:  \n    void on_pressed() { emit this->keyPressed(this->text());  \n                        tm->start(pauseMsecs); }  \n    void on_pressed_last() { emit this->keyPressed(this->text());  \n                             tm->setInterval(intervalMsecs); }  \n    void on_released() { tm->stop(); emit this->keyReleased(this->text()); }  \n    void on_clicked() { emit this->keyClicked(this->text()); }  \n}; \n```\n<br>\n这其中的定时器，是为了实现类似长按则连续输入的按键效果；\n\n这样的按钮类就可以在自己的信号Clickied()、Pressed()或Released()中夹带各种信息，使得槽函数能根据信息不同进行不同处理，这里夹带的是按钮上的文本，你也可以根据需求随意修改，夹带各种你想传递的信息。\n","slug":"Qt中槽函数如何获取按钮QPushButton的按钮文本","updated":1431306847000,"excerpt":"","_id":"fyuuojeoi40p5joe","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt mapToGlobal 以及 mapToParent 理解要点","date":1425041312000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","yvm50e1cnpimnint","mfvwmsfpds4dlui1"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/wangjieest/article/details/8423700\" title=\"http://blog.csdn.net/wangjieest/article/details/8423700\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/wangjieest/article/details/8423700</a></p>\n</blockquote>\n<p>Qt 控件坐标转换,一整子没接触又忘了.</p>\n<p>总结下: 这两个函数都是转换相对坐标系用的. 用另一个坐标系统的坐标值, 来表达当前坐标系统中某个坐标所指向的某个点,</p>\n<p>记住: 一定要先确两个坐标系统…再确定一个点…</p>\n<p>永远要注意,这些函数都有对象的成员函数.即使不写出来也会有一个this指针.(很大程度上都是忘记这个坐标系统而导致的)</p>\n<p>例如 <code>pWidget-&gt;mapToGlobal(QPoint(x,y));</code></p>\n<p>即 把你在pWidget里面的坐标(x,y) 所表示的点. 用Global的坐标表示. </p>\n<p>程序的转换过程也是比较简单的: <code>pWidget-&gt;globalPos()+QPoint(x,y);</code></p>\n<p>当然,这里没有 globalPos 这个函数. </p>\n<p>但是我们可以变通一个.即 <code>pWidget-&gt;mapToGlobal(QPoint(0,0)) == pWidget-&gt;globalPos();</code></p>\n<p>把pWidget的0坐标,切换成全局坐标来表达.</p>\n<p>那么,相对于pWidget的任何坐标都能切换到全局了.</p>\n<p><code>mapToParent</code>也是同理.</p>\n<p>至于<code>mapFromGlobal</code>和<code>mapFromParent</code>只要注意是那两个坐标系统要进行转换.就应该很明确了.</p>\n<p>(Qt父窗口有对每个子控件坐标的记录…Qt 后台有对每个控件Global坐标的记录)</p>\n","source":"_posts/2015-02-27-Qt-mapToGlobal-以及-mapToParent-理解要点.md","raw":"title: Qt mapToGlobal 以及 mapToParent 理解要点\ndate: 2015-02-27 20:48:32\ncategories:\n- Qt\ntags:\n- Qt\n- mapToGlobal\n- mapToParent\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/wangjieest/article/details/8423700](http://blog.csdn.net/wangjieest/article/details/8423700 \"http://blog.csdn.net/wangjieest/article/details/8423700\")\n\n\nQt 控件坐标转换,一整子没接触又忘了.\n\n总结下: 这两个函数都是转换相对坐标系用的. 用另一个坐标系统的坐标值, 来表达当前坐标系统中某个坐标所指向的某个点,\n\n记住: 一定要先确两个坐标系统...再确定一个点...\n\n永远要注意,这些函数都有对象的成员函数.即使不写出来也会有一个this指针.(很大程度上都是忘记这个坐标系统而导致的)\n\n例如 `pWidget->mapToGlobal(QPoint(x,y));`\n\n即 把你在pWidget里面的坐标(x,y) 所表示的点. 用Global的坐标表示. \n\n程序的转换过程也是比较简单的: `pWidget->globalPos()+QPoint(x,y);`\n\n当然,这里没有 globalPos 这个函数. \n\n但是我们可以变通一个.即 `pWidget->mapToGlobal(QPoint(0,0)) == pWidget->globalPos();`\n\n把pWidget的0坐标,切换成全局坐标来表达.\n\n那么,相对于pWidget的任何坐标都能切换到全局了.\n\n`mapToParent`也是同理.\n\n至于`mapFromGlobal`和`mapFromParent`只要注意是那两个坐标系统要进行转换.就应该很明确了.\n\n(Qt父窗口有对每个子控件坐标的记录...Qt 后台有对每个控件Global坐标的记录)\n","slug":"Qt-mapToGlobal-以及-mapToParent-理解要点","updated":1431306847000,"excerpt":"","_id":"vhifgrnxjej1xmpm","comments":true,"layout":"post","photos":[],"link":""},{"title":"解决 Git 里 fatal: the remote end hung up unexpectedly","date":1425265464000,"categories":["g4jvbrc8twywlctz"],"tags":["xgsjmlcr489el37m"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p><code>fatal: the remote end hung up unexpectedly</code><br>发生在push命令中，有可能是push的文件过大导致。</p>\n<h2 id=\"解决方法：\"><strong>解决方法：</strong></h2>\n<h3 id=\"for_windows\"><em>for windows</em></h3>\n<p>在<code>.git/config</code>文件中加入</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">[http]</span></div><div class=\"line\"><span class=\"setting\">postBuffer = <span class=\"value\"><span class=\"number\">524288000</span></span></span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h3 id=\"for_linux\"><em>for linux</em></h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config <span class=\"keyword\">http</span>.postBuffer <span class=\"number\">524288000</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-02-解决-Git-里-fatal-the-remote-end-hung-up-unexpectedly.md","raw":"title: \"解决 Git 里 fatal: the remote end hung up unexpectedly\"\ndate: 2015-03-02 11:04:24\ncategories:\n- Git\ntags:\n- fatal\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n`fatal: the remote end hung up unexpectedly`\n发生在push命令中，有可能是push的文件过大导致。\n\n## **解决方法：** ##\n### *for windows* ###\n在`.git/config`文件中加入\n```\n[http]\npostBuffer = 524288000\n```\n<br>\n### *for linux* ###\n```\ngit config http.postBuffer 524288000\n```\n","slug":"解决-Git-里-fatal-the-remote-end-hung-up-unexpectedly","updated":1431306847000,"excerpt":"","_id":"a5ymqm3pmrgx8c1m","comments":true,"layout":"post","photos":[],"link":""},{"title":"在QtWebKit.QWebView中显示透明背景的网页","date":1425455619000,"categories":["ccfn720olj32wb0n"],"tags":["ycxziuf98rkp8m02","qegbn5t5ggkds76e","fgd1cobx78rlxtt7","lwl993ip3oiriht5"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p><code>Qt</code>中的<code>QtWebKit</code>让我们可以轻而易举地在客户端里面嵌入网页，而网页的灵活性远远大于需要编译动作的客户端，当我们有变动只需要发布修改的网页而无需重新编译客户端，大大提高了我们开发和发布的效率。</p>\n<p>不过默认的<code>QtWebKit.QWebView</code>是不透明的，当我们需要让透明网页页面和客户端更好地整合起来的时候，就需要做一些特殊的处理：</p>\n<ol>\n<li>首先，确保网页页面背景已经设为<code>transparent</code>；</li>\n<li>然后设置<code>QtWebKit.QWebView</code>的样式，代码如下：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">transparent_webview</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    app = QtGui.QApplication(sys.argv)</div><div class=\"line\">    web = QtWebKit.QWebView()</div><div class=\"line\">    web.setAttribute(QtCore.Qt.WA_TranslucentBackground)</div><div class=\"line\">    web.setWindowFlags(QtCore.Qt.FramelessWindowHint)</div><div class=\"line\">    web.setStyleSheet(<span class=\"string\">'QWebView { background: transparent; }'</span>)</div><div class=\"line\">    web.load(QtCore.QUrl(<span class=\"string\">\"http://www.moky.cc/transparent.html\"</span>))</div><div class=\"line\">    web.show()</div><div class=\"line\">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-04-在QtWebKit-QWebView中显示透明背景的网页.md","raw":"title: 在QtWebKit.QWebView中显示透明背景的网页\ndate: 2015-03-04 15:53:39\ncategories:\n- PyQt\ntags:\n- Qt\n- QtWebKit\n- QWebView\n- 透明网页\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n`Qt`中的`QtWebKit`让我们可以轻而易举地在客户端里面嵌入网页，而网页的灵活性远远大于需要编译动作的客户端，当我们有变动只需要发布修改的网页而无需重新编译客户端，大大提高了我们开发和发布的效率。\n\n不过默认的`QtWebKit.QWebView`是不透明的，当我们需要让透明网页页面和客户端更好地整合起来的时候，就需要做一些特殊的处理：\n\n1. 首先，确保网页页面背景已经设为`transparent`；\n2. 然后设置`QtWebKit.QWebView`的样式，代码如下：\n```python\ndef transparent_webview():\n    app = QtGui.QApplication(sys.argv)\n    web = QtWebKit.QWebView()\n    web.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n    web.setWindowFlags(QtCore.Qt.FramelessWindowHint)\n    web.setStyleSheet('QWebView { background: transparent; }')\n    web.load(QtCore.QUrl(\"http://www.moky.cc/transparent.html\"))\n    web.show()\n    sys.exit(app.exec_())\n```","slug":"在QtWebKit-QWebView中显示透明背景的网页","updated":1431306847000,"excerpt":"","_id":"n5xovi3r15js9fua","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python模块之uuid","date":1425548626000,"categories":["ldi4kaat0baj4vp1"],"tags":["7rp75tvzwlm9nlep"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/zhaoweikid/article/details/1649786\" title=\"http://blog.csdn.net/zhaoweikid/article/details/1649786\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/zhaoweikid/article/details/1649786</a></p>\n</blockquote>\n<p><code>uuid</code>是一种唯一标识，在许多领域作为标识用途。<code>python</code>的<code>uuid</code>模块就是用来生成它的。<br>闲话不说，<code>python</code>提供的生成<code>uuid</code>的方法一共有4种，分别是：</p>\n<ol>\n<li>从硬件地址和时间生成</li>\n<li>从md5算法生成</li>\n<li>随机生成</li>\n<li>从<code>SHA-1</code>算法生成</li>\n</ol>\n<p>他们在<code>uuid</code>模块里对应<code>uuid1</code>, <code>uuid3</code>, <code>uuid4</code>, <code>uuid5</code>这几个方法，注意没有<code>uuid2</code>。<br>下面是示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#-*- encoding: gb2312 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> uuid</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> uuid.uuid1()</div><div class=\"line\"><span class=\"keyword\">print</span> uuid.uuid3(uuid.NAMESPACE_DNS, <span class=\"string\">'testme'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> uuid.uuid4()</div><div class=\"line\"><span class=\"keyword\">print</span> uuid.uuid5(uuid.NAMESPACE_DNS, <span class=\"string\">'testme'</span>)</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-05-Python模块之uuid.md","raw":"title: Python模块之uuid\ndate: 2015-03-05 17:43:46\ncategories:\n- Python\ntags:\n- uuid\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/zhaoweikid/article/details/1649786](http://blog.csdn.net/zhaoweikid/article/details/1649786 \"http://blog.csdn.net/zhaoweikid/article/details/1649786\")\n\n`uuid`是一种唯一标识，在许多领域作为标识用途。`python`的`uuid`模块就是用来生成它的。\n闲话不说，`python`提供的生成`uuid`的方法一共有4种，分别是：\n\n1. 从硬件地址和时间生成\n2. 从md5算法生成\n3. 随机生成\n4. 从`SHA-1`算法生成\n\n他们在`uuid`模块里对应`uuid1`, `uuid3`, `uuid4`, `uuid5`这几个方法，注意没有`uuid2`。\n下面是示例：\n```python\n#-*- encoding: gb2312 -*-\nimport uuid\n\nprint uuid.uuid1()\nprint uuid.uuid3(uuid.NAMESPACE_DNS, 'testme')\nprint uuid.uuid4()\nprint uuid.uuid5(uuid.NAMESPACE_DNS, 'testme')\n```\n","slug":"Python模块之uuid","updated":1431306847000,"excerpt":"","_id":"74uefl28uuzudds2","comments":true,"layout":"post","photos":[],"link":""},{"title":"CSS3快速弄明白border-image","date":1425641492000,"categories":["eoozibpfeshi5a5g"],"tags":["ivqujun5i6tcl8vp"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/niuniu/archive/2010/06/21/1761803.html\" title=\"http://www.cnblogs.com/niuniu/archive/2010/06/21/1761803.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/niuniu/archive/2010/06/21/1761803.html</a></p>\n</blockquote>\n<p>在看这个属性时，好像国内的文章都没给大家说太明白，今天就一起说说</p>\n<p>首先来一个素材图片whiteButton.png<br><img src=\"whiteButton.png\" alt=\"\"></p>\n<p>然后我们要做成这样的效果：<br><img src=\"2010-06-21_103813.png\" alt=\"\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">style</span>=<span class=\"value\">\"-webkit-border-image: url(images/whiteButton.png) 0 12 0 12 stretch stretch;</span></span></div><div class=\"line\">    -moz-border-image: url(images/whiteButton.png) 0 12 0 12 round stretch;</div><div class=\"line\">    border-image: url(images/whiteButton.png) 0 12 0 12 stretch stretch;</div><div class=\"line\">    display: block;</div><div class=\"line\">    width:600px;</div><div class=\"line\">    border-width:0 12px;</div><div class=\"line\">    padding:10px;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    font-size: 16px;</div><div class=\"line\">    text-decoration: inherit;</div><div class=\"line\">    color:white;+color:black;\"&gt;在safari3+和FF3.5,chrome5.0+,opera10.53浏览器里能看到边框背景图</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>下面我们来讲一下基本知识：</p>\n<p><strong>定义</strong>： border-image ： none | <image> [ <number> | <percentage>]{1,4} [ / <border-width>{1,4} ]? [ stretch | repeat | round ]{0,2}</border-width></percentage></number></image></p>\n<p><code>none</code> 默认值。无背景图。<br><code>&lt;image&gt;</code> 使用绝对或相对 url 地址指定背景图像。<br><code>&lt;number&gt;</code> 边框宽度用固定像素值表示。<br><code>&lt;percentage&gt;</code> 边框宽度用百分比表示。<br><code>[ stretch | repeat | round ]</code> 拉伸 | 重复 | 平铺 (其中stretch是默认值。)</p>\n<p>请看下图平剖析一下css代码<br><img src=\"border.jpg\" alt=\"\"><br>也就是： 他们把图片，用#的方式截取，然后用 stretch | repeat | round 来控制水平或垂直的效果。看看下图你就明白了<br><img src=\"jiexibtn.jpg\" alt=\"\"></p>\n<p>当然关于边框的宽度你也可以用%;其原理也是一样：<br><img src=\"sliceHere.png\" alt=\"\"></p>\n<p>到这  大家应该弄明白border-image是怎么一回事了吧。</p>\n<p>参考文档：<br><a href=\"www.lrbabe.com/sdoms/borderImage\" title=\"www.lrbabe.com/sdoms/borderImage\">www.lrbabe.com/sdoms/borderImage</a><br><a href=\"ejohn.org/blog/border-image-in-firefox\" title=\"ejohn.org/blog/border-image-in-firefox\">ejohn.org/blog/border-image-in-firefox</a></p>\n","source":"_posts/2015-03-06-CSS3快速弄明白border-image.md","raw":"title: CSS3快速弄明白border-image\ndate: 2015-03-06 19:31:32\ncategories:\n- CSS\ntags:\n- border-image\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/niuniu/archive/2010/06/21/1761803.html](http://www.cnblogs.com/niuniu/archive/2010/06/21/1761803.html \"http://www.cnblogs.com/niuniu/archive/2010/06/21/1761803.html\")\n\n在看这个属性时，好像国内的文章都没给大家说太明白，今天就一起说说\n\n首先来一个素材图片whiteButton.png\n![](whiteButton.png)\n\n然后我们要做成这样的效果：\n![](2010-06-21_103813.png)\n\n```html\n<div style=\"-webkit-border-image: url(images/whiteButton.png) 0 12 0 12 stretch stretch;\n    -moz-border-image: url(images/whiteButton.png) 0 12 0 12 round stretch;\n    border-image: url(images/whiteButton.png) 0 12 0 12 stretch stretch;\n    display: block;\n    width:600px;\n    border-width:0 12px;\n    padding:10px;\n    text-align: center;\n    font-size: 16px;\n    text-decoration: inherit;\n    color:white;+color:black;\">在safari3+和FF3.5,chrome5.0+,opera10.53浏览器里能看到边框背景图\n</div>\n```\n\n下面我们来讲一下基本知识：\n\n**定义**： border-image ： none | <image> [ <number> | <percentage>]{1,4} [ / <border-width>{1,4} ]? [ stretch | repeat | round ]{0,2}\n\n`none` 默认值。无背景图。 \n`<image>` 使用绝对或相对 url 地址指定背景图像。\n`<number>` 边框宽度用固定像素值表示。 \n`<percentage>` 边框宽度用百分比表示。 \n`[ stretch | repeat | round ]` 拉伸 | 重复 | 平铺 (其中stretch是默认值。)\n\n请看下图平剖析一下css代码\n![](border.jpg)\n也就是： 他们把图片，用#的方式截取，然后用 stretch | repeat | round 来控制水平或垂直的效果。看看下图你就明白了\n![](jiexibtn.jpg)\n\n当然关于边框的宽度你也可以用%;其原理也是一样：\n![](sliceHere.png)\n\n到这  大家应该弄明白border-image是怎么一回事了吧。\n\n参考文档：\n[www.lrbabe.com/sdoms/borderImage](www.lrbabe.com/sdoms/borderImage \"www.lrbabe.com/sdoms/borderImage\")\n[ejohn.org/blog/border-image-in-firefox](ejohn.org/blog/border-image-in-firefox \"ejohn.org/blog/border-image-in-firefox\")\n","slug":"CSS3快速弄明白border-image","updated":1431306847000,"excerpt":"","_id":"b68twshop34rdtzj","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python格式化输出百分比","date":1425731210000,"categories":["ldi4kaat0baj4vp1"],"tags":["p5c1ngyoz58xgbq0","cj3x87kfwlgkedgh"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.douban.com/note/289063219/\" title=\"http://www.douban.com/note/289063219/\" target=\"_blank\" rel=\"external\">http://www.douban.com/note/289063219/</a></p>\n</blockquote>\n<p>在有些情况下，需要百分比输出数据，我们可以继续使用Python内建函数format来实现百分比的数据输出。<br><code>print(format(0.5236, &#39;.2%&#39;))</code><br>其结果如下所示。<br><em>50.000000%</em></p>\n<p>不太好看吧！怎么办呢？可以使用格式控制字的！程序修改如下<br><code>print(format(0.5, &#39;.0%&#39;))</code><br>格式控制字里的0的含义是小数点后无小数，即只保留整数部分，其结果如下所示。<br><em>50%</em></p>\n<p>好一点的是小数点保留2位较好。<br><code>print(format(0.5236, &#39;.2%&#39;))</code><br>结果如下所示。<br><em>52.36%</em></p>\n","source":"_posts/2015-03-07-Python格式化输出百分比.md","raw":"title: Python格式化输出百分比\ndate: 2015-03-07 20:26:50\ncategories:\n- Python\ntags:\n- 百分数\n- 格式化\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.douban.com/note/289063219/](http://www.douban.com/note/289063219/ \"http://www.douban.com/note/289063219/\")\n\n在有些情况下，需要百分比输出数据，我们可以继续使用Python内建函数format来实现百分比的数据输出。\n`print(format(0.5236, '.2%'))`\n其结果如下所示。\n*50.000000%*\n\n不太好看吧！怎么办呢？可以使用格式控制字的！程序修改如下\n`print(format(0.5, '.0%'))`\n格式控制字里的0的含义是小数点后无小数，即只保留整数部分，其结果如下所示。\n*50%*\n\n好一点的是小数点保留2位较好。\n`print(format(0.5236, '.2%'))`\n结果如下所示。\n*52.36%*\n","slug":"Python格式化输出百分比","updated":1431306848000,"excerpt":"","_id":"lz3wn0v5waa6eu82","comments":true,"layout":"post","photos":[],"link":""},{"title":"Murphy's Law","date":1425956038000,"categories":["25rjad5qpnh3qcyr"],"tags":["lnejh3redqsqx2l8"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p><code>如果你担心某种情况发生，那么它就更有可能发生。 -墨菲定律</code></p>\n<p>最近老觉得自己的档案会出问题，汗~还真满足了我的愿望啊。没想到我这样没满一年换工，还真会有档案问题啊。想想毕业有一段时间为了毕业生档案问题奔波劳碌，我也是醉了。加上这次要办理的档案改派，我貌似遇上了毕业生所有都会遇到的档案问题。本来就没什么空的了，还要和这些繁琐的档案问题纠缠不清，还让不让人愉快地工作啊。</p>\n","source":"_posts/2015-03-10-Murphy's-Law.md","raw":"title: Murphy's Law\ndate: 2015-03-10 10:53:58\ncategories:\n- 猿人日常\ntags:\n- 墨菲定律\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n`如果你担心某种情况发生，那么它就更有可能发生。 -墨菲定律`\n\n最近老觉得自己的档案会出问题，汗~还真满足了我的愿望啊。没想到我这样没满一年换工，还真会有档案问题啊。想想毕业有一段时间为了毕业生档案问题奔波劳碌，我也是醉了。加上这次要办理的档案改派，我貌似遇上了毕业生所有都会遇到的档案问题。本来就没什么空的了，还要和这些繁琐的档案问题纠缠不清，还让不让人愉快地工作啊。\n","slug":"Murphy's-Law","updated":1431306848000,"excerpt":"","_id":"8ozldxq0q2popr6a","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt的setMouseTracking使用","date":1426037910000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","al9t7v05rpbezayz"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/marlene0312/article/details/5221261\" title=\"http://blog.csdn.net/marlene0312/article/details/5221261\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/marlene0312/article/details/5221261</a></p>\n</blockquote>\n<p><code>bool mouseTracking</code>: 这个属性保存的是窗口部件跟踪鼠标是否生效。</p>\n<p>如果鼠标跟踪失效（默认），当鼠标被移动的时候只有在至少一个鼠标按键被按下时，这个窗口部件才会接收鼠标移动事件。</p>\n<p>如果鼠标跟踪生效，如果没有按键被按下，这个窗口部件也会接收鼠标移动事件。</p>\n<p>也可以参考<code>mouseMoveEvent()</code>和<code>QApplication::setGlobalMouseTracking()</code>。</p>\n<p>通过<code>setMouseTracking()</code>设置属性值并且通过<code>hasMouseTracking()</code>来获得属性值。</p>\n<p>调用这个函数后，如想使<code>mouseMoveEvent</code>有效，也就是在鼠标在区域内移动就会触发，而非鼠标按键按下时才触发，注意只能是<code>QWidget</code>，如果是<code>QMainwindow</code>，则无效。</p>\n","source":"_posts/2015-03-11-Qt的setMouseTracking使用.md","raw":"title: Qt的setMouseTracking使用\ndate: 2015-03-11 09:38:30\ncategories:\n- Qt\ntags:\n- Qt\n- setMouseTracking\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/marlene0312/article/details/5221261](http://blog.csdn.net/marlene0312/article/details/5221261 \"http://blog.csdn.net/marlene0312/article/details/5221261\")\n\n\n`bool mouseTracking`: 这个属性保存的是窗口部件跟踪鼠标是否生效。\n\n如果鼠标跟踪失效（默认），当鼠标被移动的时候只有在至少一个鼠标按键被按下时，这个窗口部件才会接收鼠标移动事件。\n\n如果鼠标跟踪生效，如果没有按键被按下，这个窗口部件也会接收鼠标移动事件。\n\n \n\n也可以参考`mouseMoveEvent()`和`QApplication::setGlobalMouseTracking()`。\n\n通过`setMouseTracking()`设置属性值并且通过`hasMouseTracking()`来获得属性值。\n\n调用这个函数后，如想使`mouseMoveEvent`有效，也就是在鼠标在区域内移动就会触发，而非鼠标按键按下时才触发，注意只能是`QWidget`，如果是`QMainwindow`，则无效。\n","slug":"Qt的setMouseTracking使用","updated":1431306848000,"excerpt":"","_id":"1ozetm98t5y3cx4g","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python time模块详解","date":1426214407000,"categories":["ldi4kaat0baj4vp1"],"tags":["fm37qj75fwxyspio"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/kiki113/article/details/4033017\" title=\"http://blog.csdn.net/kiki113/article/details/4033017\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/kiki113/article/details/4033017</a></p>\n</blockquote>\n<h2 id=\"简介\"><strong>简介</strong></h2>\n<p>time模块提供各种操作时间的函数<br>说明：一般有两种表示时间的方式:</p>\n<ol>\n<li>第一种是时间戳的方式(相对于1970.1.1 00:00:00以秒计算的偏移量),时间戳是惟一的</li>\n<li>第二种以数组的形式表示即(struct_time),共有九个元素，分别表示，同一个时间戳的struct_time会因为时区不同而不同</li>\n</ol>\n<p>year (four digits, e.g. 1998)<br>month (1-12)<br>day (1-31)<br>hours (0-23)<br>minutes (0-59)<br>seconds (0-59)<br>weekday (0-6, Monday is 0)<br>Julian day (day in the year, 1-366)<br>DST (Daylight Savings Time) flag (-1, 0 or 1) 是否是夏令时<br>If the DST flag is 0, the time is given in the regular time zone;<br>if it is 1, the time is given in the DST time zone;<br>if it is -1, mktime() should guess based on the date and time.<br>夏令时介绍：<a href=\"http://baike.baidu.com/view/100246.htm\" target=\"_blank\" rel=\"external\">http://baike.baidu.com/view/100246.htm</a><br>UTC介绍：<a href=\"http://wenda.tianya.cn/wenda/thread?tid=283921a9da7c5aef&amp;clk=wttpcts\" target=\"_blank\" rel=\"external\">http://wenda.tianya.cn/wenda/thread?tid=283921a9da7c5aef&amp;clk=wttpcts</a><br><br></p>\n<h2 id=\"函数介绍\"><strong>函数介绍</strong></h2>\n<h3 id=\"asctime()\">asctime()</h3>\n<p><code>asctime([tuple]) -&gt; string</code><br>将一个struct_time(默认为当时时间)，转换成字符串</p>\n<blockquote>\n<p>Convert a time tuple to a string, e.g. ‘Sat Jun 06 16:26:11 1998’.<br>When the time tuple is not present, current time as returned by localtime()<br>is used.</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"clock()\">clock()</h3>\n<p><code>clock() -&gt; floating point number</code><br>该函数有两个功能，<br>在第一次调用的时候，返回的是程序运行的实际时间；<br>以第二次之后的调用，返回的是自第一次调用后,到这次调用的时间间隔</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time  </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:  </div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)  </div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"clock1:%s\"</span> % time.clock()  </div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)  </div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"clock2:%s\"</span> % time.clock()  </div><div class=\"line\">    time.sleep(<span class=\"number\">1</span>)  </div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"clock3:%s\"</span> % time.clock()</div></pre></td></tr></table></figure>\n\n<p>输出：<br>clock1:3.35238137808e-006<br>clock2:1.00004944763<br>clock3:2.00012040636<br>其中第一个clock输出的是程序运行时间<br>第二、三个clock输出的都是与第一个clock的时间间隔<br><br></p>\n<h3 id=\"sleep(…)\">sleep(…)</h3>\n<p><code>sleep(seconds)</code><br>线程推迟指定的时间运行，经过测试，单位为秒，但是在帮助文档中有以下这样一句话，这关是看不懂</p>\n<blockquote>\n<p>“The argument may be a floating point number for subsecond precision.”</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"ctime(…)\">ctime(…)</h3>\n<p><code>ctime(seconds) -&gt; string</code><br>将一个时间戳(默认为当前时间)转换成一个时间字符串<br>例如：<br>time.ctime()<br>输出为：’Sat Mar 28 22:24:24 2009’<br><br></p>\n<h3 id=\"gmtime(…)\">gmtime(…)</h3>\n<p><code>gmtime([seconds]) -&gt; (tm_year, tm_mon, tm_day, tm_hour, tm_min,tm_sec, tm_wday, tm_yday, tm_isdst)</code><br>将一个时间戳转换成一个UTC时区(0时区)的struct_time，如果seconds参数未输入，则以当前时间为转换标准<br><br></p>\n<h3 id=\"localtime(…)\">localtime(…)</h3>\n<p><code>localtime([seconds]) -&gt; (tm_year,tm_mon,tm_day,tm_hour,tm_min,tm_sec,tm_wday,tm_yday,tm_isdst)</code><br>将一个时间戳转换成一个当前时区的struct_time，如果seconds参数未输入，则以当前时间为转换标准<br><br>   </p>\n<h3 id=\"mktime(…)\">mktime(…)</h3>\n<p><code>mktime(tuple) -&gt; floating point number</code><br>将一个以struct_time转换为时间戳<br><br></p>\n<h3 id=\"strftime(…)\">strftime(…)</h3>\n<p><code>strftime(format[, tuple]) -&gt; string</code><br>将指定的struct_time(默认为当前时间)，根据指定的格式化字符串输出<br>python中时间日期格式化符号：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%y</td>\n<td style=\"text-align:left\">两位数的年份表示（00-99）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%Y</td>\n<td style=\"text-align:left\">四位数的年份表示（000-9999）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%m</td>\n<td style=\"text-align:left\">月份（01-12）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%d</td>\n<td style=\"text-align:left\">月内中的一天（0-31）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%H</td>\n<td style=\"text-align:left\">24小时制小时数（0-23）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%I</td>\n<td style=\"text-align:left\">12小时制小时数（01-12）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%M</td>\n<td style=\"text-align:left\">分钟数（00=59）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%S</td>\n<td style=\"text-align:left\">秒（00-59）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%a</td>\n<td style=\"text-align:left\">本地简化星期名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%A</td>\n<td style=\"text-align:left\">本地完整星期名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%b</td>\n<td style=\"text-align:left\">本地简化的月份名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%B</td>\n<td style=\"text-align:left\">本地完整的月份名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%c</td>\n<td style=\"text-align:left\">本地相应的日期表示和时间表示</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%j</td>\n<td style=\"text-align:left\">年内的一天（001-366）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%p</td>\n<td style=\"text-align:left\">本地A.M.或P.M.的等价符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%U</td>\n<td style=\"text-align:left\">一年中的星期数（00-53）星期天为星期的开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%w</td>\n<td style=\"text-align:left\">星期（0-6），星期天为星期的开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%W</td>\n<td style=\"text-align:left\">一年中的星期数（00-53）星期一为星期的开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%x</td>\n<td style=\"text-align:left\">本地相应的日期表示</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%X</td>\n<td style=\"text-align:left\">本地相应的时间表示</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%Z</td>\n<td style=\"text-align:left\">当前时区的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%%</td>\n<td style=\"text-align:left\">%号本身</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"strptime(…)\">strptime(…)</h3>\n<p><code>strptime(string, format) -&gt; struct_time</code><br>将时间字符串根据指定的格式化符转换成数组形式的时间<br>例如：<br>2009-03-20 11:45:39  对应的格式化字符串为：%Y-%m-%d %H:%M:%S<br>Sat Mar 28 22:24:24 2009 对应的格式化字符串为：%a %b %d %H:%M:%S %Y<br><br></p>\n<h3 id=\"time(…)\">time(…)</h3>\n<p><code>time() -&gt; floating point number</code><br>返回当前时间的时间戳<br><br></p>\n<h2 id=\"疑点\"><strong>疑点</strong></h2>\n<p><strong>夏令时</strong><br>在struct_time中，夏令时好像没有用，例如<br>a = (2009, 6, 28, 23, 8, 34, 5, 87, 1)<br>b = (2009, 6, 28, 23, 8, 34, 5, 87, 0)<br>a和b分别表示的是夏令时和标准时间，它们之间转换为时间戳应该相关3600，但是转换后输出都为646585714.0<br><br></p>\n<h2 id=\"小应用\"><strong>小应用</strong></h2>\n<ol>\n<li><p>python获取当前时间<br>time.time() <em>获取当前时间戳</em><br>time.localtime() <em>当前时间的struct_time形式</em><br>time.ctime() <em>当前时间的字符串形式</em></p>\n</li>\n<li><p>python格式化字符串<br>time.strftime(“%Y-%m-%d %H:%M:%S”, time.localtime()) <em>格式化成2009-03-20 11:45:39形式：</em><br>time.strftime(“%a %b %d %H:%M:%S %Y”, time.localtime()) <em>格式化成Sat Mar 28 22:24:24 2009形式：</em></p>\n</li>\n<li><p>将格式字符串转换为时间戳<br>a = “Sat Mar 28 22:24:24 2009”<br>b = time.mktime(time.strptime(a,”%a %b %d %H:%M:%S %Y”))</p>\n</li>\n</ol>\n","source":"_posts/2015-03-13-Python-time-模块详解.md","raw":"title: Python time模块详解\ndate: 2015-03-13 10:40:07\ncategories:\n- Python\ntags:\n- time\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/kiki113/article/details/4033017](http://blog.csdn.net/kiki113/article/details/4033017 \"http://blog.csdn.net/kiki113/article/details/4033017\")\n\n## **简介** ##\ntime模块提供各种操作时间的函数\n说明：一般有两种表示时间的方式:\n1. 第一种是时间戳的方式(相对于1970.1.1 00:00:00以秒计算的偏移量),时间戳是惟一的\n2. 第二种以数组的形式表示即(struct_time),共有九个元素，分别表示，同一个时间戳的struct_time会因为时区不同而不同\n\nyear (four digits, e.g. 1998)\nmonth (1-12)\nday (1-31)\nhours (0-23)\nminutes (0-59)\nseconds (0-59)\nweekday (0-6, Monday is 0)\nJulian day (day in the year, 1-366)\nDST (Daylight Savings Time) flag (-1, 0 or 1) 是否是夏令时\nIf the DST flag is 0, the time is given in the regular time zone;\nif it is 1, the time is given in the DST time zone;\nif it is -1, mktime() should guess based on the date and time.\n夏令时介绍：http://baike.baidu.com/view/100246.htm\nUTC介绍：http://wenda.tianya.cn/wenda/thread?tid=283921a9da7c5aef&clk=wttpcts\n<br>\n## **函数介绍** ##\n### asctime() ###\n`asctime([tuple]) -> string`\n将一个struct_time(默认为当时时间)，转换成字符串\n> Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.\n> When the time tuple is not present, current time as returned by localtime()\n> is used.\n\n<br>\n### clock() ###\n`clock() -> floating point number`\n该函数有两个功能，\n在第一次调用的时候，返回的是程序运行的实际时间；\n以第二次之后的调用，返回的是自第一次调用后,到这次调用的时间间隔\n\n示例：\n```python\nimport time  \nif __name__ == '__main__':  \n    time.sleep(1)  \n    print \"clock1:%s\" % time.clock()  \n    time.sleep(1)  \n    print \"clock2:%s\" % time.clock()  \n    time.sleep(1)  \n    print \"clock3:%s\" % time.clock()  \n```\n输出：\nclock1:3.35238137808e-006\nclock2:1.00004944763\nclock3:2.00012040636\n其中第一个clock输出的是程序运行时间\n第二、三个clock输出的都是与第一个clock的时间间隔\n<br>\n### sleep(...) ###\n`sleep(seconds)`\n线程推迟指定的时间运行，经过测试，单位为秒，但是在帮助文档中有以下这样一句话，这关是看不懂\n>“The argument may be a floating point number for subsecond precision.”\n\n<br>\n### ctime(...) ###\n`ctime(seconds) -> string`\n将一个时间戳(默认为当前时间)转换成一个时间字符串\n例如：\ntime.ctime()\n输出为：'Sat Mar 28 22:24:24 2009'\n<br>\n### gmtime(...) ###\n`gmtime([seconds]) -> (tm_year, tm_mon, tm_day, tm_hour, tm_min,tm_sec, tm_wday, tm_yday, tm_isdst)`\n将一个时间戳转换成一个UTC时区(0时区)的struct_time，如果seconds参数未输入，则以当前时间为转换标准\n<br>\n### localtime(...) ###\n`localtime([seconds]) -> (tm_year,tm_mon,tm_day,tm_hour,tm_min,tm_sec,tm_wday,tm_yday,tm_isdst)`\n将一个时间戳转换成一个当前时区的struct_time，如果seconds参数未输入，则以当前时间为转换标准\n<br>   \n### mktime(...) ###\n`mktime(tuple) -> floating point number`\n将一个以struct_time转换为时间戳\n<br>\n### strftime(...) ###\n`strftime(format[, tuple]) -> string`\n将指定的struct_time(默认为当前时间)，根据指定的格式化字符串输出\npython中时间日期格式化符号：\n\n|||\n|:-:|:--|\n|%y|两位数的年份表示（00-99）|\n|%Y|四位数的年份表示（000-9999）|\n|%m|月份（01-12）|\n|%d|月内中的一天（0-31）|\n|%H|24小时制小时数（0-23）|\n|%I|12小时制小时数（01-12）|\n|%M|分钟数（00=59）|\n|%S|秒（00-59）|\n|%a|本地简化星期名称|\n|%A|本地完整星期名称|\n|%b|本地简化的月份名称|\n|%B|本地完整的月份名称|\n|%c|本地相应的日期表示和时间表示|\n|%j|年内的一天（001-366）|\n|%p|本地A.M.或P.M.的等价符|\n|%U|一年中的星期数（00-53）星期天为星期的开始|\n|%w|星期（0-6），星期天为星期的开始|\n|%W|一年中的星期数（00-53）星期一为星期的开始|\n|%x|本地相应的日期表示|\n|%X|本地相应的时间表示|\n|%Z|当前时区的名称|\n|%%|%号本身|\n<br>\n### strptime(...) ###\n`strptime(string, format) -> struct_time`\n将时间字符串根据指定的格式化符转换成数组形式的时间\n例如：\n2009-03-20 11:45:39  对应的格式化字符串为：%Y-%m-%d %H:%M:%S\nSat Mar 28 22:24:24 2009 对应的格式化字符串为：%a %b %d %H:%M:%S %Y\n<br>\n### time(...) ###\n`time() -> floating point number`\n返回当前时间的时间戳\n<br>\n## **疑点** ##\n**夏令时**\n在struct_time中，夏令时好像没有用，例如\na = (2009, 6, 28, 23, 8, 34, 5, 87, 1)\nb = (2009, 6, 28, 23, 8, 34, 5, 87, 0)\na和b分别表示的是夏令时和标准时间，它们之间转换为时间戳应该相关3600，但是转换后输出都为646585714.0\n<br>\n## **小应用** ##\n1. python获取当前时间\ntime.time() *获取当前时间戳*\ntime.localtime() *当前时间的struct_time形式*\ntime.ctime() *当前时间的字符串形式*\n   \n2. python格式化字符串  \ntime.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()) *格式化成2009-03-20 11:45:39形式：*\ntime.strftime(\"%a %b %d %H:%M:%S %Y\", time.localtime()) *格式化成Sat Mar 28 22:24:24 2009形式：*\n \n3. 将格式字符串转换为时间戳\na = \"Sat Mar 28 22:24:24 2009\"\nb = time.mktime(time.strptime(a,\"%a %b %d %H:%M:%S %Y\"))","slug":"Python-time-模块详解","updated":1431306848000,"excerpt":"","_id":"c12stl7ndbvue5an","comments":true,"layout":"post","photos":[],"link":""},{"title":"解决UnicodeEncodeError: 'ascii' codec can't encode characters in position问题","date":1426303241000,"categories":["ldi4kaat0baj4vp1"],"tags":["lkec4u9615m3um6k","qlo9snpo7be5n7wz"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.sina.com.cn/s/blog_64a3795a01018vyp.html\" title=\"http://blog.sina.com.cn/s/blog_64a3795a01018vyp.html\" target=\"_blank\" rel=\"external\">http://blog.sina.com.cn/s/blog_64a3795a01018vyp.html</a></p>\n</blockquote>\n<p>今天把一个列表转换成字符串输出的时候出现了<code>UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 32-34: ordinal not in range(128)</code>问题，使用的是<code>ulipad</code>编译器。</p>\n<p><strong>解决方法1：</strong><br>在开头加上</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">reload(sys)</div><div class=\"line\">sys.setdefaultencoding( <span class=\"string\">\"utf-8\"</span> )</div></pre></td></tr></table></figure>\n\n<p><strong>解决方法2：</strong><br>使用cmd运行python程序，能正常显示结果</p>\n","source":"_posts/2015-03-14-解决UnicodeEncodeError-ascii-codec-can-t-encode-characters-in-position问题.md","raw":"title: \"解决UnicodeEncodeError: 'ascii' codec can't encode characters in position问题\"\ndate: 2015-03-14 11:20:41\ncategories:\n- Python\ntags:\n- UnicodeEncodeError\n- ascii\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.sina.com.cn/s/blog_64a3795a01018vyp.html](http://blog.sina.com.cn/s/blog_64a3795a01018vyp.html \"http://blog.sina.com.cn/s/blog_64a3795a01018vyp.html\")\n\n今天把一个列表转换成字符串输出的时候出现了`UnicodeEncodeError: 'ascii' codec can't encode characters in position 32-34: ordinal not in range(128)`问题，使用的是`ulipad`编译器。\n\n**解决方法1：**\n在开头加上\n```python\nimport sys\nreload(sys)\nsys.setdefaultencoding( \"utf-8\" )\n```\n\n**解决方法2：**\n使用cmd运行python程序，能正常显示结果\n","slug":"解决UnicodeEncodeError-ascii-codec-can-t-encode-characters-in-position问题","updated":1431306848000,"excerpt":"","_id":"dmw1vsbuvjkr6aye","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python增强的格式化字符串format函数","date":1425358265000,"categories":["ldi4kaat0baj4vp1"],"tags":["woafk9p7mjvoa9uf","cj3x87kfwlgkedgh"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/handsomekang/article/details/9183303\" title=\"http://blog.csdn.net/handsomekang/article/details/9183303\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/handsomekang/article/details/9183303</a></p>\n</blockquote>\n<p>自python2.6开始，新增了一种格式化字符串的函数str.format()，可谓威力十足。那么，他跟之前的%型格式化字符串相比，有什么优越的存在呢？让我们来揭开它羞答答的面纱。</p>\n<h2 id=\"语法\">语法</h2>\n<p>它通过{}和:来代替%。<br><br></p>\n<h2 id=\"“映射”示例\">“映射”示例</h2>\n<h3 id=\"通过位置\">通过位置</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">1</span>]: <span class=\"string\">'{0},{1}'</span>.format(<span class=\"string\">'kzc'</span>,<span class=\"number\">18</span>)  </div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">1</span>]: <span class=\"string\">'kzc,18'</span>  </div><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">2</span>]: <span class=\"string\">'{},{}'</span>.format(<span class=\"string\">'kzc'</span>,<span class=\"number\">18</span>)  </div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">2</span>]: <span class=\"string\">'kzc,18'</span>  </div><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">3</span>]: <span class=\"string\">'{1},{0},{1}'</span>.format(<span class=\"string\">'kzc'</span>,<span class=\"number\">18</span>)  </div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">3</span>]: <span class=\"string\">'18,kzc,18'</span></div></pre></td></tr></table></figure>\n\n<p>字符串的format函数可以接受不限个参数，位置可以不按顺序，可以不用或者用多次，不过2.6不能为空{}，2.7才可以。<br><br></p>\n<h3 id=\"通过关键字参数\">通过关键字参数</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">5</span>]: <span class=\"string\">'{name},{age}'</span>.format(age=<span class=\"number\">18</span>,name=<span class=\"string\">'kzc'</span>)  </div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">5</span>]: <span class=\"string\">'kzc,18'</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h3 id=\"通过对象属性\">通过对象属性</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age)</span>:</span>  </div><div class=\"line\">        self.name,self.age = name,age  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span>  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'This guy is {self.name},is {self.age} old'</span>.format(self=self)  </div><div class=\"line\"></div><div class=\"line\">In [<span class=\"number\">2</span>]: str(Person(<span class=\"string\">'kzc'</span>,<span class=\"number\">18</span>))  </div><div class=\"line\">Out[<span class=\"number\">2</span>]: <span class=\"string\">'This guy is kzc,is 18 old'</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h3 id=\"通过下标\">通过下标</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">7</span>]: p=[<span class=\"string\">'kzc'</span>,<span class=\"number\">18</span>]</div><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">8</span>]: <span class=\"string\">'{0[0]},{0[1]}'</span>.format(p)</div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">8</span>]: <span class=\"string\">'kzc,18'</span></div></pre></td></tr></table></figure>\n\n<p>有了这些便捷的“映射”方式，我们就有了偷懒利器。基本的python知识告诉我们，list和tuple可以通过“打散”成普通参数给函数，而dict可以打散成关键字参数给函数（通过和*）。所以可以轻松的传个list/tuple/dict给format函数。非常灵活。<br><br></p>\n<h2 id=\"格式限定符\">格式限定符</h2>\n<p>它有着丰富的的“格式限定符”（语法是{}中带:号），比如：<br><br></p>\n<h3 id=\"填充与对齐\">填充与对齐</h3>\n<p>填充常跟对齐一起使用<br>^、&lt;、&gt;分别是居中、左对齐、右对齐，后面带宽度<br>:号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充<br>比如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">15</span>]: <span class=\"string\">'{:&gt;8}'</span>.format(<span class=\"string\">'189'</span>)</div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">15</span>]: <span class=\"string\">'     189'</span></div><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">16</span>]: <span class=\"string\">'{:0&gt;8}'</span>.format(<span class=\"string\">'189'</span>)</div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">16</span>]: <span class=\"string\">'00000189'</span></div><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">17</span>]: <span class=\"string\">'{:a&gt;8}'</span>.format(<span class=\"string\">'189'</span>)</div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">17</span>]: <span class=\"string\">'aaaaa189'</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h3 id=\"精度与类型f\">精度与类型f</h3>\n<p>精度常跟类型f一起使用</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">44</span>]: <span class=\"string\">'{:.2f}'</span>.format(<span class=\"number\">321.33345</span>)</div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">44</span>]: <span class=\"string\">'321.33'</span></div></pre></td></tr></table></figure>\n\n<p>其中.2表示长度为2的精度，f表示float类型。<br><br></p>\n<h3 id=\"其他类型\">其他类型</h3>\n<p>主要就是进制了，b、d、o、x分别是二进制、十进制、八进制、十六进制。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">54</span>]: <span class=\"string\">'{:b}'</span>.format(<span class=\"number\">17</span>)</div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">54</span>]: <span class=\"string\">'10001'</span></div><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">55</span>]: <span class=\"string\">'{:d}'</span>.format(<span class=\"number\">17</span>)</div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">55</span>]: <span class=\"string\">'17'</span></div><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">56</span>]: <span class=\"string\">'{:o}'</span>.format(<span class=\"number\">17</span>)</div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">56</span>]: <span class=\"string\">'21'</span></div><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">57</span>]: <span class=\"string\">'{:x}'</span>.format(<span class=\"number\">17</span>)</div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">57</span>]: <span class=\"string\">'11'</span></div></pre></td></tr></table></figure>\n\n<p>用，号还能用来做金额的千位分隔符。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">In</span> [<span class=\"number\">47</span>]: <span class=\"string\">'{:,}'</span>.format(<span class=\"number\">1234567890</span>)</div><div class=\"line\"><span class=\"keyword\">Out</span>[<span class=\"number\">47</span>]: <span class=\"string\">'1,234,567,890'</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-03-Python增强的格式化字符串format函数.md","raw":"title: Python增强的格式化字符串format函数\ndate: 2015-03-03 12:51:05\ncategories:\n- Python\ntags:\n- format\n- 格式化\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/handsomekang/article/details/9183303](http://blog.csdn.net/handsomekang/article/details/9183303 \"http://blog.csdn.net/handsomekang/article/details/9183303\")\n\n自python2.6开始，新增了一种格式化字符串的函数str.format()，可谓威力十足。那么，他跟之前的%型格式化字符串相比，有什么优越的存在呢？让我们来揭开它羞答答的面纱。\n\n## 语法 ##\n它通过{}和:来代替%。\n<br>\n## “映射”示例 ##\n### 通过位置 ###\n```\nIn [1]: '{0},{1}'.format('kzc',18)  \nOut[1]: 'kzc,18'  \nIn [2]: '{},{}'.format('kzc',18)  \nOut[2]: 'kzc,18'  \nIn [3]: '{1},{0},{1}'.format('kzc',18)  \nOut[3]: '18,kzc,18'\n```\n字符串的format函数可以接受不限个参数，位置可以不按顺序，可以不用或者用多次，不过2.6不能为空{}，2.7才可以。\n<br>\n### 通过关键字参数 ###\n```\nIn [5]: '{name},{age}'.format(age=18,name='kzc')  \nOut[5]: 'kzc,18'\n```\n<br>\n### 通过对象属性 ###\n```\nclass Person:  \n    def __init__(self,name,age):  \n        self.name,self.age = name,age  \n        def __str__(self):  \n            return 'This guy is {self.name},is {self.age} old'.format(self=self)  \n\nIn [2]: str(Person('kzc',18))  \nOut[2]: 'This guy is kzc,is 18 old'\n```\n<br>\n### 通过下标 ###\n```\nIn [7]: p=['kzc',18]\nIn [8]: '{0[0]},{0[1]}'.format(p)\nOut[8]: 'kzc,18'\n```\n有了这些便捷的“映射”方式，我们就有了偷懒利器。基本的python知识告诉我们，list和tuple可以通过“打散”成普通参数给函数，而dict可以打散成关键字参数给函数（通过和*）。所以可以轻松的传个list/tuple/dict给format函数。非常灵活。\n<br>\n## 格式限定符 ##\n它有着丰富的的“格式限定符”（语法是{}中带:号），比如：\n<br>\n### 填充与对齐 ###\n填充常跟对齐一起使用\n^、<、>分别是居中、左对齐、右对齐，后面带宽度\n:号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充\n比如：\n```\nIn [15]: '{:>8}'.format('189')\nOut[15]: '     189'\nIn [16]: '{:0>8}'.format('189')\nOut[16]: '00000189'\nIn [17]: '{:a>8}'.format('189')\nOut[17]: 'aaaaa189'\n```\n<br>\n### 精度与类型f ###\n精度常跟类型f一起使用\n```\nIn [44]: '{:.2f}'.format(321.33345)\nOut[44]: '321.33'\n```\n其中.2表示长度为2的精度，f表示float类型。\n<br>\n### 其他类型 ###\n主要就是进制了，b、d、o、x分别是二进制、十进制、八进制、十六进制。\n```\nIn [54]: '{:b}'.format(17)\nOut[54]: '10001'\nIn [55]: '{:d}'.format(17)\nOut[55]: '17'\nIn [56]: '{:o}'.format(17)\nOut[56]: '21'\nIn [57]: '{:x}'.format(17)\nOut[57]: '11'\n```\n用，号还能用来做金额的千位分隔符。\n```\nIn [47]: '{:,}'.format(1234567890)\nOut[47]: '1,234,567,890'\n```\n","slug":"Python增强的格式化字符串format函数","updated":1431306847000,"excerpt":"","_id":"v4y50s8d8zqnocvv","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python使用正则表达式获得html标签数据","date":1426422780000,"categories":["ldi4kaat0baj4vp1"],"tags":["yb0jyqwoc5uhl1xh","cw38nfexbau434l9"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>记录一下，获取html标签里面的<code>14℃</code>，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#-*- coding: utf8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"></div><div class=\"line\">html = <span class=\"string\">'&lt;div class=\"w-number\"&gt;&lt;span class=\"tpte\"&gt;14℃&lt;/span&gt;&lt;/div&gt;'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    p = re.compile(<span class=\"string\">'&lt;[^&gt;]+&gt;'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> p.sub(<span class=\"string\">''</span>, html)</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-15-Python使用正则表达式获得html标签数据.md","raw":"title: Python使用正则表达式获得html标签数据\ndate: 2015-03-15 20:33:00\ncategories:\n- Python\ntags:\n- 正则表达式\n- 获得html标签数据\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n记录一下，获取html标签里面的`14℃`，代码如下：\n```python\n#!/usr/bin/env python\n#-*- coding: utf8 -*-\nimport re\n\nhtml = '<div class=\"w-number\"><span class=\"tpte\">14℃</span></div>'\n\nif __name__ == '__main__':\n    p = re.compile('<[^>]+>')\n    print p.sub('', html)\n```\n","slug":"Python使用正则表达式获得html标签数据","updated":1431306848000,"excerpt":"","_id":"sfc4m8edt5bfx7eo","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt之正则表达式","date":1426510807000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","yb0jyqwoc5uhl1xh"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/phay/article/details/7304455\" title=\"http://blog.csdn.net/phay/article/details/7304455\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/phay/article/details/7304455</a></p>\n</blockquote>\n<p>QRegExp是Qt的正则表达式类.<br>Qt中有两个不同类的正则表达式.<br>第一类为元字符.它表示一个或多个常量表达式.<br>令一类为 转义字符,它代表一个特殊字符.</p>\n<p><strong>一.元字符</strong><br>.  匹配任意单个字符.例如, 1.3 可能是1. 后面跟任意字符,再跟3<br>^ 匹配字符串首. 例如, ^12可能是123,但不能是312<br>$  配字符串尾. 例如, 12$可以是312, 当不能是 123<br>[] 匹配括号内输入的任意字符.[123]可以为1, 2 或3<br>*  匹配任意数量的前导字符. 例如, 1*2可以为任意数量个1(甚至没有), 后面跟一个2<br>+ 匹配至少一个前导字符. 例如, 1+2必须为一个或多个1, 后跟一个2<br>?  匹配一个前导字符或为空. 例如 1?2可以为2或这12</p>\n<p><strong>二.统配模式</strong><br>通过 QRegExp::setPatternSyntax(QRegExp::Wildcard);可以将元字符设置为统配模式.在统配模式下,只有3个元字 符可以使用.他们的功能没有变化.<br>? 匹配任意单个字符, 例如, 1?2可以为1,后面跟任意单个字符, 再跟2<br>* 匹配任意一个字符序列. 例如, 1*2, 可以为1, 后面跟任意数量的字符, 再跟一个2<br>[] 匹配一个定义的字符集合. 例如, [a-zA-Z.]可以匹配 a到z之间任意一个字符和.  [^a]匹配出小写a以外的字符.</p>\n<p><strong>三.转义序列</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">\\.</td>\n<td style=\"text-align:left\">匹配”.”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\^</td>\n<td style=\"text-align:left\">匹配”^”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\$</td>\n<td style=\"text-align:left\">匹配”$”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\[</td>\n<td style=\"text-align:left\">匹配”[“</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\]</td>\n<td style=\"text-align:left\">匹配”]”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\*</td>\n<td style=\"text-align:left\">匹配”*”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\+</td>\n<td style=\"text-align:left\">匹配”+”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\?</td>\n<td style=\"text-align:left\">匹配”?”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\b</td>\n<td style=\"text-align:left\">匹配响铃字符,使计算机发出嘟的一声.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\t</td>\n<td style=\"text-align:left\">制表符号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\n</td>\n<td style=\"text-align:left\">换行符号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\r</td>\n<td style=\"text-align:left\">回车符鉿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:left\">任意空格</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\xnn</td>\n<td style=\"text-align:left\">匹配16进制为nn的字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\0nn</td>\n<td style=\"text-align:left\">匹配8进制的nn字符</td>\n</tr>\n</tbody>\n</table>\n<p>这些表达式均以\\开始, 与C++的转义字符相同,所以为了定义QRegExp中的一个转义序列,<br>需要在前面添加两个\\<br><br></p>\n<ul>\n<li><strong>用正则表达式验证文本有效性</strong></li>\n</ul>\n<p>你可以使用QRegExp::exactMatch来判断一个字符串是否符合一个pattern。</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">void</span> testRegexMatch()</div><div class=\"line\">{</div><div class=\"line\">    QString pattern(“<span class=\"built_in\">.</span><span class=\"subst\">*=</span><span class=\"built_in\">.</span><span class=\"subst\">*</span>”);</div><div class=\"line\">    QRegExp <span class=\"literal\">rx</span>(pattern);</div><div class=\"line\"></div><div class=\"line\">    bool <span class=\"keyword\">match</span> <span class=\"subst\">=</span> <span class=\"literal\">rx</span><span class=\"built_in\">.</span>exactMatch(“a<span class=\"subst\">=</span><span class=\"number\">3</span>″);</div><div class=\"line\">    qDebug() <span class=\"subst\">&lt;&lt;</span> <span class=\"keyword\">match</span>;                      <span class=\"comment\">// True</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">match</span> <span class=\"subst\">=</span> <span class=\"literal\">rx</span><span class=\"built_in\">.</span>exactMatch(“a/<span class=\"number\">2</span>″);</div><div class=\"line\">    qDebug() <span class=\"subst\">&lt;&lt;</span> <span class=\"keyword\">match</span>;                      <span class=\"comment\">// False</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li><strong>用正则表达式提取数据</strong></li>\n</ul>\n<p>你可以利用利用正则表达式从一个字符串里提取特定的字段或数据。例如，你可以用以下代码从”a=100″里提取”a”和”100″。</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">void</span> testRegexCapture()</div><div class=\"line\">{</div><div class=\"line\">    QString pattern(“(<span class=\"built_in\">.</span><span class=\"subst\">*</span>)<span class=\"subst\">=</span>(<span class=\"built_in\">.</span><span class=\"subst\">*</span>)”);</div><div class=\"line\">    QRegExp <span class=\"literal\">rx</span>(pattern);</div><div class=\"line\"></div><div class=\"line\">    QString str(“a<span class=\"subst\">=</span><span class=\"number\">100</span>″);</div><div class=\"line\">    int pos <span class=\"subst\">=</span> str<span class=\"built_in\">.</span>indexOf(<span class=\"literal\">rx</span>);              <span class=\"comment\">// 0, position of the first match.</span></div><div class=\"line\">                                            <span class=\"comment\">// Returns -1 if str is not found.</span></div><div class=\"line\">                                            <span class=\"comment\">// You can also use rx.indexIn(str);</span></div><div class=\"line\">    qDebug() <span class=\"subst\">&lt;&lt;</span> pos;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( pos <span class=\"subst\">&gt;=</span> <span class=\"number\">0</span> )</div><div class=\"line\">    {</div><div class=\"line\">        qDebug() <span class=\"subst\">&lt;&lt;</span> <span class=\"literal\">rx</span><span class=\"built_in\">.</span>matchedLength();     <span class=\"comment\">// 5, length of the last matched string</span></div><div class=\"line\">                                            <span class=\"comment\">// or -1 if there was no match</span></div><div class=\"line\">        qDebug() <span class=\"subst\">&lt;&lt;</span> <span class=\"literal\">rx</span><span class=\"built_in\">.</span>capturedTexts();     <span class=\"comment\">// QStringList(“a=100″, ”a”, ”100″),</span></div><div class=\"line\">                                            <span class=\"comment\">//   0: text matching pattern</span></div><div class=\"line\">                                            <span class=\"comment\">//   1: text captured by the 1st ()</span></div><div class=\"line\">                                            <span class=\"comment\">//   2: text captured by the 2nd ()</span></div><div class=\"line\"></div><div class=\"line\">        qDebug() <span class=\"subst\">&lt;&lt;</span> <span class=\"literal\">rx</span><span class=\"built_in\">.</span>cap(<span class=\"number\">0</span>);              <span class=\"comment\">// a=100, text matching pattern</span></div><div class=\"line\">        qDebug() <span class=\"subst\">&lt;&lt;</span> <span class=\"literal\">rx</span><span class=\"built_in\">.</span>cap(<span class=\"number\">1</span>);              <span class=\"comment\">// a, text captured by the nth ()</span></div><div class=\"line\">        qDebug() <span class=\"subst\">&lt;&lt;</span> <span class=\"literal\">rx</span><span class=\"built_in\">.</span>cap(<span class=\"number\">2</span>);              <span class=\"comment\">// 100,</span></div><div class=\"line\"></div><div class=\"line\">        qDebug() <span class=\"subst\">&lt;&lt;</span> <span class=\"literal\">rx</span><span class=\"built_in\">.</span>pos(<span class=\"number\">0</span>);              <span class=\"comment\">// 0, position of the nth captured text</span></div><div class=\"line\">        qDebug() <span class=\"subst\">&lt;&lt;</span> <span class=\"literal\">rx</span><span class=\"built_in\">.</span>pos(<span class=\"number\">1</span>);              <span class=\"comment\">// 0</span></div><div class=\"line\">        qDebug() <span class=\"subst\">&lt;&lt;</span> <span class=\"literal\">rx</span><span class=\"built_in\">.</span>pos(<span class=\"number\">2</span>);              <span class=\"comment\">// 2</span></div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li><strong>用正则表达式修改文本</strong></li>\n</ul>\n<p>你可以把字符串中匹配的字符串替换成”一般字符串”</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">QString <span class=\"variable\">s =</span> ”<span class=\"variable\">a=</span><span class=\"number\">100</span>″;</div><div class=\"line\">s.replace(QRegExp(“(.*)=”), ”<span class=\"variable\">b=</span>”);</div><div class=\"line\">qDebug() &lt;&lt; s;                          // <span class=\"variable\">b=</span><span class=\"number\">100</span></div></pre></td></tr></table></figure>\n\n<p>或是把字符串中匹配的字符串替换”提取的字符串”</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\"><span class=\"attribute\">QString</span> <span class=\"attribute\">s</span> = ”<span class=\"attribute\">a</span>=<span class=\"value\">100″;</span></span></span></div><div class=\"line\"><span class=\"attribute\">s.replace</span>(<span class=\"attribute\">QRegExp</span>(“(<span class=\"attribute\">.</span>*)=<span class=\"value\">(.*)”),</span> ”\\\\<span class=\"attribute\">1</span>\\\\<span class=\"attribute\">2</span>=<span class=\"value\">\\\\2″);</span>  // \\<span class=\"attribute\">1</span> <span class=\"attribute\">is</span> <span class=\"attribute\">rx.cap</span>(<span class=\"attribute\">1</span>), \\<span class=\"attribute\">2</span> <span class=\"attribute\">is</span> <span class=\"attribute\">rx.cap</span>(<span class=\"attribute\">2</span>)</div><div class=\"line\"><span class=\"attribute\">qDebug</span>() &lt;&lt; <span class=\"attribute\">s</span>;                                  // <span class=\"attribute\">a100</span>=<span class=\"value\">100</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li><strong>把正则表达式转换成C/C++ string的小工具</strong></li>\n</ul>\n<p>没有Python的”””或是C#的@。标准的正则表达式因为出现一些特殊字符，在C/C++代码里使用时，必须进行转换。例如：”(\\S+)\\s<em>=\\s</em>(\\S<em>)”必须转换成”(\\S+)\\s</em>=\\s<em>(\\S</em>)”</p>\n<p>Qt的SDK里包含一个很帮的GUI工具，可以方便我们进行这类转换并测试你的表达式。在Linux下，它的路径是/usr/local/Trolltech/Qt-4.5.3/examples/tools/regexp/regexp </p>\n","source":"_posts/2015-03-16-Qt之正则表达式.md","raw":"title: Qt之正则表达式\ndate: 2015-03-16 21:00:07\ncategories:\n- Qt\ntags:\n- Qt\n- 正则表达式\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/phay/article/details/7304455](http://blog.csdn.net/phay/article/details/7304455 \"http://blog.csdn.net/phay/article/details/7304455\")\n\nQRegExp是Qt的正则表达式类.\nQt中有两个不同类的正则表达式.\n第一类为元字符.它表示一个或多个常量表达式.\n令一类为 转义字符,它代表一个特殊字符.\n\n**一.元字符**\n.  匹配任意单个字符.例如, 1.3 可能是1. 后面跟任意字符,再跟3\n^ 匹配字符串首. 例如, ^12可能是123,但不能是312\n$  配字符串尾. 例如, 12$可以是312, 当不能是 123\n[] 匹配括号内输入的任意字符.[123]可以为1, 2 或3\n\\*  匹配任意数量的前导字符. 例如, 1*2可以为任意数量个1(甚至没有), 后面跟一个2\n\\+ 匹配至少一个前导字符. 例如, 1+2必须为一个或多个1, 后跟一个2\n?  匹配一个前导字符或为空. 例如 1?2可以为2或这12\n\n**二.统配模式**\n通过 QRegExp::setPatternSyntax(QRegExp::Wildcard);可以将元字符设置为统配模式.在统配模式下,只有3个元字 符可以使用.他们的功能没有变化.\n? 匹配任意单个字符, 例如, 1?2可以为1,后面跟任意单个字符, 再跟2\n\\* 匹配任意一个字符序列. 例如, 1*2, 可以为1, 后面跟任意数量的字符, 再跟一个2\n[] 匹配一个定义的字符集合. 例如, [a-zA-Z\\.]可以匹配 a到z之间任意一个字符和.  [^a]匹配出小写a以外的字符.\n\n**三.转义序列**\n\n|||\n|:-:|:--|\n|\\\\.|匹配”.”|\n|\\\\^|匹配”^”|\n|\\\\$|匹配”$”|\n|\\\\[|匹配\"[\"|\n|\\\\]|匹配”]”|\n|\\\\\\*|匹配”*”|\n|\\\\+|匹配”+”|\n|\\\\?|匹配”?”|\n|\\\\b|匹配响铃字符,使计算机发出嘟的一声.|\n|\\\\t|制表符号|\n|\\\\n|换行符号|\n|\\\\r|回车符鉿|\n|\\\\s|任意空格|\n|\\\\xnn|匹配16进制为nn的字符|\n|\\\\0nn|匹配8进制的nn字符|\n\n这些表达式均以\\开始, 与C++的转义字符相同,所以为了定义QRegExp中的一个转义序列,\n需要在前面添加两个\\\\\n<br>\n- **用正则表达式验证文本有效性**\n\n你可以使用QRegExp::exactMatch来判断一个字符串是否符合一个pattern。\n```cplusplus\nvoid testRegexMatch()\n{\n    QString pattern(“.*=.*”);\n    QRegExp rx(pattern);\n\n    bool match = rx.exactMatch(“a=3″);\n    qDebug() << match;                      // True\n\n    match = rx.exactMatch(“a/2″);\n    qDebug() << match;                      // False\n}\n```\n<br>\n- **用正则表达式提取数据**\n\n你可以利用利用正则表达式从一个字符串里提取特定的字段或数据。例如，你可以用以下代码从”a=100″里提取”a”和”100″。\n```cplusplus\nvoid testRegexCapture()\n{\n    QString pattern(“(.*)=(.*)”);\n    QRegExp rx(pattern);\n\n    QString str(“a=100″);\n    int pos = str.indexOf(rx);              // 0, position of the first match.\n                                            // Returns -1 if str is not found.\n                                            // You can also use rx.indexIn(str);\n    qDebug() << pos;\n    if ( pos >= 0 )\n    {\n        qDebug() << rx.matchedLength();     // 5, length of the last matched string\n                                            // or -1 if there was no match\n        qDebug() << rx.capturedTexts();     // QStringList(“a=100″, ”a”, ”100″),\n                                            //   0: text matching pattern\n                                            //   1: text captured by the 1st ()\n                                            //   2: text captured by the 2nd ()\n\n        qDebug() << rx.cap(0);              // a=100, text matching pattern\n        qDebug() << rx.cap(1);              // a, text captured by the nth ()\n        qDebug() << rx.cap(2);              // 100,\n\n        qDebug() << rx.pos(0);              // 0, position of the nth captured text\n        qDebug() << rx.pos(1);              // 0\n        qDebug() << rx.pos(2);              // 2\n    }\n}\n```\n<br>\n- **用正则表达式修改文本**\n\n你可以把字符串中匹配的字符串替换成”一般字符串”\n```cplusplus\nQString s = ”a=100″;\ns.replace(QRegExp(“(.*)=”), ”b=”);\nqDebug() << s;                          // b=100\n```\n\n或是把字符串中匹配的字符串替换”提取的字符串”\n```cplusplus\nQString s = ”a=100″;\ns.replace(QRegExp(“(.*)=(.*)”), ”\\\\1\\\\2=\\\\2″);  // \\1 is rx.cap(1), \\2 is rx.cap(2)\nqDebug() << s;                                  // a100=100\n```\n<br>\n- **把正则表达式转换成C/C++ string的小工具**\n\n没有Python的”\"”或是C#的@。标准的正则表达式因为出现一些特殊字符，在C/C++代码里使用时，必须进行转换。例如：”(\\S+)\\s*=\\s*(\\S*)”必须转换成”(\\\\S+)\\\\s*=\\\\s*(\\\\S*)”\n\nQt的SDK里包含一个很帮的GUI工具，可以方便我们进行这类转换并测试你的表达式。在Linux下，它的路径是/usr/local/Trolltech/Qt-4.5.3/examples/tools/regexp/regexp \n","slug":"Qt之正则表达式","updated":1431306848000,"excerpt":"","_id":"0i7fnqmj2dj2jxtz","comments":true,"layout":"post","photos":[],"link":""},{"title":"QT 获取系统屏幕分辨率","date":1425906982000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","z7t8ewhigklgkon4"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/zhb123168/article/details/6744982\" title=\"http://blog.csdn.net/zhb123168/article/details/6744982\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/zhb123168/article/details/6744982</a></p>\n</blockquote>\n<ol>\n<li>在Windows下可以使用 GetSystemMetrics(SM_CXSCREEN);GetSystemMetrics(SM_CYSCREEN) 获取。</li>\n<li>在Linux下可以使用XDisplayWidth ；XDisplayHeight ()获取。</li>\n<li>在QT中呢？很多人说是 QApplication::desktop()-&gt;width();QApplication::desktop()-&gt;height(); 这个方法对于单显示器模式当然没有问题。但是对于多显示器，特别是使用了扩展桌面的就会有问题了。今天上午仔细看了QDesktopWidget的帮助，需要使用QApplication::desktop()-&gt;screenGeometry();这个函数有好几个重载的版本，意思都一样。该函数返回一个QRect，这个QRect的宽和高就是所在Screen的分辨率。获取方法如下：</li>\n</ol>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">void</span> GetScreenInfo()</div><div class=\"line\">{</div><div class=\"line\">    QDesktopWidget<span class=\"subst\">*</span> desktopWidget <span class=\"subst\">=</span> QApplication<span class=\"tag\">::desktop</span>();</div><div class=\"line\">    <span class=\"comment\">//获取可用桌面大小</span></div><div class=\"line\">    QRect deskRect <span class=\"subst\">=</span> desktopWidget<span class=\"subst\">-&gt;</span>availableGeometry();</div><div class=\"line\">    <span class=\"comment\">//获取设备屏幕大小</span></div><div class=\"line\">    QRect screenRect <span class=\"subst\">=</span> desktopWidget<span class=\"subst\">-&gt;</span>screenGeometry();</div><div class=\"line\"></div><div class=\"line\">    g_nActScreenX <span class=\"subst\">=</span> screenRect<span class=\"built_in\">.</span>width();</div><div class=\"line\">    g_nActScreenY <span class=\"subst\">=</span> screenRect<span class=\"built_in\">.</span>height();</div><div class=\"line\">    <span class=\"comment\">//g_nActScreenX = deskRect.width();</span></div><div class=\"line\">    <span class=\"comment\">//g_nActScreenY = deskRect.height();</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获取系统设置的屏幕个数（屏幕拷贝方式该值为1）</span></div><div class=\"line\">    g_nScreenCount <span class=\"subst\">=</span> desktopWidget<span class=\"subst\">-&gt;</span>screenCount();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>说到这里，顺便标记以下多屏幕设置成拷贝方式时，获取的屏幕的个数是一个，只有设置成扩展时才返回多个。</p>\n<p>打印屏幕分辨率和个数信息：</p>\n<figure class=\"highlight cplusplus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">void printscreeninfo()</div><div class=\"line\">{</div><div class=\"line\">    QDesktopWidget *dwsktopwidget = QApplication::desktop();</div><div class=\"line\">    QRect deskrect = dwsktopwidget-&gt;availableGeometry();</div><div class=\"line\">    QRect screenrect = dwsktopwidget-&gt;screenGeometry();</div><div class=\"line\">    QDesktopWidget *dwsktopwidget = QApplication::desktop();</div><div class=\"line\">    QRect deskrect = dwsktopwidget-&gt;availableGeometry();</div><div class=\"line\">    QRect screenrect = dwsktopwidget-&gt;screenGeometry();</div><div class=\"line\">    <span class=\"keyword\">int</span> scrcount = dwsktopwidget-&gt;screenCount();</div><div class=\"line\">    qCritical(<span class=\"string\">\"screenrect.w==%s\\n\"</span>,qPrintable(QString::number(screenrect.width())));</div><div class=\"line\">    qCritical(<span class=\"string\">\"screenrect.h==%s\\n\"</span>,qPrintable(QString::number(screenrect.height())));</div><div class=\"line\">    qCritical(<span class=\"string\">\"deskrect.w==%s\\n\"</span>,qPrintable(QString::number(deskrect.width())));</div><div class=\"line\">    qCritical(<span class=\"string\">\"deskrect.h==%s\\n\"</span>,qPrintable(QString::number(deskrect.height())));</div><div class=\"line\">    qCritical(<span class=\"string\">\"scrcount==%s\\n\"</span>,qPrintable(QString::number(scrcount)));</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-09-QT-获取系统屏幕分辨率.md","raw":"title: QT 获取系统屏幕分辨率\ndate: 2015-03-09 21:16:22\ncategories:\n- Qt\ntags:\n- Qt\n- 获取屏幕分辨率\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/zhb123168/article/details/6744982](http://blog.csdn.net/zhb123168/article/details/6744982 \"http://blog.csdn.net/zhb123168/article/details/6744982\")\n\n1. 在Windows下可以使用 GetSystemMetrics(SM_CXSCREEN);GetSystemMetrics(SM_CYSCREEN) 获取。\n2. 在Linux下可以使用XDisplayWidth ；XDisplayHeight ()获取。\n3. 在QT中呢？很多人说是 QApplication::desktop()->width();QApplication::desktop()->height(); 这个方法对于单显示器模式当然没有问题。但是对于多显示器，特别是使用了扩展桌面的就会有问题了。今天上午仔细看了QDesktopWidget的帮助，需要使用QApplication::desktop()->screenGeometry();这个函数有好几个重载的版本，意思都一样。该函数返回一个QRect，这个QRect的宽和高就是所在Screen的分辨率。获取方法如下：\n```cplusplus\nvoid GetScreenInfo()\n{\n    QDesktopWidget* desktopWidget = QApplication::desktop();\n    //获取可用桌面大小\n    QRect deskRect = desktopWidget->availableGeometry();\n    //获取设备屏幕大小\n    QRect screenRect = desktopWidget->screenGeometry();\n\n    g_nActScreenX = screenRect.width();\n    g_nActScreenY = screenRect.height();\n    //g_nActScreenX = deskRect.width();\n    //g_nActScreenY = deskRect.height();\n\n    //获取系统设置的屏幕个数（屏幕拷贝方式该值为1）\n    g_nScreenCount = desktopWidget->screenCount();\n}\n```\n\n说到这里，顺便标记以下多屏幕设置成拷贝方式时，获取的屏幕的个数是一个，只有设置成扩展时才返回多个。\n\n打印屏幕分辨率和个数信息：\n```cplusplus\nvoid printscreeninfo()\n{\n    QDesktopWidget *dwsktopwidget = QApplication::desktop();\n    QRect deskrect = dwsktopwidget->availableGeometry();\n    QRect screenrect = dwsktopwidget->screenGeometry();\n    QDesktopWidget *dwsktopwidget = QApplication::desktop();\n    QRect deskrect = dwsktopwidget->availableGeometry();\n    QRect screenrect = dwsktopwidget->screenGeometry();\n    int scrcount = dwsktopwidget->screenCount();\n    qCritical(\"screenrect.w==%s\\n\",qPrintable(QString::number(screenrect.width())));\n    qCritical(\"screenrect.h==%s\\n\",qPrintable(QString::number(screenrect.height())));\n    qCritical(\"deskrect.w==%s\\n\",qPrintable(QString::number(deskrect.width())));\n    qCritical(\"deskrect.h==%s\\n\",qPrintable(QString::number(deskrect.height())));\n    qCritical(\"scrcount==%s\\n\",qPrintable(QString::number(scrcount)));\n}\n```\n","slug":"QT-获取系统屏幕分辨率","updated":1431306848000,"excerpt":"","_id":"0gxvdboiq6ljput7","comments":true,"layout":"post","photos":[],"link":""},{"title":"绘制支持富文本带阴影自适应大小的Tooltips","date":1426599147000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","g4x6xyai6qnhdp1n","dzvr85vk4rur64rk","hvbp1no0xepoxbmz","0ft511erlbqglqp8"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>在日常开发中，我们经常会用到<code>Qt</code>的<code>Tooltips</code>，但是默认的样式不够美观，而且不支持富文本，于是一般情况都会重写<code>Tooltips</code>。</p>\n<p>以下是我的实现，用了<code>QSS</code>样式表，所以不需要任何美术资源。阴影部分也是用<code>QtGui.QPainter</code>绘制的，可调节XY偏移值。富文本显示使用<code>html</code>标签，所以换行需要手动输入<code>&lt;br&gt;</code>，<code>Tooltips</code>会自动适应大小。</p>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> math</div><div class=\"line\"><span class=\"keyword\">from</span> PyQt4 <span class=\"keyword\">import</span> QtCore, QtGui</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tooltips</span><span class=\"params\">(QtGui.QMainWindow)</span>:</span></div><div class=\"line\">    TOOLTIPS_LINE_HEIGHT = <span class=\"number\">18</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, parent)</span>:</span></div><div class=\"line\">        super(Tooltips, self).__init__(parent)</div><div class=\"line\">        self.setWindowFlags(QtCore.Qt.Window | QtCore.Qt.FramelessWindowHint)</div><div class=\"line\">        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)</div><div class=\"line\">        self.setAttribute(QtCore.Qt.WA_DontCreateNativeAncestors)</div><div class=\"line\">        self.setAttribute(QtCore.Qt.WA_ShowWithoutActivating)</div><div class=\"line\">        self.hide()</div><div class=\"line\">        self.setStyleSheet(<span class=\"string\">'Tooltips &gt; QLabel {border: 1px solid #f56133; border-radius: 4px; background: #ffffff; font: normal 12px '</span>Microsoft Yahei<span class=\"string\">'; padding: 8px;}'</span>)</div><div class=\"line\"></div><div class=\"line\">        self._actualWidth = <span class=\"number\">150</span></div><div class=\"line\">        self._actualHeight = <span class=\"number\">50</span></div><div class=\"line\">        self._offsetXShadow = <span class=\"number\">5</span></div><div class=\"line\">        self._offsetYShadow = <span class=\"number\">5</span></div><div class=\"line\"></div><div class=\"line\">        self._labelText = QtGui.QLabel(self)</div><div class=\"line\">        self._labelText.setWordWrap(<span class=\"keyword\">True</span>)</div><div class=\"line\">        self._labelText.move(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</div><div class=\"line\">        self._labelText.setText(<span class=\"string\">u''</span>)</div><div class=\"line\">        self._labelText.setAlignment(QtCore.Qt.AlignVCenter)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setText</span><span class=\"params\">(self, str_text)</span>:</span></div><div class=\"line\">        self._labelText.setText(str_text)</div><div class=\"line\">        self.adjustSize()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">text</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._labelText.text()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resize</span><span class=\"params\">(self, *__args)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> len(__args) == <span class=\"number\">1</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(__args[<span class=\"number\">0</span>], QtCore.QSize):</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            self._actualWidth = __args[<span class=\"number\">0</span>].width()</div><div class=\"line\">            self._actualHeight = __args[<span class=\"number\">0</span>].height()</div><div class=\"line\">            super(Tooltips, self).resize(__args[<span class=\"number\">0</span>] + QtCore.QSize(self._offsetXShadow, self._offsetYShadow))</div><div class=\"line\">        <span class=\"keyword\">elif</span> len(__args) == <span class=\"number\">2</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(self._actualWidth, int):</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(self._actualHeight, int):</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            self._actualWidth = __args[<span class=\"number\">0</span>]</div><div class=\"line\">            self._actualHeight = __args[<span class=\"number\">1</span>]</div><div class=\"line\">            super(Tooltips, self).resize(self._actualWidth + self._offsetXShadow,</div><div class=\"line\">                                         self._actualHeight + self._offsetYShadow)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resizeEvent</span><span class=\"params\">(self, event)</span>:</span></div><div class=\"line\">        self._labelText.resize(event.size() - QtCore.QSize(self._offsetXShadow, self._offsetYShadow))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">paintEvent</span><span class=\"params\">(self, event)</span>:</span></div><div class=\"line\">        painter = QtGui.QPainter(self)</div><div class=\"line\">        painter.setRenderHint(QtGui.QPainter.Antialiasing, <span class=\"keyword\">True</span>)</div><div class=\"line\">        color = QtGui.QColor(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">10</span>):</div><div class=\"line\">            path = QtGui.QPainterPath()</div><div class=\"line\">            path.setFillRule(QtCore.Qt.WindingFill)</div><div class=\"line\">            path.addRect(<span class=\"number\">10</span> - i, <span class=\"number\">10</span> - i, super(Tooltips, self).width() - (<span class=\"number\">10</span> - i) * <span class=\"number\">2</span>,</div><div class=\"line\">                         super(Tooltips, self).height() - (<span class=\"number\">10</span> - i) * <span class=\"number\">2</span>)</div><div class=\"line\">            color.setAlpha(<span class=\"number\">150</span> - math.sqrt(i) * <span class=\"number\">50</span>)</div><div class=\"line\">            painter.setPen(color)</div><div class=\"line\">            painter.drawPath(path)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">width</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._actualWidth</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">height</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._actualHeight</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">size</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> QtCore.QSize(self._actualWidth, self._actualHeight)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adjustSize</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        orgText = self.text()</div><div class=\"line\">        countLF = orgText.count(<span class=\"string\">'&lt;br&gt;'</span>) + <span class=\"number\">1</span></div><div class=\"line\">        plainText = orgText.replace(<span class=\"string\">'&lt;br&gt;'</span>, <span class=\"string\">'\\n'</span>).replace(QtCore.QRegExp(<span class=\"string\">'&lt;[^&gt;]+&gt;'</span>), <span class=\"string\">''</span>).replace(<span class=\"string\">'&nbsp;'</span>, <span class=\"string\">' '</span>)</div><div class=\"line\">        tgtWidth = self._maxLineWidth(plainText)</div><div class=\"line\">        tgtRect = QtCore.QSize(tgtWidth, Tooltips.TOOLTIPS_LINE_HEIGHT * countLF + <span class=\"number\">19</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> self.width() != tgtRect.width() <span class=\"keyword\">or</span> self.height() != tgtRect.height():</div><div class=\"line\">            self.resize(tgtRect)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_maxLineWidth</span><span class=\"params\">(self, text)</span>:</span></div><div class=\"line\">        maxLineWidth = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> text.split(<span class=\"string\">'\\n'</span>):</div><div class=\"line\">            <span class=\"keyword\">if</span> line == <span class=\"string\">''</span>:</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\">            tmpWidth = self._labelText.fontMetrics().width(line) + <span class=\"number\">24</span></div><div class=\"line\">            <span class=\"keyword\">if</span> tmpWidth &gt; maxLineWidth:</div><div class=\"line\">                maxLineWidth = tmpWidth</div><div class=\"line\">        <span class=\"keyword\">return</span> maxLineWidth</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setShadowOffset</span><span class=\"params\">(self, int_offsetX, int_offsetY)</span>:</span></div><div class=\"line\">        self._offsetXShadow = int_offsetX</div><div class=\"line\">        self._offsetYShadow = int_offsetY</div><div class=\"line\">        self.resize(self._actualWidth, self._actualHeight)</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-17-绘制支持富文本带阴影自适应大小的Tooltips.md","raw":"title: 绘制支持富文本带阴影自适应大小的Tooltips\ndate: 2015-03-17 21:32:27\ncategories:\n- Qt\ntags:\n- Qt\n- Tooltips\n- 富文本\n- 阴影\n- 自适应\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n在日常开发中，我们经常会用到`Qt`的`Tooltips`，但是默认的样式不够美观，而且不支持富文本，于是一般情况都会重写`Tooltips`。\n\n以下是我的实现，用了`QSS`样式表，所以不需要任何美术资源。阴影部分也是用`QtGui.QPainter`绘制的，可调节XY偏移值。富文本显示使用`html`标签，所以换行需要手动输入`<br>`，`Tooltips`会自动适应大小。\n\n代码如下：\n```python\nimport math\nfrom PyQt4 import QtCore, QtGui\n\n\nclass Tooltips(QtGui.QMainWindow):\n    TOOLTIPS_LINE_HEIGHT = 18\n\n    def __init__(self, parent):\n        super(Tooltips, self).__init__(parent)\n        self.setWindowFlags(QtCore.Qt.Window | QtCore.Qt.FramelessWindowHint)\n        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n        self.setAttribute(QtCore.Qt.WA_DontCreateNativeAncestors)\n        self.setAttribute(QtCore.Qt.WA_ShowWithoutActivating)\n        self.hide()\n        self.setStyleSheet('Tooltips > QLabel {border: 1px solid #f56133; border-radius: 4px; background: #ffffff; font: normal 12px 'Microsoft Yahei'; padding: 8px;}')\n\n        self._actualWidth = 150\n        self._actualHeight = 50\n        self._offsetXShadow = 5\n        self._offsetYShadow = 5\n\n        self._labelText = QtGui.QLabel(self)\n        self._labelText.setWordWrap(True)\n        self._labelText.move(0, 0)\n        self._labelText.setText(u'')\n        self._labelText.setAlignment(QtCore.Qt.AlignVCenter)\n\n    def setText(self, str_text):\n        self._labelText.setText(str_text)\n        self.adjustSize()\n\n    def text(self):\n        return self._labelText.text()\n\n    def resize(self, *__args):\n        if len(__args) == 1:\n            if not isinstance(__args[0], QtCore.QSize):\n                return\n            self._actualWidth = __args[0].width()\n            self._actualHeight = __args[0].height()\n            super(Tooltips, self).resize(__args[0] + QtCore.QSize(self._offsetXShadow, self._offsetYShadow))\n        elif len(__args) == 2:\n            if not isinstance(self._actualWidth, int):\n                return\n            if not isinstance(self._actualHeight, int):\n                return\n            self._actualWidth = __args[0]\n            self._actualHeight = __args[1]\n            super(Tooltips, self).resize(self._actualWidth + self._offsetXShadow,\n                                         self._actualHeight + self._offsetYShadow)\n\n    def resizeEvent(self, event):\n        self._labelText.resize(event.size() - QtCore.QSize(self._offsetXShadow, self._offsetYShadow))\n\n    def paintEvent(self, event):\n        painter = QtGui.QPainter(self)\n        painter.setRenderHint(QtGui.QPainter.Antialiasing, True)\n        color = QtGui.QColor(0, 0, 0, 0)\n        for i in range(0, 10):\n            path = QtGui.QPainterPath()\n            path.setFillRule(QtCore.Qt.WindingFill)\n            path.addRect(10 - i, 10 - i, super(Tooltips, self).width() - (10 - i) * 2,\n                         super(Tooltips, self).height() - (10 - i) * 2)\n            color.setAlpha(150 - math.sqrt(i) * 50)\n            painter.setPen(color)\n            painter.drawPath(path)\n\n    def width(self):\n        return self._actualWidth\n\n    def height(self):\n        return self._actualHeight\n\n    def size(self):\n        return QtCore.QSize(self._actualWidth, self._actualHeight)\n\n    def adjustSize(self):\n        orgText = self.text()\n        countLF = orgText.count('<br>') + 1\n        plainText = orgText.replace('<br>', '\\n').replace(QtCore.QRegExp('<[^>]+>'), '').replace('&nbsp;', ' ')\n        tgtWidth = self._maxLineWidth(plainText)\n        tgtRect = QtCore.QSize(tgtWidth, Tooltips.TOOLTIPS_LINE_HEIGHT * countLF + 19)\n        if self.width() != tgtRect.width() or self.height() != tgtRect.height():\n            self.resize(tgtRect)\n\n    def _maxLineWidth(self, text):\n        maxLineWidth = 0\n        for line in text.split('\\n'):\n            if line == '':\n                continue\n            tmpWidth = self._labelText.fontMetrics().width(line) + 24\n            if tmpWidth > maxLineWidth:\n                maxLineWidth = tmpWidth\n        return maxLineWidth\n\n    def setShadowOffset(self, int_offsetX, int_offsetY):\n        self._offsetXShadow = int_offsetX\n        self._offsetYShadow = int_offsetY\n        self.resize(self._actualWidth, self._actualHeight)\n```\n","slug":"绘制支持富文本带阴影自适应大小的Tooltips","updated":1431306848000,"excerpt":"","_id":"74bft70ix6wn7pp0","comments":true,"layout":"post","photos":[],"link":""},{"title":"QLabel中html标签的使用","date":1426752161000,"categories":["2zuml5ffoy5vkypb"],"tags":["ycxziuf98rkp8m02","64aols9iwmw96ty8"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/imxiangzi/article/details/7749529\" title=\"http://blog.csdn.net/imxiangzi/article/details/7749529\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/imxiangzi/article/details/7749529</a></p>\n</blockquote>\n<p>QLabel中显示的字符串是支持HTML标签的。如果应用好的话会达到很多方便快捷的效果。</p>\n<p>举几个例子如下：<br>（1） 作为标题：<br>用一个QLabel对象，使其字体加大、加粗、居中，使用如下三个标签即可。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">new QLabel(\"<span class=\"tag\">&lt;<span class=\"title\">font</span> <span class=\"attribute\">size</span>=<span class=\"value\">'+1'</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">b</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">align</span>=<span class=\"value\">'center'</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">font</span>&gt;</span>\", this, \"title\")</div></pre></td></tr></table></figure>\n\n<p>（2） 加下划线：<br>使用<code>&lt;u&gt;&lt;/u&gt;</code>即可实现。</p>\n<p>（3） 给局部加样式<br>还可以对text的部分内容添加标签，以使个别内容使用不同字体、样式，并且不影响整体字体。如，给字加颜色、大小、字体等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">font</span> <span class=\"attribute\">color</span>=<span class=\"value\">'#5500ff'</span> <span class=\"attribute\">size</span>=<span class=\"value\">'+1'</span> <span class=\"attribute\">face</span>=<span class=\"value\">'Sans'</span>&gt;</span>被设置了字体<span class=\"tag\">&lt;/<span class=\"title\">font</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>（4） 画横线<br>使用<code>&lt;hr&gt;</code>即可实现。</p>\n<p>完整代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;qlayout.h&gt;   </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;qframe.h&gt;   </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;qlabel.h&gt;   </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;qfont.h&gt;   </span></div><div class=\"line\">QVBoxLayout *vBox = <span class=\"keyword\">new</span> QVBoxLayout(<span class=\"keyword\">this</span>);  </div><div class=\"line\">vBox-&gt;addWidget(<span class=\"keyword\">new</span> QLabel(<span class=\"string\">\"&lt;font size='+1'&gt;&lt;b&gt;&lt;p align='center'&gt;标题&lt;/p&gt;&lt;/b&gt;&lt;/font&gt;\"</span>, <span class=\"keyword\">this</span>));<span class=\"comment\">//标题   </span></div><div class=\"line\">vBox-&gt;addWidget(<span class=\"keyword\">new</span> QLabel(<span class=\"string\">\"&lt;hr&gt;\"</span>, <span class=\"keyword\">this</span>, <span class=\"string\">\"hr\"</span>));<span class=\"comment\">//在标题下面画一道横线   </span></div><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\">//或是用下面的方法 </div><div class=\"line\">QFrame *lbHr = new QFrame( this, \"line4\" ); </div><div class=\"line\">lbHr-&gt;setGeometry( QRect( 1, 20, width()-2, 16 ) ); </div><div class=\"line\">//lbHr-&gt;setPaletteBackgroundColor( QColor( 222, 199, 241 ) ); </div><div class=\"line\">lbHr-&gt;setFrameShape( QFrame::HLine ); </div><div class=\"line\">lbHr-&gt;setFrameShadow( QFrame::Sunken ); </div><div class=\"line\">lbHr-&gt;setFrameShape( QFrame::HLine ); </div><div class=\"line\">vBox-&gt;addWidget(lbHr);//横线 </div><div class=\"line\">*/  </div><div class=\"line\">vBox-&gt;addStretch(<span class=\"number\">1</span>);  </div><div class=\"line\">vBox-&gt;addWidget(<span class=\"keyword\">new</span> QLabel(<span class=\"string\">\"&lt;u&gt;带下划线的label&lt;/u&gt;\"</span>, <span class=\"keyword\">this</span>));  </div><div class=\"line\">QLabel *label = <span class=\"keyword\">new</span> QLabel(<span class=\"string\">\"设置字体：&lt;font color='#5500ff' size='+1' face='Sans'&gt;被设置了字体&lt;/font&gt;\"</span>, <span class=\"keyword\">this</span>);  </div><div class=\"line\"><span class=\"comment\">//字体加粗，被设置字体部分同样加粗   </span></div><div class=\"line\">QFont font = label-&gt;font();  </div><div class=\"line\">font.setBold(<span class=\"keyword\">true</span>);  </div><div class=\"line\">label-&gt;setFont(font);  </div><div class=\"line\">vBox-&gt;addWidget(label);  </div><div class=\"line\">QLabel *label2 = <span class=\"keyword\">new</span> QLabel(<span class=\"string\">\"设置字体未加粗：&lt;font color='#5500ff' size='+1' face='Sans'&gt;被设置了字体&lt;/font&gt;\"</span>, <span class=\"keyword\">this</span>);  </div><div class=\"line\">vBox-&gt;addWidget(label2);</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-19-QLabel中html标签的使用.md","raw":"title: QLabel中html标签的使用\ndate: 2015-03-19 16:02:41\ncategories:\n- Qt\ntags:\n- Qt\n- QLabel\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/imxiangzi/article/details/7749529](http://blog.csdn.net/imxiangzi/article/details/7749529 \"http://blog.csdn.net/imxiangzi/article/details/7749529\")\n\nQLabel中显示的字符串是支持HTML标签的。如果应用好的话会达到很多方便快捷的效果。\n\n举几个例子如下：\n（1） 作为标题：\n用一个QLabel对象，使其字体加大、加粗、居中，使用如下三个标签即可。\n``` html\nnew QLabel(\"<font size='+1'><b><p align='center'>标题</p></b></font>\", this, \"title\")\n```\n\n（2） 加下划线：\n使用`<u></u>`即可实现。\n\n（3） 给局部加样式\n还可以对text的部分内容添加标签，以使个别内容使用不同字体、样式，并且不影响整体字体。如，给字加颜色、大小、字体等。\n``` html\n<font color='#5500ff' size='+1' face='Sans'>被设置了字体</font>\n```\n\n（4） 画横线\n使用`<hr>`即可实现。\n\n完整代码如下：\n``` cpp\n#include <qlayout.h>   \n#include <qframe.h>   \n#include <qlabel.h>   \n#include <qfont.h>   \nQVBoxLayout *vBox = new QVBoxLayout(this);  \nvBox->addWidget(new QLabel(\"<font size='+1'><b><p align='center'>标题</p></b></font>\", this));//标题   \nvBox->addWidget(new QLabel(\"<hr>\", this, \"hr\"));//在标题下面画一道横线   \n/* \n//或是用下面的方法 \nQFrame *lbHr = new QFrame( this, \"line4\" ); \nlbHr->setGeometry( QRect( 1, 20, width()-2, 16 ) ); \n//lbHr->setPaletteBackgroundColor( QColor( 222, 199, 241 ) ); \nlbHr->setFrameShape( QFrame::HLine ); \nlbHr->setFrameShadow( QFrame::Sunken ); \nlbHr->setFrameShape( QFrame::HLine ); \nvBox->addWidget(lbHr);//横线 \n*/  \nvBox->addStretch(1);  \nvBox->addWidget(new QLabel(\"<u>带下划线的label</u>\", this));  \nQLabel *label = new QLabel(\"设置字体：<font color='#5500ff' size='+1' face='Sans'>被设置了字体</font>\", this);  \n//字体加粗，被设置字体部分同样加粗   \nQFont font = label->font();  \nfont.setBold(true);  \nlabel->setFont(font);  \nvBox->addWidget(label);  \nQLabel *label2 = new QLabel(\"设置字体未加粗：<font color='#5500ff' size='+1' face='Sans'>被设置了字体</font>\", this);  \nvBox->addWidget(label2);\n```\n","slug":"QLabel中html标签的使用","updated":1431306848000,"excerpt":"","_id":"hag00ij41u20ccja","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python中计算字符串中某个字符个数的4种方法","date":1426646430000,"categories":["ldi4kaat0baj4vp1"],"tags":["f990cqsp2h8pwon1","nxcejl8ilwzrar20"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<h4 id=\"方法一\">方法一</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">s = <span class=\"string\">\"abacad\"</span></div><div class=\"line\"><span class=\"keyword\">print</span> s.count(<span class=\"string\">\"a\"</span>)</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h4 id=\"方法二\">方法二</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\">count = len(re.findall(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"abacad\"</span>))</div><div class=\"line\">print(count)</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h4 id=\"方法三\">方法三</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</div><div class=\"line\">s = <span class=\"string\">\"abacad\"</span></div><div class=\"line\">c = Counter(s)</div><div class=\"line\"><span class=\"keyword\">print</span> c[<span class=\"string\">'a'</span>]</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h4 id=\"方法四\">方法四</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> len([ele <span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> <span class=\"string\">'abacad'</span> <span class=\"keyword\">if</span> ele == <span class=\"string\">'a'</span>])</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-18-Python中计算字符串中某个字符个数的4种方法.md","raw":"title: Python中计算字符串中某个字符个数的4种方法\ndate: 2015-03-18 10:40:30\ncategories:\n- Python\ntags:\n- 字符个数\n- 字符串\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n#### 方法一 ####\n```python\ns = \"abacad\"\nprint s.count(\"a\")\n```\n<br>\n#### 方法二 ####\n```python\nimport re\ncount = len(re.findall(\"a\",\"abacad\"))\nprint(count)\n```\n<br>\n#### 方法三 ####\n```python\nfrom collections import Counter\ns = \"abacad\"\nc = Counter(s)\nprint c['a']\n```\n<br>\n#### 方法四 ####\n```python\nprint len([ele for ele in 'abacad' if ele == 'a'])\n```\n","slug":"Python中计算字符串中某个字符个数的4种方法","updated":1431306848000,"excerpt":"","_id":"89xw3cwzeaosg4on","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python对小数进行除法运算的正确方法示例","date":1425817302000,"categories":["ldi4kaat0baj4vp1"],"tags":["pmzty31pfn27c2cd","a519i2mbeyyesj5d"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.jb51.net/article/54278.htm\" title=\"http://www.jb51.net/article/54278.htm\" target=\"_blank\" rel=\"external\">http://www.jb51.net/article/54278.htm</a></p>\n</blockquote>\n<p>这篇文章主要介绍了Python对小数进行除法运算的正确方法示例,正确的方法是需要转换成浮点数,否则永远不会得到正确结果,需要的朋友可以参考下。</p>\n<p>求一个算式<br>代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"number\">1</span></div><div class=\"line\">b=<span class=\"number\">2</span></div><div class=\"line\">c=<span class=\"number\">3</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> c*(a/b)</div></pre></td></tr></table></figure>\n\n<p>运行结果总是0，反复检查拆开以后，发现在Python里，整数初整数，只能得出整数。<br>也就是 a 除 b 这个结果永远是0，只要把a或者b其中一个数改成浮点数即可。<br>代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"number\">1</span></div><div class=\"line\">b=<span class=\"number\">2</span></div><div class=\"line\">c=<span class=\"number\">3</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> c*(a/float(b))</div><div class=\"line\"><span class=\"keyword\">print</span> c*(float(a)/b)</div></pre></td></tr></table></figure>\n\n<p>这样才能准确算出a除b的正确结果，当然，如果a比b大，并且不需要小数位数部分可以不用float。<br>代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"number\">1</span></div><div class=\"line\">b=<span class=\"number\">2</span></div><div class=\"line\">c=<span class=\"number\">3</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">print</span> c/a <span class=\"comment\"># 3</span></div><div class=\"line\"><span class=\"keyword\">print</span> c/b <span class=\"comment\"># 1</span></div><div class=\"line\"><span class=\"keyword\">print</span> c/float(b )<span class=\"comment\"># 1.5</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-08-Python对小数进行除法运算的正确方法示例.md","raw":"title: Python对小数进行除法运算的正确方法示例\ndate: 2015-03-08 20:21:42\ncategories:\n- Python\ntags:\n- 小数运算\n- 除法\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.jb51.net/article/54278.htm](http://www.jb51.net/article/54278.htm \"http://www.jb51.net/article/54278.htm\")\n\n这篇文章主要介绍了Python对小数进行除法运算的正确方法示例,正确的方法是需要转换成浮点数,否则永远不会得到正确结果,需要的朋友可以参考下。\n\n求一个算式\n代码如下:\n```python\na=1\nb=2\nc=3\n \nprint c*(a/b)\n```\n运行结果总是0，反复检查拆开以后，发现在Python里，整数初整数，只能得出整数。\n也就是 a 除 b 这个结果永远是0，只要把a或者b其中一个数改成浮点数即可。\n代码如下:\n```python\na=1\nb=2\nc=3\n \nprint c*(a/float(b))\nprint c*(float(a)/b)\n```\n这样才能准确算出a除b的正确结果，当然，如果a比b大，并且不需要小数位数部分可以不用float。\n代码如下:\n```python\na=1\nb=2\nc=3\n \nprint c/a # 3\nprint c/b # 1\nprint c/float(b )# 1.5\n```","slug":"Python对小数进行除法运算的正确方法示例","updated":1431306848000,"excerpt":"","_id":"dq6dkp99qtivft8q","comments":true,"layout":"post","photos":[],"link":""},{"title":"关于Python文件操作","date":1426845210000,"categories":["ldi4kaat0baj4vp1"],"tags":["c4c29xhlr6ud44gm"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html\" title=\"http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html</a></p>\n</blockquote>\n<p>总是记不住API。昨晚写的时候用到了这些，但是没记住，于是就索性整理一下吧：</p>\n<h2 id=\"os模块和shutil模块\">os模块和shutil模块</h2>\n<p>得到当前工作目录，即当前Python脚本工作的目录路径: <code>os.getcwd()</code><br>返回指定目录下的所有文件和目录名: <code>os.listdir()</code><br>函数用来删除一个文件: <code>os.remove()</code><br>删除多个目录: <code>os.removedirs（r“c：\\python”）</code><br>检验给出的路径是否是一个文件: <code>os.path.isfile()</code><br>检验给出的路径是否是一个目录: <code>os.path.isdir()</code><br>判断是否是绝对路径: <code>os.path.isabs()</code><br>检验给出的路径是否真地存: <code>os.path.exists()</code><br>返回一个路径的目录名和文件名: <code>os.path.split()</code><br>分离扩展名: <code>os.path.splitext()</code><br>获取路径名: <code>os.path.dirname()</code><br>获取文件名: <code>os.path.basename()</code><br>运行shell命令: <code>os.system()</code><br>读取和设置环境变量: <code>os.getenv()</code> 与 <code>os.putenv()</code><br>给出当前平台使用的行终止符: <code>os.linesep</code> (Windows使用’\\r\\n’，Linux使用’\\n’而Mac使用’\\r’)<br>指示你正在使用的平台: <code>os.name</code> (对于Windows，它是’nt’，而对于Linux/Unix用户，它是’posix’)<br>重命名: <code>os.rename（old, new）</code><br>创建多级目录: <code>os.makedirs（r“c：\\python\\test”）</code><br>创建单个目录: <code>os.mkdir（“test”）</code><br>获取文件属性: <code>os.stat（file）</code><br>修改文件权限与时间戳: <code>os.chmod（file）</code><br>终止当前进程: <code>os.exit（）</code><br>获取文件大小: <code>os.path.getsize（filename）</code></p>\n<p><br></p>\n<h2 id=\"文件操作\">文件操作</h2>\n<p><code>os.mknod(&quot;test.txt&quot;)</code> 创建空文件<br><code>fp = open(&quot;test.txt&quot;,w)</code> 直接打开一个文件，如果文件不存在则创建文件</p>\n<p>关于open 模式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td style=\"text-align:left\">以写方式打开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a</td>\n<td style=\"text-align:left\">以追加模式打开 (从 EOF 开始, 必要时创建新文件)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r+</td>\n<td style=\"text-align:left\">以读写模式打开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w+</td>\n<td style=\"text-align:left\">以读写模式打开 (参见 w )</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a+</td>\n<td style=\"text-align:left\">以读写模式打开 (参见 a )</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rb</td>\n<td style=\"text-align:left\">以二进制读模式打开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">wb</td>\n<td style=\"text-align:left\">以二进制写模式打开 (参见 w )</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ab</td>\n<td style=\"text-align:left\">以二进制追加模式打开 (参见 a )</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rb+</td>\n<td style=\"text-align:left\">以二进制读写模式打开 (参见 r+ )</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">wb+</td>\n<td style=\"text-align:left\">以二进制读写模式打开 (参见 w+ )</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ab+</td>\n<td style=\"text-align:left\">以二进制读写模式打开 (参见 a+ )</td>\n</tr>\n</tbody>\n</table>\n<p><code>fp.read([size])</code> #size为读取的长度，以byte为单位<br><code>fp.readline([size])</code> #读一行，如果定义了size，有可能返回的只是一行的一部分<br><code>fp.readlines([size])</code> #把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。<br><code>fp.write(str)</code> #把str写到文件中，write()并不会在str后加上一个换行符<br><code>fp.writelines(seq)</code> #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。<br><code>fp.close()</code> #关闭文件。python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。  如果一个文件在关闭后还对其进行操作会产生ValueError<br><code>fp.flush()</code> #把缓冲区的内容写入硬盘<br><code>fp.fileno()</code> #返回一个长整型的”文件标签“<br><code>fp.isatty()</code> #文件是否是一个终端设备文件（unix系统中的）<br><code>fp.tell()</code> #返回文件操作标记的当前位置，以文件的开头为原点<br><code>fp.next()</code> #返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。<br><code>fp.seek(offset[,whence])</code> #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的，一般为正数。但如果提供了whence参数就不一定了，whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意，如果文件以a或a+的模式打开，每次进行写操作时，文件操作标记会自动返回到文件末尾。<br><code>fp.truncate([size])</code> #把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大，依据系统的不同可能是不改变文件，也可能是用0把文件补到相应的大小，也可能是以一些随机的内容加上去。</p>\n<p><br></p>\n<h2 id=\"目录操作\">目录操作</h2>\n<p>创建目录 <code>os.mkdir(&quot;file&quot;)</code><br>复制文件:<br><code>shutil.copyfile(&quot;oldfile&quot;,&quot;newfile&quot;)</code> oldfile和newfile都只能是文件<br><code>shutil.copy(&quot;oldfile&quot;,&quot;newfile&quot;)</code> oldfile只能是文件夹，newfile可以是文件，也可以是目标目录<br>复制文件夹 <code>shutil.copytree(&quot;olddir&quot;,&quot;newdir&quot;)</code> olddir和newdir都只能是目录，且newdir必须不存在<br>重命名文件（目录） <code>os.rename(&quot;oldname&quot;,&quot;newname&quot;)</code> 文件或目录都是使用这条命令<br>移动文件（目录） <code>shutil.move(&quot;oldpos&quot;,&quot;newpos&quot;)</code><br>删除文件 <code>os.remove(&quot;file&quot;)</code><br>删除目录:<br><code>os.rmdir(&quot;dir&quot;)</code> 只能删除空目录<br><code>shutil.rmtree(&quot;dir&quot;)</code> 空目录、有内容的目录都可以删<br>转换目录 <code>os.chdir(&quot;path&quot;)</code></p>\n<p><br></p>\n<h2 id=\"相关例子\">相关例子</h2>\n<p><strong>将文件夹下所有图片名称加上’_fc’</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"comment\">#str.split(string)分割字符串</span></div><div class=\"line\"><span class=\"comment\">#'连接符'.join(list) 将列表组成字符串</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change_name</span><span class=\"params\">(path)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">global</span> i</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(path) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> os.path.isfile(path):</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">    <span class=\"keyword\">if</span> os.path.isfile(path):</div><div class=\"line\">        file_path = os.path.split(path) <span class=\"comment\">#分割出目录与文件</span></div><div class=\"line\">        lists = file_path[<span class=\"number\">1</span>].split(<span class=\"string\">'.'</span>) <span class=\"comment\">#分割出文件与文件扩展名</span></div><div class=\"line\">        file_ext = lists[-<span class=\"number\">1</span>] <span class=\"comment\">#取出后缀名(列表切片操作)</span></div><div class=\"line\">        img_ext = [<span class=\"string\">'bmp'</span>,<span class=\"string\">'jpeg'</span>,<span class=\"string\">'gif'</span>,<span class=\"string\">'psd'</span>,<span class=\"string\">'png'</span>,<span class=\"string\">'jpg'</span>]</div><div class=\"line\">        <span class=\"keyword\">if</span> file_ext <span class=\"keyword\">in</span> img_ext:</div><div class=\"line\">            os.rename(path,file_path[<span class=\"number\">0</span>]+<span class=\"string\">'/'</span>+lists[<span class=\"number\">0</span>]+<span class=\"string\">'_fc.'</span>+file_ext)</div><div class=\"line\">            i+=<span class=\"number\">1</span> <span class=\"comment\">#注意这里的i是一个陷阱</span></div><div class=\"line\">        <span class=\"comment\">#或者</span></div><div class=\"line\">        <span class=\"comment\">#img_ext = 'bmp|jpeg|gif|psd|png|jpg'</span></div><div class=\"line\">        <span class=\"comment\">#if file_ext in img_ext:</span></div><div class=\"line\">        <span class=\"comment\">#    print('ok---'+file_ext)</span></div><div class=\"line\">    <span class=\"keyword\">elif</span> os.path.isdir(path):</div><div class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> os.listdir(path):</div><div class=\"line\">            change_name(os.path.join(path,x)) <span class=\"comment\">#os.path.join()在路径处理上很有用</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">img_dir = <span class=\"string\">'D:\\\\xx\\\\xx\\\\images'</span></div><div class=\"line\">img_dir = img_dir.replace(<span class=\"string\">'\\\\'</span>,<span class=\"string\">'/'</span>)</div><div class=\"line\">start = time.time()</div><div class=\"line\">i = <span class=\"number\">0</span></div><div class=\"line\">change_name(img_dir)</div><div class=\"line\">c = time.time() - start</div><div class=\"line\">print(<span class=\"string\">'程序运行耗时:%0.2f'</span>%(c))</div><div class=\"line\">print(<span class=\"string\">'总共处理了 %s 张图片'</span>%(i))</div></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">程序运行耗时<span class=\"pseudo\">:0</span><span class=\"class\">.11</span></div><div class=\"line\">总共处理了 109 张图片</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-03-20-关于Python文件操作.md","raw":"title: 关于Python文件操作\ndate: 2015-03-20 17:53:30\ncategories:\n- Python\ntags:\n- 文件操作\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html](http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html \"http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html\")\n\n总是记不住API。昨晚写的时候用到了这些，但是没记住，于是就索性整理一下吧：\n\n## os模块和shutil模块 ##\n得到当前工作目录，即当前Python脚本工作的目录路径: `os.getcwd()`\n返回指定目录下的所有文件和目录名: `os.listdir()`\n函数用来删除一个文件: `os.remove()`\n删除多个目录: `os.removedirs（r“c：\\python”）`\n检验给出的路径是否是一个文件: `os.path.isfile()`\n检验给出的路径是否是一个目录: `os.path.isdir()`\n判断是否是绝对路径: `os.path.isabs()`\n检验给出的路径是否真地存: `os.path.exists()`\n返回一个路径的目录名和文件名: `os.path.split()`\n分离扩展名: `os.path.splitext()`\n获取路径名: `os.path.dirname()`\n获取文件名: `os.path.basename()`\n运行shell命令: `os.system()`\n读取和设置环境变量: `os.getenv()` 与 `os.putenv()`\n给出当前平台使用的行终止符: `os.linesep` (Windows使用'\\r\\n'，Linux使用'\\n'而Mac使用'\\r')\n指示你正在使用的平台: `os.name` (对于Windows，它是'nt'，而对于Linux/Unix用户，它是'posix')\n重命名: `os.rename（old, new）`\n创建多级目录: `os.makedirs（r“c：\\python\\test”）`\n创建单个目录: `os.mkdir（“test”）`\n获取文件属性: `os.stat（file）`\n修改文件权限与时间戳: `os.chmod（file）`\n终止当前进程: `os.exit（）`\n获取文件大小: `os.path.getsize（filename）`\n\n<br>\n## 文件操作 ##\n`os.mknod(\"test.txt\")` 创建空文件\n`fp = open(\"test.txt\",w)` 直接打开一个文件，如果文件不存在则创建文件\n\n关于open 模式：\n\n|||\n|:--|:--|\n|w  |以写方式打开|\n|a  |以追加模式打开 (从 EOF 开始, 必要时创建新文件)|\n|r+ |以读写模式打开|\n|w+ |以读写模式打开 (参见 w )|\n|a+ |以读写模式打开 (参见 a )|\n|rb |以二进制读模式打开|\n|wb |以二进制写模式打开 (参见 w )|\n|ab |以二进制追加模式打开 (参见 a )|\n|rb+|以二进制读写模式打开 (参见 r+ )|\n|wb+|以二进制读写模式打开 (参见 w+ )|\n|ab+|以二进制读写模式打开 (参见 a+ )|\n\n`fp.read([size])` #size为读取的长度，以byte为单位\n`fp.readline([size])` #读一行，如果定义了size，有可能返回的只是一行的一部分\n`fp.readlines([size])` #把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。\n`fp.write(str)` #把str写到文件中，write()并不会在str后加上一个换行符\n`fp.writelines(seq)` #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。\n`fp.close()` #关闭文件。python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。  如果一个文件在关闭后还对其进行操作会产生ValueError\n`fp.flush()` #把缓冲区的内容写入硬盘\n`fp.fileno()` #返回一个长整型的”文件标签“\n`fp.isatty()` #文件是否是一个终端设备文件（unix系统中的）\n`fp.tell()` #返回文件操作标记的当前位置，以文件的开头为原点\n`fp.next()` #返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。\n`fp.seek(offset[,whence])` #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的，一般为正数。但如果提供了whence参数就不一定了，whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意，如果文件以a或a+的模式打开，每次进行写操作时，文件操作标记会自动返回到文件末尾。\n`fp.truncate([size])` #把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大，依据系统的不同可能是不改变文件，也可能是用0把文件补到相应的大小，也可能是以一些随机的内容加上去。\n\n<br>\n## 目录操作 ##\n创建目录 `os.mkdir(\"file\")`                   \n复制文件:\n`shutil.copyfile(\"oldfile\",\"newfile\")` oldfile和newfile都只能是文件\n`shutil.copy(\"oldfile\",\"newfile\")` oldfile只能是文件夹，newfile可以是文件，也可以是目标目录\n复制文件夹 `shutil.copytree(\"olddir\",\"newdir\")` olddir和newdir都只能是目录，且newdir必须不存在\n重命名文件（目录） `os.rename(\"oldname\",\"newname\")` 文件或目录都是使用这条命令\n移动文件（目录） `shutil.move(\"oldpos\",\"newpos\")` \n删除文件 `os.remove(\"file\")`\n删除目录:\n`os.rmdir(\"dir\")` 只能删除空目录\n`shutil.rmtree(\"dir\")` 空目录、有内容的目录都可以删\n转换目录 `os.chdir(\"path\")`\n\n<br>\n## 相关例子  ##\n**将文件夹下所有图片名称加上'_fc'**\n``` python\n# -*- coding:utf-8 -*-\nimport re\nimport os\nimport time\n#str.split(string)分割字符串\n#'连接符'.join(list) 将列表组成字符串\ndef change_name(path):\n    global i\n    if not os.path.isdir(path) and not os.path.isfile(path):\n        return False\n    if os.path.isfile(path):\n        file_path = os.path.split(path) #分割出目录与文件\n        lists = file_path[1].split('.') #分割出文件与文件扩展名\n        file_ext = lists[-1] #取出后缀名(列表切片操作)\n        img_ext = ['bmp','jpeg','gif','psd','png','jpg']\n        if file_ext in img_ext:\n            os.rename(path,file_path[0]+'/'+lists[0]+'_fc.'+file_ext)\n            i+=1 #注意这里的i是一个陷阱\n        #或者\n        #img_ext = 'bmp|jpeg|gif|psd|png|jpg'\n        #if file_ext in img_ext:\n        #    print('ok---'+file_ext)\n    elif os.path.isdir(path):\n        for x in os.listdir(path):\n            change_name(os.path.join(path,x)) #os.path.join()在路径处理上很有用\n\n\nimg_dir = 'D:\\\\xx\\\\xx\\\\images'\nimg_dir = img_dir.replace('\\\\','/')\nstart = time.time()\ni = 0\nchange_name(img_dir)\nc = time.time() - start\nprint('程序运行耗时:%0.2f'%(c))\nprint('总共处理了 %s 张图片'%(i))\n```\n\n输出结果：\n```\n程序运行耗时:0.11\n总共处理了 109 张图片\n```\n","slug":"关于Python文件操作","updated":1431306848000,"excerpt":"","_id":"r2390x5x5rkpm10s","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python使用UUID库生成唯一ID","date":1427875948000,"categories":["ldi4kaat0baj4vp1"],"tags":["7rp75tvzwlm9nlep"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/dkblog/archive/2011/10/10/2205200.html\" title=\"http://www.cnblogs.com/dkblog/archive/2011/10/10/2205200.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/dkblog/archive/2011/10/10/2205200.html</a><br><a href=\"http://docs.python.org/library/uuid.html\" title=\"http://docs.python.org/library/uuid.html\" target=\"_blank\" rel=\"external\">http://docs.python.org/library/uuid.html</a><br><a href=\"http://www.ietf.org/rfc/rfc4122.txt\" title=\"http://www.ietf.org/rfc/rfc4122.txt\" target=\"_blank\" rel=\"external\">http://www.ietf.org/rfc/rfc4122.txt</a></p>\n</blockquote>\n<p>概述：</p>\n<p>UUID是128位的全局唯一标识符，通常由32字节的字符串表示。<br>它可以保证时间和空间的唯一性，也称为GUID，全称为：<br><code>UUID</code> —— Universally Unique IDentifier      Python 中叫 UUID<br><code>GUID</code> —— Globally Unique IDentifier         C#  中叫 GUID</p>\n<p>它通过MAC地址、时间戳、命名空间、随机数、伪随机数来保证生成ID的唯一性。<br>UUID主要有五个算法，也就是五种方法来实现：<br>1、<code>uuid1()</code> 基于时间戳<br>由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，<br>但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。</p>\n<p>2、<code>uuid2()</code> 基于分布式计算环境DCE（Python中没有这个函数）<br>算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。<br>实际中很少用到该方法。</p>\n<p>3、<code>uuid3()</code> 基于名字的MD5散列值<br>通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，<br>和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。    </p>\n<p>4、<code>uuid4()</code> 基于随机数<br>由伪随机数得到，有一定的重复概率，该概率可以计算出来。</p>\n<p>5、<code>uuid5()</code> 基于名字的SHA-1散列值<br>算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法</p>\n<p>使用方面：<br>首先，<code>Python</code>中没有基于<code>DCE</code>的，所以<code>uuid2</code>可以忽略；<br>其次，<code>uuid4</code>存在概率性重复，由无映射性，最好不用；<br>再次，若在<code>Global</code>的分布式计算环境下，最好用<code>uuid1</code>；<br>最后，若有名字的唯一性要求，最好用<code>uuid3</code>或<code>uuid5</code>。</p>\n<p>编码方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> uuid</div><div class=\"line\"></div><div class=\"line\">name = <span class=\"string\">\"test_name\"</span></div><div class=\"line\">namespace = <span class=\"string\">\"test_namespace\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> uuid.uuid1()  <span class=\"comment\"># 带参的方法参见Python Doc</span></div><div class=\"line\"><span class=\"keyword\">print</span> uuid.uuid3(namespace, name)</div><div class=\"line\"><span class=\"keyword\">print</span> uuid.uuid4()</div><div class=\"line\"><span class=\"keyword\">print</span> uuid.uuid5(namespace, name)</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-04-01-Python使用UUID库生成唯一ID.md","raw":"title: Python使用UUID库生成唯一ID\ndate: 2015-04-01 16:12:28\ncategories:\n- Python\ntags:\n- uuid\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/dkblog/archive/2011/10/10/2205200.html](http://www.cnblogs.com/dkblog/archive/2011/10/10/2205200.html \"http://www.cnblogs.com/dkblog/archive/2011/10/10/2205200.html\")\n>[http://docs.python.org/library/uuid.html](http://docs.python.org/library/uuid.html \"http://docs.python.org/library/uuid.html\")\n>[http://www.ietf.org/rfc/rfc4122.txt](http://www.ietf.org/rfc/rfc4122.txt \"http://www.ietf.org/rfc/rfc4122.txt\")\n\n概述：\n\nUUID是128位的全局唯一标识符，通常由32字节的字符串表示。\n它可以保证时间和空间的唯一性，也称为GUID，全称为：\n`UUID` —— Universally Unique IDentifier      Python 中叫 UUID\n`GUID` —— Globally Unique IDentifier         C#  中叫 GUID\n\n它通过MAC地址、时间戳、命名空间、随机数、伪随机数来保证生成ID的唯一性。\nUUID主要有五个算法，也就是五种方法来实现：\n1、`uuid1()` 基于时间戳\n由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，\n但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。\n\n2、`uuid2()` 基于分布式计算环境DCE（Python中没有这个函数）\n算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。\n实际中很少用到该方法。\n\n3、`uuid3()` 基于名字的MD5散列值\n通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，\n和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。    \n\n4、`uuid4()` 基于随机数\n由伪随机数得到，有一定的重复概率，该概率可以计算出来。\n\n5、`uuid5()` 基于名字的SHA-1散列值\n算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法\n\n使用方面：\n首先，`Python`中没有基于`DCE`的，所以`uuid2`可以忽略；\n其次，`uuid4`存在概率性重复，由无映射性，最好不用；\n再次，若在`Global`的分布式计算环境下，最好用`uuid1`；\n最后，若有名字的唯一性要求，最好用`uuid3`或`uuid5`。\n\n编码方法：\n```python\n# -*- coding: utf-8 -*-\n\nimport uuid\n\nname = \"test_name\"\nnamespace = \"test_namespace\"\n\nprint uuid.uuid1()  # 带参的方法参见Python Doc\nprint uuid.uuid3(namespace, name)\nprint uuid.uuid4()\nprint uuid.uuid5(namespace, name)\n```\n","slug":"Python使用UUID库生成唯一ID","updated":1431306848000,"excerpt":"","_id":"iie2w64o4z2snr3b","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python单例模式","date":1429431597000,"categories":["ldi4kaat0baj4vp1"],"tags":["p97l8pgjp49g1kf1"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/qq78292959/archive/2013/05/24/3097425.html\" title=\"http://www.cnblogs.com/qq78292959/archive/2013/05/24/3097425.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/qq78292959/archive/2013/05/24/3097425.html</a></p>\n</blockquote>\n<p><code>单例模式</code> 保证一个类仅有一个实例，并提供一个访问他的全局访问点。</p>\n<p>实现某个类只有一个实例的途径：</p>\n<ol>\n<li>让一个全局变量使得一个对象被访问，但是他不能防止外部实例化多个对象。</li>\n<li>让类自身保存他的唯一实例，这个类可以保证没有其他实例可以被创建。<br><code>多线程时的单例模式</code> 加锁-双重锁定<br><code>饿汉式单例类</code> 在类被加载时就将自己实例化（静态初始化）。其优点是躲避了多线程访问的安全性问题，缺点是提前占用系统资源。<br><code>懒汉式单例类</code> 在第一次被引用时，才将自己实例化。避免开始时占用系统资源，但是有多线程访问安全性问题。</li>\n</ol>\n<p><strong>实例</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#encoding=utf-8</span></div><div class=\"line\"><span class=\"comment\">#单例模式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PrintInfo</span><span class=\"params\">(info)</span>:</span></div><div class=\"line\"><span class=\"comment\">#    print unicode(info,'utf-8').decode('gbk')</span></div><div class=\"line\">    <span class=\"keyword\">print</span> info.decode(<span class=\"string\">'utf-8'</span>).encode(<span class=\"string\">'utf-8'</span>)  </div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"><span class=\"comment\">#单例类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    instance=<span class=\"keyword\">None</span></div><div class=\"line\">    mutex=threading.Lock()</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\">    <span class=\"decorator\">@staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">GetInstance</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(Singleton.instance==<span class=\"keyword\">None</span>):</div><div class=\"line\">            Singleton.mutex.acquire()</div><div class=\"line\">            <span class=\"keyword\">if</span>(Singleton.instance==<span class=\"keyword\">None</span>):</div><div class=\"line\">                PrintInfo(<span class=\"string\">'初始化实例'</span>)</div><div class=\"line\">                Singleton.instance=Singleton()</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                PrintInfo(<span class=\"string\">'单例已经实例化'</span>)</div><div class=\"line\">            Singleton.mutex.release()</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            PrintInfo(<span class=\"string\">'单例已经实例化'</span>)</div><div class=\"line\">           </div><div class=\"line\">        <span class=\"keyword\">return</span> Singleton.instance</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clientUI</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    Singleton.GetInstance()</div><div class=\"line\">    Singleton.GetInstance()</div><div class=\"line\">    Singleton.GetInstance()</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</div><div class=\"line\">    clientUI();</div></pre></td></tr></table></figure>\n\n<p><strong>结果</strong>：<br>初始化实例 单例已经实例化 单例已经实例化<br>追加解释<code>@staticmethod</code>在 Python中提到 classmethod 就要提到 staticmethod，不是因为二者有什么关系，而是为了让用户区分以便更清楚地写代码。在C++中，我们了解直接通过类名访问的函数称为类的静态函数，即static修饰的函数，可见C++中classmethod和staticmethod是一个概念。 那么python中二者有什么区别呢？先来看下二者如何在python代码中声明</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>:</span></div><div class=\"line\"> ...</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"decorator\">@classmethod  # classmethod的修饰符</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">class_method</span><span class=\"params\">(cls, arg1, arg2, ...)</span>:</span></div><div class=\"line\">   ...</div><div class=\"line\">  <span class=\"decorator\">@staticmethod  # staticmethod的修饰符</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">static_method</span><span class=\"params\">(arg1, arg2, ...)</span>:</span></div><div class=\"line\">   ...</div></pre></td></tr></table></figure>\n\n<p>对于classmethod的参数，需要隐式地传递类名，而staticmethod参数中则不需要传递类名，其实这就是二者最大的区别。<br>二者都可以通过类名或者类实例对象来调用，因为强调的是classmethod和staticmethod，所以在写代码的时候最好使用类名，良好的编程习惯吧。<br>对于staticmethod就是为了要在类中定义而设置的，一般来说很少这样使用，可以使用模块级(module-level)的函数来替代它。既然要把它定义在类中，想必有作者的考虑。<br>对于classmethod，可以通过子类来进行重定义。<br>提到类级别的函数，也顺带提及类级别的变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>:</span></div><div class=\"line\"> </div><div class=\"line\"> i = <span class=\"number\">123</span> <span class=\"comment\"># class-level variable</span></div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">  self.i = <span class=\"number\">456</span> <span class=\"comment\"># object-level variable</span></div><div class=\"line\">  ...</div></pre></td></tr></table></figure>\n\n<p>为了清晰地区分上面两个i，最好的办法就是考虑到python中的一切都是object，所以i=123属于class object的，i=456属于class instance object</p>\n","source":"_posts/2015-04-19-Python单例模式.md","raw":"title: Python单例模式\ndate: 2015-04-19 16:19:57\ncategories:\n- Python\ntags:\n- 单例模式\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/qq78292959/archive/2013/05/24/3097425.html](http://www.cnblogs.com/qq78292959/archive/2013/05/24/3097425.html \"http://www.cnblogs.com/qq78292959/archive/2013/05/24/3097425.html\")\n\n`单例模式` 保证一个类仅有一个实例，并提供一个访问他的全局访问点。\n\n实现某个类只有一个实例的途径：\n1. 让一个全局变量使得一个对象被访问，但是他不能防止外部实例化多个对象。\n2. 让类自身保存他的唯一实例，这个类可以保证没有其他实例可以被创建。\n`多线程时的单例模式` 加锁-双重锁定\n`饿汉式单例类` 在类被加载时就将自己实例化（静态初始化）。其优点是躲避了多线程访问的安全性问题，缺点是提前占用系统资源。\n`懒汉式单例类` 在第一次被引用时，才将自己实例化。避免开始时占用系统资源，但是有多线程访问安全性问题。\n\n**实例**：\n``` python\n#encoding=utf-8\n#单例模式\ndef PrintInfo(info):\n#    print unicode(info,'utf-8').decode('gbk')\n    print info.decode('utf-8').encode('utf-8')  \nimport threading\n#单例类\nclass Singleton():\n    instance=None\n    mutex=threading.Lock()\n    def _init__(self):\n        pass\n    @staticmethod\n    def GetInstance():\n        if(Singleton.instance==None):\n            Singleton.mutex.acquire()\n            if(Singleton.instance==None):\n                PrintInfo('初始化实例')\n                Singleton.instance=Singleton()\n            else:\n                PrintInfo('单例已经实例化')\n            Singleton.mutex.release()\n        else:\n            PrintInfo('单例已经实例化')\n           \n        return Singleton.instance\ndef clientUI():\n    Singleton.GetInstance()\n    Singleton.GetInstance()\n    Singleton.GetInstance()\n   \n    return\nif __name__=='__main__':\n    clientUI();\n```\n\n**结果**：\n初始化实例 单例已经实例化 单例已经实例化        \n追加解释`@staticmethod`在 Python中提到 classmethod 就要提到 staticmethod，不是因为二者有什么关系，而是为了让用户区分以便更清楚地写代码。在C++中，我们了解直接通过类名访问的函数称为类的静态函数，即static修饰的函数，可见C++中classmethod和staticmethod是一个概念。 那么python中二者有什么区别呢？先来看下二者如何在python代码中声明\n``` python\nclass MyClass:\n ...\n \n  @classmethod  # classmethod的修饰符\n  def class_method(cls, arg1, arg2, ...):\n   ...\n  @staticmethod  # staticmethod的修饰符\n  def static_method(arg1, arg2, ...):\n   ...\n```\n\n对于classmethod的参数，需要隐式地传递类名，而staticmethod参数中则不需要传递类名，其实这就是二者最大的区别。\n二者都可以通过类名或者类实例对象来调用，因为强调的是classmethod和staticmethod，所以在写代码的时候最好使用类名，良好的编程习惯吧。\n对于staticmethod就是为了要在类中定义而设置的，一般来说很少这样使用，可以使用模块级(module-level)的函数来替代它。既然要把它定义在类中，想必有作者的考虑。\n对于classmethod，可以通过子类来进行重定义。\n提到类级别的函数，也顺带提及类级别的变量\n``` python\nclass MyClass:\n \n i = 123 # class-level variable\n \n def __init__(self):\n  self.i = 456 # object-level variable\n  ...\n```\n为了清晰地区分上面两个i，最好的办法就是考虑到python中的一切都是object，所以i=123属于class object的，i=456属于class instance object\n","slug":"Python单例模式","updated":1431306848000,"excerpt":"","_id":"hk0vo11eb4hkkkny","comments":true,"layout":"post","photos":[],"link":""},{"title":"CSS禁止选择文本功能（兼容IE,火狐等浏览器）","date":1429929786000,"categories":["eoozibpfeshi5a5g"],"tags":["hsekkaj3s0b44cfv"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.javascript100.com/?p=455\" title=\"http://www.javascript100.com/?p=455\" target=\"_blank\" rel=\"external\">http://www.javascript100.com/?p=455</a></p>\n</blockquote>\n<p>有时候，我们为了用户体验，需要禁用选择文本功能。<br>这需要用到一个CSS属性：user-select，user-select的文档点这里</p>\n<p><em>user-select</em> 有两个值：<br><code>none</code> 用户不能选择文本<br><code>text</code> 用户可以选择文本</p>\n<p>需要注意的是：user-select并不是一个W3C的CSS标准属性，浏览器支持的不完整，需要对每种浏览器进行调整</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">body</span><span class=\"rules\">{</span></div><div class=\"line\">   <span class=\"rule\"><span class=\"attribute\">-moz-user-select</span>:<span class=\"value\"> none</span></span>; <span class=\"comment\">/*火狐*/</span></div><div class=\"line\">   <span class=\"rule\"><span class=\"attribute\">-webkit-user-select</span>:<span class=\"value\"> none</span></span>;  <span class=\"comment\">/*webkit浏览器*/</span></div><div class=\"line\">   <span class=\"rule\"><span class=\"attribute\">-ms-user-select</span>:<span class=\"value\"> none</span></span>;   <span class=\"comment\">/*IE10*/</span></div><div class=\"line\">   <span class=\"rule\"><span class=\"attribute\">-khtml-user-select</span>:<span class=\"value\"> none</span></span>; <span class=\"comment\">/*早期浏览器*/</span></div><div class=\"line\">   <span class=\"rule\"><span class=\"attribute\">user-select</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>IE6-9还没发现相关的CSS属性，只能通过JS来实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//IE6-9</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.onselectstart = <span class=\"built_in\">document</span>.body.ondrag = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这样我们就可以结合CSS和JS的方法来禁用浏览器的文本选择功能了</p>\n","source":"_posts/2015-04-25-CSS禁止选择文本功能（兼容IE-火狐等浏览器）.md","raw":"title: \"CSS禁止选择文本功能（兼容IE,火狐等浏览器）\"\ndate: 2015-04-25 10:43:06\ncategories:\n- CSS\ntags:\n- 禁止选择文本\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.javascript100.com/?p=455](http://www.javascript100.com/?p=455 \"http://www.javascript100.com/?p=455\")\n\n有时候，我们为了用户体验，需要禁用选择文本功能。\n这需要用到一个CSS属性：user-select，user-select的文档点这里\n\n*user-select* 有两个值：\n`none` 用户不能选择文本\n`text` 用户可以选择文本\n\n需要注意的是：user-select并不是一个W3C的CSS标准属性，浏览器支持的不完整，需要对每种浏览器进行调整\n``` css\nbody{\n   -moz-user-select: none; /*火狐*/\n   -webkit-user-select: none;  /*webkit浏览器*/\n   -ms-user-select: none;   /*IE10*/\n   -khtml-user-select: none; /*早期浏览器*/\n   user-select: none;\n}\n```\n\nIE6-9还没发现相关的CSS属性，只能通过JS来实现\n\n``` javascript\n//IE6-9\ndocument.body.onselectstart = document.body.ondrag = function(){\n    return false;\n}\n```\n这样我们就可以结合CSS和JS的方法来禁用浏览器的文本选择功能了\n","slug":"CSS禁止选择文本功能（兼容IE-火狐等浏览器）","updated":1431306848000,"excerpt":"","_id":"kn75l7qesxdpjz8p","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python分割路径与文件名分隔符","date":1430127578000,"categories":["ldi4kaat0baj4vp1"],"tags":["67scikgmyteqah09","4knexp4bgi0ndk3a"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os.path</div><div class=\"line\"></div><div class=\"line\">spath=<span class=\"string\">\"D:/360Downloads/testFile1/folder2/testFile1.txt\"</span></div><div class=\"line\"><span class=\"comment\">#case 1:</span></div><div class=\"line\">p,f=os.path.split(spath);</div><div class=\"line\">print(<span class=\"string\">\"dir is:\"</span> + p)</div><div class=\"line\">print(<span class=\"string\">\"file is:\"</span> + f)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#case 2:</span></div><div class=\"line\">drv,left=os.path.splitdrive(spath);</div><div class=\"line\">print(<span class=\"string\">\"drive is:\"</span> + drv)</div><div class=\"line\">print(<span class=\"string\">\"left is:\"</span> + left)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#case 3:</span></div><div class=\"line\">f,ext = os.path.splitext(spath);</div><div class=\"line\">print(<span class=\"string\">\"f is:\"</span> + f)</div><div class=\"line\">print(<span class=\"string\">\"ext is:\"</span> + ext)</div></pre></td></tr></table></figure>\n\n<p>Python中os.path常用模块：<br><code>os.path.sep</code> 路径分隔符 linux下就用这个了’/’<br><code>os.path.altsep</code> 根目录<br><code>os.path.curdir</code> 当前目录<br><code>os.path.pardir</code> 父目录<br><code>os.path.abspath(path)</code> 绝对路径<br><code>os.path.join()</code> 常用来链接路径<br><code>os.path.split(path)</code> 把path分为目录和文件两个部分，以列表返回</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">[GCC 4.4.5] on linux2</span></span></div><div class=\"line\">Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.</div><div class=\"line\">&gt;&gt;&gt; import os</div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&gt;&gt;&gt;</span> help(<span class=\"string\">'os.path.sep'</span>)</span></div><div class=\"line\"><span class=\"input\"><span class=\"prompt\"></span></span></div><div class=\"line\">&gt;&gt;&gt; print os.path.sep</div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">/</span></span></div><div class=\"line\">&gt;&gt;&gt; print os.path.altsep</div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">None</span></span></div><div class=\"line\">&gt;&gt;&gt; print os.path.curdir</div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">.</span></span></div><div class=\"line\">&gt;&gt;&gt; print os.path.abspath(<span class=\"string\">'/root'</span>)</div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">/root</span></span></div><div class=\"line\">&gt;&gt;&gt; print os.path.abspath(<span class=\"string\">'/root/pp'</span>)</div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">/root/pp</span></span></div><div class=\"line\">&gt;&gt;&gt; print os.path.abspath(<span class=\"string\">'/root/pp/f.c'</span>)</div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">/root/pp/f.c</span></span></div><div class=\"line\">&gt;&gt;&gt; print os.path.split(<span class=\"string\">'/root/pp/f.c'</span>)</div><div class=\"line\">(<span class=\"string\">'/root/pp'</span>, <span class=\"string\">'f.c'</span>)</div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-04-27-Python分割路径与文件名分隔符.md","raw":"title: Python分割路径与文件名分隔符\ndate: 2015-04-27 17:39:38\ncategories:\n- Python\ntags:\n- 文件名分隔符\n- 分割路径\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n\n``` python\nimport os.path\n\nspath=\"D:/360Downloads/testFile1/folder2/testFile1.txt\"\n#case 1:\np,f=os.path.split(spath);\nprint(\"dir is:\" + p)\nprint(\"file is:\" + f)\n\n#case 2:\ndrv,left=os.path.splitdrive(spath);\nprint(\"drive is:\" + drv)\nprint(\"left is:\" + left)\n\n#case 3:\nf,ext = os.path.splitext(spath);\nprint(\"f is:\" + f)\nprint(\"ext is:\" + ext)\n```\n\nPython中os.path常用模块：\n`os.path.sep` 路径分隔符 linux下就用这个了’/’\n`os.path.altsep` 根目录\n`os.path.curdir` 当前目录\n`os.path.pardir` 父目录\n`os.path.abspath(path)` 绝对路径\n`os.path.join()` 常用来链接路径\n`os.path.split(path)` 把path分为目录和文件两个部分，以列表返回\n\n```\n[GCC 4.4.5] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import os\n>>> help('os.path.sep')\n\n>>> print os.path.sep\n/\n>>> print os.path.altsep\nNone\n>>> print os.path.curdir\n.\n>>> print os.path.abspath('/root')\n/root\n>>> print os.path.abspath('/root/pp')\n/root/pp\n>>> print os.path.abspath('/root/pp/f.c')\n/root/pp/f.c\n>>> print os.path.split('/root/pp/f.c')\n('/root/pp', 'f.c')\n>>>\n```\n","slug":"Python分割路径与文件名分隔符","updated":1431306848000,"excerpt":"","_id":"icj6qh6wsdnnh8sv","comments":true,"layout":"post","photos":[],"link":""},{"title":"关于Shell的补零，用printf来格式化数字列。","date":1430391617000,"categories":["ve0hssdkfwgg7gho"],"tags":["qfwf0tq8dfqa7i9q","cj3x87kfwlgkedgh","a1e9p1tmnyc0vroi"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.187299.com/archives/1680\" title=\"http://www.187299.com/archives/1680\" target=\"_blank\" rel=\"external\">http://www.187299.com/archives/1680</a></p>\n</blockquote>\n<p>解答论坛一个朋友关于获取01、02…10,而非1、2….10。<br>因为需要用flashget下载这样一些列的文件。自己了解这个应用，但是以前也没有处理过。还是有需要的。经过g后，测试得到。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@kook tmp]<span class=\"comment\"># cat for.sh</span></div><div class=\"line\"><span class=\"keyword\">for</span> ((a=<span class=\"number\">1</span>; a&lt;=<span class=\"number\">10</span> ; a++))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%02d\\n\"</span> <span class=\"variable\">$a</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\">[root@kook tmp]<span class=\"comment\"># ./for.sh</span></div><div class=\"line\"><span class=\"number\">01</span></div><div class=\"line\"><span class=\"number\">02</span></div><div class=\"line\"><span class=\"number\">03</span></div><div class=\"line\"><span class=\"number\">04</span></div><div class=\"line\"><span class=\"number\">05</span></div><div class=\"line\"><span class=\"number\">06</span></div><div class=\"line\"><span class=\"number\">07</span></div><div class=\"line\"><span class=\"number\">08</span></div><div class=\"line\"><span class=\"number\">09</span></div><div class=\"line\"><span class=\"number\">10</span></div></pre></td></tr></table></figure>\n\n<p><br><br>这么写，也可以。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@kook tmp]<span class=\"comment\"># cat for.sh</span></div><div class=\"line\"><span class=\"keyword\">for</span> ((a=<span class=\"number\">1</span>; a&lt;=<span class=\"number\">10</span> ; a++))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%.2d\\n\"</span> <span class=\"variable\">$a</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n\n<p><br><br>继续测试。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@kook tmp]<span class=\"comment\"># printf \"%04d\\n\" -3</span></div><div class=\"line\">-<span class=\"number\">003</span></div><div class=\"line\">[root@kook tmp]<span class=\"comment\"># printf \"%.4d\\n\" -3</span></div><div class=\"line\">-<span class=\"number\">0003</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-04-30-关于Shell的补零，用printf来格式化数字列。.md","raw":"title: 关于Shell的补零，用printf来格式化数字列。\ndate: 2015-04-30 19:00:17\ncategories:\n- Shell\ntags:\n- printf\n- 格式化\n- 补零\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.187299.com/archives/1680](http://www.187299.com/archives/1680 \"http://www.187299.com/archives/1680\")\n\n解答论坛一个朋友关于获取01、02...10,而非1、2....10。\n因为需要用flashget下载这样一些列的文件。自己了解这个应用，但是以前也没有处理过。还是有需要的。经过g后，测试得到。\n``` bash\n[root@kook tmp]# cat for.sh\nfor ((a=1; a<=10 ; a++))\ndo\nprintf \"%02d\\n\" $a\ndone\n[root@kook tmp]# ./for.sh\n01\n02\n03\n04\n05\n06\n07\n08\n09\n10\n```\n<br>\n这么写，也可以。\n``` bash\n[root@kook tmp]# cat for.sh\nfor ((a=1; a<=10 ; a++))\ndo\nprintf \"%.2d\\n\" $a\ndone\n```\n<br>\n继续测试。\n``` bash\n[root@kook tmp]# printf \"%04d\\n\" -3\n-003\n[root@kook tmp]# printf \"%.4d\\n\" -3\n-0003\n```\n","slug":"关于Shell的补零，用printf来格式化数字列。","updated":1431774226000,"excerpt":"","_id":"wdmdc6cpxuylhg2v","comments":true,"layout":"post","photos":[],"link":""},{"title":"shell中&&和||的使用方法","date":1430473891000,"categories":["ve0hssdkfwgg7gho"],"tags":["4fz8rlqyel08jnb9","yksaafhqz3r3q024"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/a627088424/article/details/20360107\" title=\"http://blog.csdn.net/a627088424/article/details/20360107\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/a627088424/article/details/20360107</a></p>\n</blockquote>\n<h2 id=\"&amp;&amp;运算符\">&amp;&amp;运算符</h2>\n<p><code>command1  &amp;&amp; command2</code></p>\n<p>&amp;&amp;左边的命令（命令1）返回真(即返回0，成功被执行）后，&amp;&amp;右边的命令（命令2）才能够被执行；换句话说，“如果这个命令执行成功&amp;&amp;那么执行这个命令”。<br>语法格式如下：<br><code>command1 &amp;&amp; command2 [&amp;&amp; command3 ...]</code></p>\n<ol>\n<li>命令之间使用 &amp;&amp; 连接，实现逻辑与的功能。</li>\n<li>只有在 &amp;&amp; 左边的命令返回真（命令返回值 $? == 0），&amp;&amp; 右边的命令才会被执行。</li>\n<li>只要有一个命令返回假（命令返回值 $? == 1），后面的命令就不会被执行。</li>\n</ol>\n<p><strong>示例 1</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">malihou@ubuntu:~$ cp ~/Desktop/<span class=\"number\">1</span>.txt ~/<span class=\"number\">1</span>.txt && rm ~/Desktop/<span class=\"number\">1</span>.txt && <span class=\"built_in\">echo</span> <span class=\"string\">\"success\"</span></div></pre></td></tr></table></figure>\n\n<p>示例 1 中的命令首先从 ~/Desktop 目录复制 1.txt 文件到 ~ 目录；执行成功后，使用 rm 删除源文件；如果删除成功则输出提示信息。<br><br></p>\n<h2 id=\"||运算符\">||运算符</h2>\n<p><code>command1 || command2</code></p>\n<p>||则与&amp;&amp;相反。如果||左边的命令（命令1）未执行成功，那么就执行||右边的命令（命令2）；或者换句话说，“如果这个命令执行失败了||那么就执行这个命令。</p>\n<ol>\n<li>命令之间使用 || 连接，实现逻辑或的功能。</li>\n<li>只有在 || 左边的命令返回假（命令返回值 $? == 1），|| 右边的命令才会被执行。这和 c 语言中的逻辑或语法功能相同，即实现短路逻辑或操作。</li>\n<li>只要有一个命令返回真（命令返回值 $? == 0），后面的命令就不会被执行。</li>\n</ol>\n<p><strong>示例 2</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">malihou@ubuntu:~$ rm ~/Desktop/<span class=\"number\">1</span>.txt || <span class=\"built_in\">echo</span> <span class=\"string\">\"fail\"</span></div></pre></td></tr></table></figure>\n\n<p>在示例 2 中，如果 ~/Desktop 目录下不存在文件 1.txt，将输出提示信息。</p>\n<p><strong>示例 3</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">malihou@ubuntu:~$ rm ~/Desktop/<span class=\"number\">1</span>.txt && <span class=\"built_in\">echo</span> <span class=\"string\">\"success\"</span> || <span class=\"built_in\">echo</span> <span class=\"string\">\"fail\"</span></div></pre></td></tr></table></figure>\n\n<p>在示例 3 中，如果 ~/Desktop 目录下存在文件 1.txt，将输出 success 提示信息；否则输出 fail 提示信息。<br>如果希望把几个命令合在一起执行， shell提供了两种方法。既可以在当前shell也可以在子shell中执行一组命令。<br><br></p>\n<h2 id=\"()运算符\">()运算符</h2>\n<p>为了在当前shell中执行一组命令，可以用命令分隔符(即”,”)隔开每一个命令，并把所有的命令用圆括号()括起来。<br>它的一般形式为：<br><code>( 命令；命令；命令… )</code></p>\n<ol>\n<li>一条命令需要独占一个物理行，如果需要将多条命令放在同一行，命令之间使用命令分隔符（;）分隔。执行的效果等同于多个独立的命令单独执行的效果。</li>\n<li>() 表示在当前 shell 中将多个命令作为一个整体执行。需要注意的是，使用 () 括起来的命令在执行前面都不会切换当前工作目录，也就是说命令组合都是在当前工作目录下被执行的，尽管命令中有切换目录的命令。</li>\n<li>命令组合常和命令执行控制结合起来使用。</li>\n</ol>\n<p><strong>示例 4</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">malihou@ubuntu:~$ rm ~/Desktop/<span class=\"number\">1</span>.txt || (<span class=\"built_in\">cd</span> ~/Desktop/;ls <span class=\"operator\">-a</span>;<span class=\"built_in\">echo</span> <span class=\"string\">\"fail\"</span>)</div></pre></td></tr></table></figure>\n\n<p>在示例 4 中，如果目录 ~/Desktop 下不存在文件 1.txt，则执行命令组合。<br><br> </p>\n<h2 id=\"{}运算符\">{}运算符</h2>\n<p>如果使用{}来代替()，那么相应的命令将在子shell而不是当前shell中作为一个整体被执行，只有在{}中所有命令的输出作为一个整体被重定向时，其中的命令才被放到子shell中执行，否则在当前shell执行。<br>它的一般形式为：<br><code>{ 命令；命令；命令… }</code><br>（注意：在使用{}时，{}与命令之间必须使用一个空格）</p>\n<p>测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">~$ A=<span class=\"number\">1</span>;<span class=\"built_in\">echo</span> <span class=\"variable\">$A</span>;{ A=<span class=\"number\">2</span>; };<span class=\"built_in\">echo</span> <span class=\"variable\">$A</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">~$ A=<span class=\"number\">1</span>;<span class=\"built_in\">echo</span> <span class=\"variable\">$A</span>;( A=<span class=\"number\">2</span>; );<span class=\"built_in\">echo</span> <span class=\"variable\">$A</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-05-01-shell中-和-的使用方法.md","raw":"title: \"shell中&&和||的使用方法\"\ndate: 2015-05-01 17:51:31\ncategories:\n- Shell\ntags:\n- ＆＆\n- ｜｜\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/a627088424/article/details/20360107](http://blog.csdn.net/a627088424/article/details/20360107 \"http://blog.csdn.net/a627088424/article/details/20360107\")\n\n## &&运算符 ##\n`command1  && command2`\n \n&&左边的命令（命令1）返回真(即返回0，成功被执行）后，&&右边的命令（命令2）才能够被执行；换句话说，“如果这个命令执行成功&&那么执行这个命令”。 \n语法格式如下：\n`command1 && command2 [&& command3 ...]`\n1. 命令之间使用 && 连接，实现逻辑与的功能。\n2. 只有在 && 左边的命令返回真（命令返回值 $? == 0），&& 右边的命令才会被执行。\n3. 只要有一个命令返回假（命令返回值 $? == 1），后面的命令就不会被执行。\n \n**示例 1**\n``` bash\nmalihou@ubuntu:~$ cp ~/Desktop/1.txt ~/1.txt && rm ~/Desktop/1.txt && echo \"success\"\n```\n示例 1 中的命令首先从 ~/Desktop 目录复制 1.txt 文件到 ~ 目录；执行成功后，使用 rm 删除源文件；如果删除成功则输出提示信息。\n<br>\n## ||运算符 ##\n`command1 || command2`\n\n||则与&&相反。如果||左边的命令（命令1）未执行成功，那么就执行||右边的命令（命令2）；或者换句话说，“如果这个命令执行失败了||那么就执行这个命令。\n1. 命令之间使用 || 连接，实现逻辑或的功能。\n2. 只有在 || 左边的命令返回假（命令返回值 $? == 1），|| 右边的命令才会被执行。这和 c 语言中的逻辑或语法功能相同，即实现短路逻辑或操作。\n3. 只要有一个命令返回真（命令返回值 $? == 0），后面的命令就不会被执行。\n\n**示例 2**\n``` bash\nmalihou@ubuntu:~$ rm ~/Desktop/1.txt || echo \"fail\"\n```\n在示例 2 中，如果 ~/Desktop 目录下不存在文件 1.txt，将输出提示信息。\n \n**示例 3**\n``` bash\nmalihou@ubuntu:~$ rm ~/Desktop/1.txt && echo \"success\" || echo \"fail\"\n```\n在示例 3 中，如果 ~/Desktop 目录下存在文件 1.txt，将输出 success 提示信息；否则输出 fail 提示信息。\n如果希望把几个命令合在一起执行， shell提供了两种方法。既可以在当前shell也可以在子shell中执行一组命令。\n<br>\n## ()运算符 ##\n为了在当前shell中执行一组命令，可以用命令分隔符(即\",\")隔开每一个命令，并把所有的命令用圆括号()括起来。 \n它的一般形式为： \n`( 命令；命令；命令… )`\n1. 一条命令需要独占一个物理行，如果需要将多条命令放在同一行，命令之间使用命令分隔符（;）分隔。执行的效果等同于多个独立的命令单独执行的效果。\n2. () 表示在当前 shell 中将多个命令作为一个整体执行。需要注意的是，使用 () 括起来的命令在执行前面都不会切换当前工作目录，也就是说命令组合都是在当前工作目录下被执行的，尽管命令中有切换目录的命令。\n3. 命令组合常和命令执行控制结合起来使用。\n \n**示例 4**\n``` bash\nmalihou@ubuntu:~$ rm ~/Desktop/1.txt || (cd ~/Desktop/;ls -a;echo \"fail\")\n```\n在示例 4 中，如果目录 ~/Desktop 下不存在文件 1.txt，则执行命令组合。\n<br> \n## {}运算符 ##\n如果使用{}来代替()，那么相应的命令将在子shell而不是当前shell中作为一个整体被执行，只有在{}中所有命令的输出作为一个整体被重定向时，其中的命令才被放到子shell中执行，否则在当前shell执行。\n它的一般形式为： \n`{ 命令；命令；命令… }`\n（注意：在使用{}时，{}与命令之间必须使用一个空格）\n \n测试：\n``` bash\n~$ A=1;echo $A;{ A=2; };echo $A\n1\n2\n\n~$ A=1;echo $A;( A=2; );echo $A\n1\n1\n```\n","slug":"shell中-和-的使用方法","updated":1431773937000,"excerpt":"","_id":"j4nzm2sasrmujc1u","comments":true,"layout":"post","photos":[],"link":""},{"title":"shell编程中的date用法","date":1430558929000,"categories":["ve0hssdkfwgg7gho"],"tags":["dbft5z8h6b87e181","xdg529s3cek3qqt1"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.sina.com.cn/s/blog_61c006ea0100mgxe.html\" title=\"http://blog.sina.com.cn/s/blog_61c006ea0100mgxe.html\" target=\"_blank\" rel=\"external\">http://blog.sina.com.cn/s/blog_61c006ea0100mgxe.html</a></p>\n</blockquote>\n<h2 id=\"date_—help\">date —help</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">%%</td>\n<td style=\"text-align:left\">输出%符号 a literal %</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%a</td>\n<td style=\"text-align:left\">当前域的星期缩写 locale’s abbreviated weekday name (Sun..Sat)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%A</td>\n<td style=\"text-align:left\">当前域的星期全写 locale’s full weekday name, variable length (Sunday..Saturday)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%b</td>\n<td style=\"text-align:left\">当前域的月份缩写 locale’s abbreviated month name (Jan..Dec)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%B</td>\n<td style=\"text-align:left\">当前域的月份全称 locale’s full month name, variable length (January..December)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%c</td>\n<td style=\"text-align:left\">当前域的默认时间格式 locale’s date and time (Sat Nov 04 12:02:33 EST 1989)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%C</td>\n<td style=\"text-align:left\">n百年 century (year divided by 100 and truncated to an integer) [00-99]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%d</td>\n<td style=\"text-align:left\">两位的天 day of month (01..31)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%D</td>\n<td style=\"text-align:left\">短时间格式 date (mm/dd/yy)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%e</td>\n<td style=\"text-align:left\">短格式天 day of month, blank padded ( 1..31)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%F</td>\n<td style=\"text-align:left\">文件时间格式 same as %Y-%m-%d</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%g</td>\n<td style=\"text-align:left\">the 2-digit year corresponding to the %V week number</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%G</td>\n<td style=\"text-align:left\">the 4-digit year corresponding to the %V week number</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%h</td>\n<td style=\"text-align:left\">same as %b</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%H</td>\n<td style=\"text-align:left\">24小时制的小时 hour (00..23)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%I</td>\n<td style=\"text-align:left\">12小时制的小时 hour (01..12)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%j</td>\n<td style=\"text-align:left\">一年中的第几天 day of year (001..366)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%k</td>\n<td style=\"text-align:left\">短格式24小时制的小时 hour ( 0..23)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%l</td>\n<td style=\"text-align:left\">短格式12小时制的小时 hour ( 1..12)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%m</td>\n<td style=\"text-align:left\">双位月份 month (01..12)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%M</td>\n<td style=\"text-align:left\">双位分钟 minute (00..59)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%n</td>\n<td style=\"text-align:left\">换行 a newline</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%N</td>\n<td style=\"text-align:left\">十亿分之一秒 nanoseconds (000000000..999999999)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%p</td>\n<td style=\"text-align:left\">大写的当前域的上下午指示 locale’s upper case AM or PM indicator (blank in many locales)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%P</td>\n<td style=\"text-align:left\">小写的当前域的上下午指示 locale’s lower case am or pm indicator (blank in many locales)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%r</td>\n<td style=\"text-align:left\">12小时制的时间表示（时:分:秒,双位） time, 12-hour (hh:mm:ss [AP]M)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%R</td>\n<td style=\"text-align:left\">24小时制的时间表示 （时:分,双位）time, 24-hour (hh:mm)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%s</td>\n<td style=\"text-align:left\">自基础时间 1970-01-01 00:00:00 到当前时刻的秒数 seconds since `00:00:00 1970-01-01 UTC’ (a GNU extension)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%S</td>\n<td style=\"text-align:left\">双位秒 second (00..60); the 60 is necessary to accommodate a leap second</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%t</td>\n<td style=\"text-align:left\">横向制表位(tab) a horizontal tab</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%T</td>\n<td style=\"text-align:left\">24小时制时间表示 time, 24-hour (hh:mm:ss)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%u</td>\n<td style=\"text-align:left\">数字表示的星期（从星期一开始 1-7）day of week (1..7); 1 represents Monday</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%U</td>\n<td style=\"text-align:left\">一年中的第几周星期天为开始 week number of year with Sunday as first day of week (00..53)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%V</td>\n<td style=\"text-align:left\">一年中的第几周星期一为开始 week number of year with Monday as first day of week (01..53)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%w</td>\n<td style=\"text-align:left\">一周中的第几天 星期天为开始 0-6 day of week (0..6); 0 represents Sunday</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%W</td>\n<td style=\"text-align:left\">一年中的第几周星期一为开始 week number of year with Monday as first day of week (00..53)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%x</td>\n<td style=\"text-align:left\">本地日期格式 locale’s date representation (mm/dd/yy)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%X</td>\n<td style=\"text-align:left\">本地时间格式 locale’s time representation (%H:%M:%S)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%y</td>\n<td style=\"text-align:left\">两位的年 last two digits of year (00..99)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%Y</td>\n<td style=\"text-align:left\">年 year (1970…)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%z</td>\n<td style=\"text-align:left\">RFC-2822 标准时间格式表示的域 RFC-2822 style numeric timezone (-0500) (a nonstandard extension)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%Z</td>\n<td style=\"text-align:left\">时间域 time zone (e.g., EDT), or nothing if no time zone is determinable</td>\n</tr>\n</tbody>\n</table>\n<p>By default, date pads numeric fields with zeroes. GNU date recognizes<br>the following modifiers between `%’ and a numeric directive.<br><strong>‘-‘ (hyphen) do not pad the field<br>‘_’ (underscore) pad the field with spaces</strong></p>\n<p><br></p>\n<h2 id=\"一些用法\">一些用法</h2>\n<h3 id=\"以yymmdd的格式输出43天前的当前时刻\">以yymmdd的格式输出43天前的当前时刻</h3>\n<p><code>date +%Y%m%d --date=&#39;43 days ago&#39;</code><br><br></p>\n<h3 id=\"测试十亿分之一秒\">测试十亿分之一秒</h3>\n<p><code>date +&#39;%Y%m%d %H:%M:%S.%N&#39;</code><br><br></p>\n<h3 id=\"创建以当前时间为文件名的目录\">创建以当前时间为文件名的目录</h3>\n<p><code>mkdir `date +%Y%m%d` </code><br><br></p>\n<h3 id=\"备份以时间做为文件名的\">备份以时间做为文件名的</h3>\n<p><code>tar -cvf ./htdocs`date +%Y%m%d`.tar ./*</code><br><br></p>\n<h3 id=\"显示时间后跳行，再显示目前日期\">显示时间后跳行，再显示目前日期</h3>\n<p><code>date +%T%n%Y%m%d</code><br><br></p>\n<h3 id=\"只显示月份与日数\">只显示月份与日数</h3>\n<p><code>date +%B%d</code><br><br></p>\n<h3 id=\"获取上周日期（day,month,year,hour）\">获取上周日期（day,month,year,hour）</h3>\n<p><code>date -d &quot;-1 week&quot; +%Y%m%d</code><br><br></p>\n<h3 id=\"获取24小时前日期\">获取24小时前日期</h3>\n<p><code>date --date=&quot;-24 hour&quot; +%Y%m%d</code><br><br></p>\n<h3 id=\"shell脚本里面赋给变量值\">shell脚本里面赋给变量值</h3>\n<p><code>date_now=`date +%s` </code><br><br></p>\n<h3 id=\"计算执行一段sql脚本的运行时间\">计算执行一段sql脚本的运行时间</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">TIME_BEGIN=$(date <span class=\"string\">'+%s.%N'</span>)</div><div class=\"line\"><span class=\"variable\">$sqlcli</span> &lt; queries/q1.<span class=\"number\">3</span>.sql <span class=\"number\">1</span>&gt;&gt; <span class=\"variable\">$FILE_RESULT</span>  <span class=\"number\">2</span>&gt;&gt; <span class=\"variable\">$FILE_ERROR</span></div><div class=\"line\">TIME_END=$(date <span class=\"string\">'+%s.%N'</span>)</div><div class=\"line\">TIME_RUN=$(awk <span class=\"string\">'BEGIN{print '</span><span class=\"variable\">$TIME_END</span><span class=\"string\">' - '</span><span class=\"variable\">$TIME_BEGIN</span><span class=\"string\">'}'</span>)</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h3 id=\"编写shell脚本计算离自己生日还有多少天？\">编写shell脚本计算离自己生日还有多少天？</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">\"Input your birthday(YYYYmmdd):\"</span> date1</div><div class=\"line\">m=`date --date=<span class=\"string\">\"<span class=\"variable\">$date1</span>\"</span> +%m`    <span class=\"comment\">#得到生日的月</span></div><div class=\"line\">d=`date --date=<span class=\"string\">\"<span class=\"variable\">$date1</span>\"</span> +%d`    <span class=\"comment\">#得到生日的日</span></div><div class=\"line\">date_now=`date +%s`             <span class=\"comment\">#得到当前时间的秒值</span></div><div class=\"line\">y=`date +%Y`                    <span class=\"comment\">#得到当前时间的年</span></div><div class=\"line\">birth=`date --date=<span class=\"string\">\"<span class=\"variable\">$y</span><span class=\"variable\">$m</span><span class=\"variable\">$d</span>\"</span> +%s`      <span class=\"comment\">#得到今年的生日日期的秒值</span></div><div class=\"line\">internal=$((<span class=\"variable\">$birth</span>-<span class=\"variable\">$date_now</span>))        <span class=\"comment\">#计算今日到生日日期的间隔时间</span></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$internal</span>\"</span> <span class=\"operator\">-lt</span> <span class=\"string\">\"0\"</span> ]; <span class=\"keyword\">then</span>             <span class=\"comment\">#判断今天的生日是否已过</span></div><div class=\"line\">birth=`date --date=<span class=\"string\">\"<span class=\"variable\">$(($y+1)</span>)<span class=\"variable\">$m</span><span class=\"variable\">$d</span>\"</span> +%s`      <span class=\"comment\">#得到明天的生日日期秒值</span></div><div class=\"line\">internal=$((<span class=\"variable\">$birth</span>-<span class=\"variable\">$date_now</span>))               <span class=\"comment\">#计算今天到下一个生日的间隔时间</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"There is :<span class=\"variable\">$((einternal/60/60/24)</span>) days.\"</span>       <span class=\"comment\">#输出结果，秒换算为天</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h3 id=\"若是不以加号作为开头，则表示要设定时间\">若是不以加号作为开头，则表示要设定时间</h3>\n<p>时间格式<code>MMDDhhmm[[CC]YY][.ss]</code><br><strong>MM</strong> 为月份，<br><strong>DD</strong> 为日，<br><strong>hh</strong> 为小时，<br><strong>mm</strong> 为分钟，<br><strong>CC</strong> 为年份前两位数字，<br><strong>YY</strong> 为年份后两位数字，<br><strong>ss</strong> 为秒数<br><br></p>\n<h3 id=\"显示目前的格林威治时间\">显示目前的格林威治时间</h3>\n<p>也叫“世界时”。是英国的标准时间，也是世界各地时间的参考标准。中英两国的标准时差为8个小时，即英国的当地时间比中国的北京时间晚8小时。<br><code>date -u</code><br><em>Thu Sep 28 09:32:04 UTC 2006</em><br><br></p>\n<h3 id=\"修改时间\">修改时间</h3>\n<p><code>date -s</code><br>按字符串方式修改时间<br>可以只修改日期,不修改时间,输入: <code>date -s 2007-08-03</code><br>只修改时间,输入:date -s 14:15:00<br>同时修改日期时间,注意要加双引号,日期与时间之间有一空格,输入:date -s “2007-08-03 14:15:00”</p>\n<p>修改完后,记得输入:<code>clock -w</code><br>把系统时间写入CMOS</p>\n","source":"_posts/2015-05-02-shell编程中的date用法.md","raw":"title: shell编程中的date用法\ndate: 2015-05-02 17:28:49\ncategories:\n- Shell\ntags:\n- date\n- Linux\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.sina.com.cn/s/blog_61c006ea0100mgxe.html](http://blog.sina.com.cn/s/blog_61c006ea0100mgxe.html \"http://blog.sina.com.cn/s/blog_61c006ea0100mgxe.html\")\n\n## date --help ##\n|||\n|:--|:--|\n|%%|输出%符号 a literal %|\n|%a|当前域的星期缩写 locale’s abbreviated weekday name (Sun..Sat)|\n|%A|当前域的星期全写 locale’s full weekday name, variable length (Sunday..Saturday)|\n|%b|当前域的月份缩写 locale’s abbreviated month name (Jan..Dec)|\n|%B|当前域的月份全称 locale’s full month name, variable length (January..December)|\n|%c|当前域的默认时间格式 locale’s date and time (Sat Nov 04 12:02:33 EST 1989)|\n|%C|n百年 century (year divided by 100 and truncated to an integer) [00-99]|\n|%d|两位的天 day of month (01..31)|\n|%D|短时间格式 date (mm/dd/yy)|\n|%e|短格式天 day of month, blank padded ( 1..31)|\n|%F|文件时间格式 same as %Y-%m-%d|\n|%g|the 2-digit year corresponding to the %V week number|\n|%G|the 4-digit year corresponding to the %V week number|\n|%h|same as %b|\n|%H|24小时制的小时 hour (00..23)|\n|%I|12小时制的小时 hour (01..12)|\n|%j|一年中的第几天 day of year (001..366)|\n|%k|短格式24小时制的小时 hour ( 0..23)|\n|%l|短格式12小时制的小时 hour ( 1..12)|\n|%m|双位月份 month (01..12)|\n|%M|双位分钟 minute (00..59)|\n|%n|换行 a newline|\n|%N|十亿分之一秒 nanoseconds (000000000..999999999)|\n|%p|大写的当前域的上下午指示 locale’s upper case AM or PM indicator (blank in many locales)|\n|%P|小写的当前域的上下午指示 locale’s lower case am or pm indicator (blank in many locales)|\n|%r|12小时制的时间表示（时:分:秒,双位） time, 12-hour (hh:mm:ss [AP]M)|\n|%R|24小时制的时间表示 （时:分,双位）time, 24-hour (hh:mm)|\n|%s|自基础时间 1970-01-01 00:00:00 到当前时刻的秒数 seconds since `00:00:00 1970-01-01 UTC’ (a GNU extension)|\n|%S|双位秒 second (00..60); the 60 is necessary to accommodate a leap second|\n|%t|横向制表位(tab) a horizontal tab|\n|%T|24小时制时间表示 time, 24-hour (hh:mm:ss)|\n|%u|数字表示的星期（从星期一开始 1-7）day of week (1..7); 1 represents Monday|\n|%U|一年中的第几周星期天为开始 week number of year with Sunday as first day of week (00..53)|\n|%V|一年中的第几周星期一为开始 week number of year with Monday as first day of week (01..53)|\n|%w|一周中的第几天 星期天为开始 0-6 day of week (0..6); 0 represents Sunday|\n|%W|一年中的第几周星期一为开始 week number of year with Monday as first day of week (00..53)|\n|%x|本地日期格式 locale’s date representation (mm/dd/yy)|\n|%X|本地时间格式 locale’s time representation (%H:%M:%S)|\n|%y|两位的年 last two digits of year (00..99)|\n|%Y|年 year (1970…)|\n|%z|RFC-2822 标准时间格式表示的域 RFC-2822 style numeric timezone (-0500) (a nonstandard extension)|\n|%Z|时间域 time zone (e.g., EDT), or nothing if no time zone is determinable|\n\nBy default, date pads numeric fields with zeroes. GNU date recognizes\nthe following modifiers between `%’ and a numeric directive.\n**'-' (hyphen) do not pad the field\n'_' (underscore) pad the field with spaces**\n\n<br>\n## 一些用法 ##\n### 以yymmdd的格式输出43天前的当前时刻 ###\n`date +%Y%m%d --date='43 days ago'`\n<br>\n### 测试十亿分之一秒 ###\n`date +'%Y%m%d %H:%M:%S.%N'`\n<br>\n### 创建以当前时间为文件名的目录 ###\n``mkdir `date +%Y%m%d` ``\n<br>\n### 备份以时间做为文件名的 ###\n``tar -cvf ./htdocs`date +%Y%m%d`.tar ./*``\n<br>\n### 显示时间后跳行，再显示目前日期 ###\n`date +%T%n%Y%m%d`\n<br>\n### 只显示月份与日数 ###\n`date +%B%d`\n<br>\n### 获取上周日期（day,month,year,hour） ###\n`date -d \"-1 week\" +%Y%m%d`\n<br>\n### 获取24小时前日期 ###\n`date --date=\"-24 hour\" +%Y%m%d`\n<br>\n### shell脚本里面赋给变量值 ###\n``date_now=`date +%s` ``\n<br>\n### 计算执行一段sql脚本的运行时间 ###\n``` bash\nTIME_BEGIN=$(date '+%s.%N')\n$sqlcli < queries/q1.3.sql 1>> $FILE_RESULT  2>> $FILE_ERROR\nTIME_END=$(date '+%s.%N')\nTIME_RUN=$(awk 'BEGIN{print '$TIME_END' - '$TIME_BEGIN'}')\n```\n<br>\n### 编写shell脚本计算离自己生日还有多少天？ ###\n``` bash\nread -p \"Input your birthday(YYYYmmdd):\" date1\nm=`date --date=\"$date1\" +%m`    #得到生日的月\nd=`date --date=\"$date1\" +%d`    #得到生日的日\ndate_now=`date +%s`             #得到当前时间的秒值\ny=`date +%Y`                    #得到当前时间的年\nbirth=`date --date=\"$y$m$d\" +%s`      #得到今年的生日日期的秒值\ninternal=$(($birth-$date_now))        #计算今日到生日日期的间隔时间\nif [ \"$internal\" -lt \"0\" ]; then             #判断今天的生日是否已过\nbirth=`date --date=\"$(($y+1))$m$d\" +%s`      #得到明天的生日日期秒值\ninternal=$(($birth-$date_now))               #计算今天到下一个生日的间隔时间\nfi\necho \"There is :$((einternal/60/60/24)) days.\"       #输出结果，秒换算为天\n```\n<br>\n### 若是不以加号作为开头，则表示要设定时间 ###\n时间格式`MMDDhhmm[[CC]YY][.ss]`\n**MM** 为月份，\n**DD** 为日，\n**hh** 为小时，\n**mm** 为分钟，\n**CC** 为年份前两位数字，\n**YY** 为年份后两位数字，\n**ss** 为秒数\n<br>\n### 显示目前的格林威治时间 ###\n也叫“世界时”。是英国的标准时间，也是世界各地时间的参考标准。中英两国的标准时差为8个小时，即英国的当地时间比中国的北京时间晚8小时。\n`date -u`\n*Thu Sep 28 09:32:04 UTC 2006*\n<br>\n### 修改时间 ###\n`date -s`\n按字符串方式修改时间\n可以只修改日期,不修改时间,输入: `date -s 2007-08-03`\n只修改时间,输入:date -s 14:15:00\n同时修改日期时间,注意要加双引号,日期与时间之间有一空格,输入:date -s \"2007-08-03 14:15:00\"\n\n修改完后,记得输入:`clock -w`\n把系统时间写入CMOS\n","slug":"shell编程中的date用法","updated":1431769833000,"excerpt":"","_id":"65y6y95ikqvh3tc3","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python注释","date":1430644516000,"categories":["ldi4kaat0baj4vp1"],"tags":["vibk2fx65um9jn6a"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/octobershiner/archive/2012/12/04/2801670.html\" title=\"http://www.cnblogs.com/octobershiner/archive/2012/12/04/2801670.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/octobershiner/archive/2012/12/04/2801670.html</a></p>\n</blockquote>\n<h2 id=\"单行注释\">单行注释</h2>\n<p>python中单行注释采用<code>#</code>开头</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'hello python'</span></div><div class=\"line\"><span class=\"comment\">#this is a comment</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h2 id=\"多行注释\">多行注释</h2>\n<p>然后python蛋疼的没有块注释，所以现在推荐的多行注释也是采用的<code>#</code>比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># comments start</span></div><div class=\"line\"><span class=\"comment\">#content</span></div><div class=\"line\"><span class=\"comment\">#comments end</span></div></pre></td></tr></table></figure>\n\n<p>不过这种风格和标准的Java注释很像</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"javadoc\">/**</span></div><div class=\"line\"></div><div class=\"line\">*java注释</div><div class=\"line\"></div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n\n<p>网上说的什么使用<code>&quot;&quot;&quot; if 0:</code>我个人觉得很不好。。。google python style 中也是采用的<code>#</code>来进行多行注释<br><br></p>\n<h2 id=\"代码间注释\">代码间注释</h2>\n<p>这个就直接引用一段google的编程规范原文吧<br><img src=\"http://pic002.cnblogs.com/images/2012/321923/2012120417142993.png\" alt=\"\"><br>意思就是 不要去刻意对齐注释，后期维护代码会增加麻烦<br><br></p>\n<h2 id=\"特殊注释\">特殊注释</h2>\n<p>比如<code>#! /usr/bin/python</code>这句注释的意思就是告诉LINUX/UNIX去找到python的翻译器，大部分文件都不需要这个，只在要求也执行的文件中添加。</p>\n<p>关于蛋疼的中文编码:<code># coding = utf-8</code>【注：这句代码蛋疼的必须放在第二行啊，而且多个空格都不行啊！】<br><br></p>\n<h2 id=\"python的福利！！\">python的福利！！</h2>\n<p>python在注释中有一个非常有用的东西是<code>doc String</code>，它可以用于模块、函数和类的描述：（其实总结起来都是类）下面是一个标准的方法注释。<br><img src=\"http://pic002.cnblogs.com/images/2012/321923/2012120417151729.png\" alt=\"\"><br>他用<code>&quot;&quot;&quot;</code>三个引号标识，第一行大写开头，作简要概述，句号结尾，空一行开始详细的描述。他的好处是 这些注释保存在方法的<strong>doc</strong>属性中，可以打印显示。这个其实和java 的doc也很相似，还记得大明湖畔的<code>@</code>吗。</p>\n","source":"_posts/2015-05-03-Python注释.md","raw":"title: Python注释\ndate: 2015-05-03 17:15:16\ncategories:\n- Python\ntags:\n- 注释\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/octobershiner/archive/2012/12/04/2801670.html](http://www.cnblogs.com/octobershiner/archive/2012/12/04/2801670.html \"http://www.cnblogs.com/octobershiner/archive/2012/12/04/2801670.html\")\n\n## 单行注释 ##\npython中单行注释采用`#`开头\n``` python\nprint 'hello python'\n#this is a comment\n```\n<br>\n## 多行注释 ##\n然后python蛋疼的没有块注释，所以现在推荐的多行注释也是采用的`#`比如：\n``` python\n# comments start\n#content\n#comments end\n```\n不过这种风格和标准的Java注释很像\n``` java\n/**\n\n*java注释\n\n*/\n```\n网上说的什么使用`\"\"\" if 0:`我个人觉得很不好。。。google python style 中也是采用的`#`来进行多行注释\n<br>\n## 代码间注释 ##\n这个就直接引用一段google的编程规范原文吧\n![](http://pic002.cnblogs.com/images/2012/321923/2012120417142993.png)\n意思就是 不要去刻意对齐注释，后期维护代码会增加麻烦\n<br>\n## 特殊注释 ##\n比如`#! /usr/bin/python`这句注释的意思就是告诉LINUX/UNIX去找到python的翻译器，大部分文件都不需要这个，只在要求也执行的文件中添加。\n\n关于蛋疼的中文编码:`# coding = utf-8`【注：这句代码蛋疼的必须放在第二行啊，而且多个空格都不行啊！】\n<br>\n## python的福利！！ ##\n\npython在注释中有一个非常有用的东西是`doc String`，它可以用于模块、函数和类的描述：（其实总结起来都是类）下面是一个标准的方法注释。\n![](http://pic002.cnblogs.com/images/2012/321923/2012120417151729.png)\n他用`\"\"\"`三个引号标识，第一行大写开头，作简要概述，句号结尾，空一行开始详细的描述。他的好处是 这些注释保存在方法的__doc__属性中，可以打印显示。这个其实和java 的doc也很相似，还记得大明湖畔的`@`吗。\n","slug":"Python注释","updated":1431768350000,"excerpt":"","_id":"2zxi8tsyde0uloti","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt剪贴板操作","date":1430731957000,"categories":["2zuml5ffoy5vkypb"],"tags":["o4efx3bv95c0kl5r","irnehcg1ybto5ien"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://devbean.blog.51cto.com/448512/292229\" title=\"http://devbean.blog.51cto.com/448512/292229\" target=\"_blank\" rel=\"external\">http://devbean.blog.51cto.com/448512/292229</a></p>\n</blockquote>\n<p>剪贴板的操作经常和前面所说的拖放技术在一起使用，因此我们现在先来说说剪贴板的相关操作。</p>\n<p>大家对剪贴板都很熟悉。我们可以简单的把它理解成一个数据的存储池，可以把外面的数据放置进去，也可以把里面的数据取出来。剪贴板是由操作系统维护的，所以这提供了跨应用程序数据交互的一种方式。Qt 已经为我们封装好很多关于剪贴板的操作，因此我们可以在自己的应用中很容易的实现。下面还是从代码开始:<br><strong>clipboarddemo.h</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#ifndef CLIPBOARDDEMO_H  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> CLIPBOARDDEMO_H  </span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QtGui/QWidget&gt;  </span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">class</span> ClipboardDemo : <span class=\"keyword\">public</span> QWidget  </div><div class=\"line\">{  </div><div class=\"line\">    Q_OBJECT  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">    ClipboardDemo(QWidget *parent = <span class=\"number\">0</span>);  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">private</span> slots:  </div><div class=\"line\">    <span class=\"keyword\">void</span> setClipboard();  </div><div class=\"line\">    <span class=\"keyword\">void</span> getClipboard();  </div><div class=\"line\">};  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// CLIPBOARDDEMO_H</span></span></div></pre></td></tr></table></figure>\n\n<p><strong>clipboarddemo.cpp</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QtGui&gt;  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"clipboarddemo.h\"  </span></div><div class=\"line\"> </div><div class=\"line\">ClipboardDemo::ClipboardDemo(QWidget *parent)  </div><div class=\"line\">    : QWidget(parent)  </div><div class=\"line\">{  </div><div class=\"line\">    QVBoxLayout *mainLayout = <span class=\"keyword\">new</span> QVBoxLayout(<span class=\"keyword\">this</span>);  </div><div class=\"line\">    QHBoxLayout *northLayout = <span class=\"keyword\">new</span> QHBoxLayout;  </div><div class=\"line\">    QHBoxLayout *southLayout = <span class=\"keyword\">new</span> QHBoxLayout;  </div><div class=\"line\"> </div><div class=\"line\">    QTextEdit *editor = <span class=\"keyword\">new</span> QTextEdit;  </div><div class=\"line\">    QLabel *label = <span class=\"keyword\">new</span> QLabel;  </div><div class=\"line\">    label-&gt;setText(<span class=\"string\">\"Text Input: \"</span>);  </div><div class=\"line\">    label-&gt;setBuddy(editor);  </div><div class=\"line\">    QPushButton *copyButton = <span class=\"keyword\">new</span> QPushButton;  </div><div class=\"line\">    copyButton-&gt;setText(<span class=\"string\">\"Set Clipboard\"</span>);  </div><div class=\"line\">    QPushButton *pasteButton = <span class=\"keyword\">new</span> QPushButton;  </div><div class=\"line\">    pasteButton-&gt;setText(<span class=\"string\">\"Get Clipboard\"</span>);  </div><div class=\"line\"> </div><div class=\"line\">    northLayout-&gt;addWidget(label);  </div><div class=\"line\">    northLayout-&gt;addWidget(editor);  </div><div class=\"line\">    southLayout-&gt;addWidget(copyButton);  </div><div class=\"line\">    southLayout-&gt;addWidget(pasteButton);  </div><div class=\"line\">    mainLayout-&gt;addLayout(northLayout);  </div><div class=\"line\">    mainLayout-&gt;addLayout(southLayout);  </div><div class=\"line\"> </div><div class=\"line\">    connect(copyButton, SIGNAL(clicked()), <span class=\"keyword\">this</span>, SLOT(setClipboard()));  </div><div class=\"line\">    connect(pasteButton, SIGNAL(clicked()), <span class=\"keyword\">this</span>, SLOT(getClipboard()));  </div><div class=\"line\">}  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">void</span> ClipboardDemo::setClipboard()  </div><div class=\"line\">{  </div><div class=\"line\">    QClipboard *board = QApplication::clipboard();  </div><div class=\"line\">    board-&gt;setText(<span class=\"string\">\"Text from Qt Application\"</span>);  </div><div class=\"line\">}  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">void</span> ClipboardDemo::getClipboard()  </div><div class=\"line\">{  </div><div class=\"line\">    QClipboard *board = QApplication::clipboard();  </div><div class=\"line\">    QString str = board-&gt;text();  </div><div class=\"line\">    QMessageBox::information(NULL, <span class=\"string\">\"From clipboard\"</span>, str);  </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><strong>main.cpp</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"clipboarddemo.h\"  </span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QtGui&gt;  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QApplication&gt;  </span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])  </div><div class=\"line\">{  </div><div class=\"line\">    QApplication a(argc, argv);  </div><div class=\"line\">    ClipboardDemo w;  </div><div class=\"line\">    w.show();  </div><div class=\"line\">    <span class=\"keyword\">return</span> a.exec();  </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>main() 函数很简单，就是把我们的 ClipboardDemo 类显示了出来。我们重点来看 ClipboardDemo 中的代码。</p>\n<p>构造函数同样没什么复杂的内容，我们把一个label。一个 textedit 和两个 button摆放到窗口中。这些代码已经能够很轻易的写出来了；然后进行了信号槽的连接。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> ClipboardDemo::setClipboard()  </div><div class=\"line\">{  </div><div class=\"line\">    QClipboard *board = QApplication::clipboard();  </div><div class=\"line\">    board-&gt;setText(<span class=\"string\">\"Text from Qt Application\"</span>);  </div><div class=\"line\">}  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">void</span> ClipboardDemo::getClipboard()  </div><div class=\"line\">{  </div><div class=\"line\">    QClipboard *board = QApplication::clipboard();  </div><div class=\"line\">    QString str = board-&gt;text();  </div><div class=\"line\">    QMessageBox::information(NULL, <span class=\"string\">\"From clipboard\"</span>, str);  </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>在 slot 函数中，我们使用 QApplication::clipboard() 函数访问到系统剪贴板。这个函数的返回值是 QClipboard 的指针。我们可以从这个类的 API 中看到，通过 setText()，setImage() 或者 setPixmap() 函数可以将数据放置到剪贴板内，也就是通常所说的剪贴或者复制的操作；使用 text()，image() 或者 pixmap() 函数则可以从剪贴板获得数据，也就是粘贴。</p>\n<p>另外值得说的是，通过上面的例子可以看出，QTextEdit 默认就是支持 Ctrl+C, Ctrl+V 等快捷键操作的。不仅如此，很多 Qt 的组件都提供了很方便的操作，因此我们需要从文档中获取具体的信息，从而避免自己重新去发明轮子。</p>\n<p>QClipboard 提供的数据类型很少，如果需要，我们可以继承 QMimeData 类，通过调用 setMimeData() 函数让剪贴板能够支持我们自己的数据类型。</p>\n<p>在 X11 系统中，鼠标中键(一般就是滚轮)可以支持剪贴操作的。为了实现这一功能，我们需要向 QClipboard::text() 函数传递 QClipboard::Selection 参数。例如，我们在鼠标按键释放的事件中进行如下处理：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> MyTextEditor::mouseReleaseEvent(QMouseEvent *event)  </div><div class=\"line\">{  </div><div class=\"line\">    QClipboard *clipboard = QApplication::clipboard();  </div><div class=\"line\">    <span class=\"keyword\">if</span> (event-&gt;button() == Qt::MidButton  </div><div class=\"line\">            && clipboard-&gt;supportsSelection()) {  </div><div class=\"line\">        QString text = clipboard-&gt;text(QClipboard::Selection);  </div><div class=\"line\">        pasteText(text);  </div><div class=\"line\">    }  </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这里的 supportsSelection() 在 X11 平台返回 true，其余平台都是返回 false 的。</p>\n<p>另外，QClipboard 提供了 dataChanged() 信号，以便监听剪贴板数据变化。</p>\n","source":"_posts/2015-05-04-Qt剪贴板操作.md","raw":"title: Qt剪贴板操作\ndate: 2015-05-04 17:32:37\ncategories:\n- Qt\ntags:\n- 剪贴板\n- 复制到剪贴板\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://devbean.blog.51cto.com/448512/292229](http://devbean.blog.51cto.com/448512/292229 \"http://devbean.blog.51cto.com/448512/292229\")\n\n剪贴板的操作经常和前面所说的拖放技术在一起使用，因此我们现在先来说说剪贴板的相关操作。\n\n大家对剪贴板都很熟悉。我们可以简单的把它理解成一个数据的存储池，可以把外面的数据放置进去，也可以把里面的数据取出来。剪贴板是由操作系统维护的，所以这提供了跨应用程序数据交互的一种方式。Qt 已经为我们封装好很多关于剪贴板的操作，因此我们可以在自己的应用中很容易的实现。下面还是从代码开始:\n**clipboarddemo.h**\n``` cpp\n#ifndef CLIPBOARDDEMO_H  \n#define CLIPBOARDDEMO_H  \n \n#include <QtGui/QWidget>  \n \nclass ClipboardDemo : public QWidget  \n{  \n    Q_OBJECT  \n \npublic:  \n    ClipboardDemo(QWidget *parent = 0);  \n \nprivate slots:  \n    void setClipboard();  \n    void getClipboard();  \n};  \n \n#endif // CLIPBOARDDEMO_H\n```\n\n**clipboarddemo.cpp**\n``` cpp\n#include <QtGui>  \n#include \"clipboarddemo.h\"  \n \nClipboardDemo::ClipboardDemo(QWidget *parent)  \n    : QWidget(parent)  \n{  \n    QVBoxLayout *mainLayout = new QVBoxLayout(this);  \n    QHBoxLayout *northLayout = new QHBoxLayout;  \n    QHBoxLayout *southLayout = new QHBoxLayout;  \n \n    QTextEdit *editor = new QTextEdit;  \n    QLabel *label = new QLabel;  \n    label->setText(\"Text Input: \");  \n    label->setBuddy(editor);  \n    QPushButton *copyButton = new QPushButton;  \n    copyButton->setText(\"Set Clipboard\");  \n    QPushButton *pasteButton = new QPushButton;  \n    pasteButton->setText(\"Get Clipboard\");  \n \n    northLayout->addWidget(label);  \n    northLayout->addWidget(editor);  \n    southLayout->addWidget(copyButton);  \n    southLayout->addWidget(pasteButton);  \n    mainLayout->addLayout(northLayout);  \n    mainLayout->addLayout(southLayout);  \n \n    connect(copyButton, SIGNAL(clicked()), this, SLOT(setClipboard()));  \n    connect(pasteButton, SIGNAL(clicked()), this, SLOT(getClipboard()));  \n}  \n \nvoid ClipboardDemo::setClipboard()  \n{  \n    QClipboard *board = QApplication::clipboard();  \n    board->setText(\"Text from Qt Application\");  \n}  \n \nvoid ClipboardDemo::getClipboard()  \n{  \n    QClipboard *board = QApplication::clipboard();  \n    QString str = board->text();  \n    QMessageBox::information(NULL, \"From clipboard\", str);  \n}  \n```\n\n**main.cpp**\n``` cpp\n#include \"clipboarddemo.h\"  \n \n#include <QtGui>  \n#include <QApplication>  \n \nint main(int argc, char *argv[])  \n{  \n    QApplication a(argc, argv);  \n    ClipboardDemo w;  \n    w.show();  \n    return a.exec();  \n}  \n```\n\nmain() 函数很简单，就是把我们的 ClipboardDemo 类显示了出来。我们重点来看 ClipboardDemo 中的代码。\n\n构造函数同样没什么复杂的内容，我们把一个label。一个 textedit 和两个 button摆放到窗口中。这些代码已经能够很轻易的写出来了；然后进行了信号槽的连接。\n``` cpp\nvoid ClipboardDemo::setClipboard()  \n{  \n    QClipboard *board = QApplication::clipboard();  \n    board->setText(\"Text from Qt Application\");  \n}  \n \nvoid ClipboardDemo::getClipboard()  \n{  \n    QClipboard *board = QApplication::clipboard();  \n    QString str = board->text();  \n    QMessageBox::information(NULL, \"From clipboard\", str);  \n} \n```\n\n在 slot 函数中，我们使用 QApplication::clipboard() 函数访问到系统剪贴板。这个函数的返回值是 QClipboard 的指针。我们可以从这个类的 API 中看到，通过 setText()，setImage() 或者 setPixmap() 函数可以将数据放置到剪贴板内，也就是通常所说的剪贴或者复制的操作；使用 text()，image() 或者 pixmap() 函数则可以从剪贴板获得数据，也就是粘贴。\n\n另外值得说的是，通过上面的例子可以看出，QTextEdit 默认就是支持 Ctrl+C, Ctrl+V 等快捷键操作的。不仅如此，很多 Qt 的组件都提供了很方便的操作，因此我们需要从文档中获取具体的信息，从而避免自己重新去发明轮子。\n\nQClipboard 提供的数据类型很少，如果需要，我们可以继承 QMimeData 类，通过调用 setMimeData() 函数让剪贴板能够支持我们自己的数据类型。\n\n在 X11 系统中，鼠标中键(一般就是滚轮)可以支持剪贴操作的。为了实现这一功能，我们需要向 QClipboard::text() 函数传递 QClipboard::Selection 参数。例如，我们在鼠标按键释放的事件中进行如下处理：\n``` cpp\nvoid MyTextEditor::mouseReleaseEvent(QMouseEvent *event)  \n{  \n    QClipboard *clipboard = QApplication::clipboard();  \n    if (event->button() == Qt::MidButton  \n            && clipboard->supportsSelection()) {  \n        QString text = clipboard->text(QClipboard::Selection);  \n        pasteText(text);  \n    }  \n}\n```\n\n这里的 supportsSelection() 在 X11 平台返回 true，其余平台都是返回 false 的。\n\n另外，QClipboard 提供了 dataChanged() 信号，以便监听剪贴板数据变化。\n","slug":"Qt剪贴板操作","updated":1431306848000,"excerpt":"","_id":"qkqph5e8290sjwo5","comments":true,"layout":"post","photos":[],"link":""},{"title":"py2exe error: MSVCP90.dll: No such file or directory","date":1430817728000,"categories":["ldi4kaat0baj4vp1"],"tags":["eewkwewkkxuyjkv6"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/sunny5211/article/details/6431864\" title=\"http://blog.csdn.net/sunny5211/article/details/6431864\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/sunny5211/article/details/6431864</a></p>\n</blockquote>\n<p>当用py2exe 2.6编译python程序时出现这样的错误，从google上搜到了解决方法，英文网站就不翻译了，直接贴出解决方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#setup.py</span></div><div class=\"line\"><span class=\"keyword\">from</span> distutils.core <span class=\"keyword\">import</span> setup</div><div class=\"line\"><span class=\"keyword\">import</span> py2exe</div><div class=\"line\">setup(windows=[<span class=\"string\">\"frame.py\"</span>],options = { <span class=\"string\">\"py2exe\"</span>:{<span class=\"string\">\"dll_excludes\"</span>:[<span class=\"string\">\"MSVCP90.dll\"</span>]}})</div></pre></td></tr></table></figure>\n\n<p>保存为setup.py</p>\n<p>然后运行：<code>python setup.py py2exe</code> 就可以编译成功了</p>\n","source":"_posts/2015-05-05-py2exe-error-MSVCP90-dll-No-such-file-or-directory.md","raw":"title: \"py2exe error: MSVCP90.dll: No such file or directory\"\ndate: 2015-05-05 17:22:08\ncategories:\n- Python\ntags:\n- py2exe\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/sunny5211/article/details/6431864](http://blog.csdn.net/sunny5211/article/details/6431864 \"http://blog.csdn.net/sunny5211/article/details/6431864\")\n\n当用py2exe 2.6编译python程序时出现这样的错误，从google上搜到了解决方法，英文网站就不翻译了，直接贴出解决方法：\n\n``` python\n#setup.py\nfrom distutils.core import setup\nimport py2exe\nsetup(windows=[\"frame.py\"],options = { \"py2exe\":{\"dll_excludes\":[\"MSVCP90.dll\"]}})\n```\n保存为setup.py\n\n然后运行：`python setup.py py2exe` 就可以编译成功了\n","slug":"py2exe-error-MSVCP90-dll-No-such-file-or-directory","updated":1431306848000,"excerpt":"","_id":"2dw6fsd7zq9ezqh8","comments":true,"layout":"post","photos":[],"link":""},{"title":"py2exe使用方法","date":1430903569000,"categories":["ldi4kaat0baj4vp1"],"tags":["eewkwewkkxuyjkv6"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/jans2002/archive/2006/09/30/519393.html\" title=\"http://www.cnblogs.com/jans2002/archive/2006/09/30/519393.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/jans2002/archive/2006/09/30/519393.html</a></p>\n</blockquote>\n<h2 id=\"简介\">简介</h2>\n<p>py2exe是一个将python脚本转换成windows上的可独立执行的可执行程序(*.exe)的工具，这样，你就可以不用装python而在windows系统上运行这个可执行程序。</p>\n<p>py2exe已经被用于创建wxPython,Tkinter,Pmw,PyGTK,pygame,win32com client和server,和其它的独立程序。py2exe是发布在开源许可证下的。</p>\n<p><br></p>\n<h2 id=\"安装py2exe\">安装py2exe</h2>\n<p>从<a href=\"http://prdownloads.sourceforge.net/py2exe\" title=\"http://prdownloads.sourceforge.net/py2exe\" target=\"_blank\" rel=\"external\">http://prdownloads.sourceforge.net/py2exe</a>下载并运行与你所安装的Python对应的py2exe版本的installer，这将安装py2exe和相应的例子；这些例子被安装在lib\\site-packages\\py2exe\\samples目录下。</p>\n<p><br></p>\n<h2 id=\"py2exe的用法\">py2exe的用法</h2>\n<p>如果你有一个名为helloworld.py的python脚本，你想把它转换为运行在windows上的可执行程序，并运行在没有安装python的windows系统上，那么首先你应写一个用于发布程序的设置脚本例如mysetup.py，在其中的setup函数前插入语句import py2exe 。<br>mysetup.py示例如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># mysetup.py</span></div><div class=\"line\"><span class=\"keyword\">from</span> distutils.core <span class=\"keyword\">import</span> setup</div><div class=\"line\"><span class=\"keyword\">import</span> py2exe</div><div class=\"line\"></div><div class=\"line\">setup(console=[<span class=\"string\">\"helloworld.py\"</span>])</div></pre></td></tr></table></figure>\n\n<p>然后按下面的方法运行mysetup.py:<br><code>python mysetup.py py2exe</code><br>上面的命令执行后将产生一个名为dist的子目录，其中包含了helloworld.exe,python24.dll,library.zip这些文件。<br>如果你的helloworld.py脚本中用了已编译的C扩展模块，那么这些模块也会被拷贝在个子目录中，同样，所有的dll文件在运行时都是需要的，除了系统的dll文件。<br>dist子目录中的文件包含了你的程序所必须的东西，你应将这个子目录中的所有内容一起发布。</p>\n<p>默认情况下，py2exe在目录dist下创建以下这些必须的文件：</p>\n<ol>\n<li>一个或多个exe文件。</li>\n<li>python##.dll。 </li>\n<li>几个.pyd文件，它们是已编译的扩展名，它们是exe文件所需要的；加上其它的.dll文件，这些.dll是.pyd所需要的。</li>\n<li>一个library.zip文件，它包含了已编译的纯的python模块如.pyc或.pyo<br>上面的mysetup.py创建了一个控制台的helloword.exe程序，如果你要创建一个图形用户界的程序，那么你只需要将mysetup.py中的console=[“helloworld.py”]替换为windows=[“myscript.py”]既可。</li>\n</ol>\n<p>py2exe一次能够创建多个exe文件，你需要将这些脚本文件的列表传递给console或windows的关键字参数。如果你有几个相关联的脚本，那么这是很有用的。<br>运行下面个命令，将显示py2exe命令的所有命令行标记。<br><code>python mysetup.py py2exe --help</code></p>\n<p><br></p>\n<h2 id=\"指定额外的文件\">指定额外的文件</h2>\n<p>一些应用程序在运行时需要额外的文件，诸如配置文件、字体、位图。<br>如果在安装脚本中用data_files可选项指定了那些额外的文件，那么py2exe能将这些文件拷贝到dist子目录中。data_files应包含一个元组(target-dir, files)列表，其中的files是这些额外的文件的列表。<br>示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># mysetup.py</span></div><div class=\"line\"><span class=\"keyword\">from</span> distutils.core <span class=\"keyword\">import</span> setup</div><div class=\"line\"><span class=\"keyword\">import</span> glob</div><div class=\"line\"><span class=\"keyword\">import</span> py2exe</div><div class=\"line\"></div><div class=\"line\">setup(console=[<span class=\"string\">\"helloworld.py\"</span>],</div><div class=\"line\">      data_files=[(<span class=\"string\">\"bitmaps\"</span>,</div><div class=\"line\">                   [<span class=\"string\">\"bm/large.gif\"</span>, <span class=\"string\">\"bm/small.gif\"</span>]),</div><div class=\"line\">                  (<span class=\"string\">\"fonts\"</span>,</div><div class=\"line\">                   glob.glob(<span class=\"string\">\"fonts\\\\*.fnt\"</span>))],</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n\n<p>说明：data_files选项将创建一个子目录dist\\bitmaps，其中包含两个.gif文件；一个子目录dist\\fonts，其中包含了所有的.fnt文件。</p>\n<p><br></p>\n<h2 id=\"Windows_NT_services\">Windows NT services</h2>\n<p>你可以通过传递一个service关键字参数给setup函数来建造Windows NT services<br>,这个service参数的值必须是一个Python模块名(包含一service类)的列表。<br>示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># mysetup.py</span></div><div class=\"line\"><span class=\"keyword\">from</span> distutils.core <span class=\"keyword\">import</span> setup</div><div class=\"line\"><span class=\"keyword\">import</span> py2exe</div><div class=\"line\"></div><div class=\"line\">setup(service=[<span class=\"string\">\"MyService\"</span>])</div></pre></td></tr></table></figure>\n\n<p>所建造的可执行的service是可以通过在其后跟一定的命令行参数标记来自行安装和卸载的。你可以通过在这个可执行的service(exe)后跟一-help参数来得到更多的帮助。</p>\n<p><br></p>\n<h2 id=\"COM_servers\">COM servers</h2>\n<p>你可以通过传递一个com_server 关键字参数给setup函数来建造Windows NT services<br>,这个service参数的值必须是一个Python模块名(包含一个或多个COM server 类)的列表。<br>示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># mysetup.py</span></div><div class=\"line\"><span class=\"keyword\">from</span> distutils.core <span class=\"keyword\">import</span> setup</div><div class=\"line\"><span class=\"keyword\">import</span> py2exe</div><div class=\"line\"></div><div class=\"line\">setup(com_server=[<span class=\"string\">\"win32com.server.interp\"</span>])</div></pre></td></tr></table></figure>\n\n<p>默认情况下，DLL和EXE servers被建造，你不需要它们的话你可以简单的删除它们。</p>\n","source":"_posts/2015-05-06-py2exe使用方法.md","raw":"title: py2exe使用方法\ndate: 2015-05-06 17:12:49\ncategories:\n- Python\ntags:\n- py2exe\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/jans2002/archive/2006/09/30/519393.html](http://www.cnblogs.com/jans2002/archive/2006/09/30/519393.html \"http://www.cnblogs.com/jans2002/archive/2006/09/30/519393.html\")\n\n## 简介 ##\npy2exe是一个将python脚本转换成windows上的可独立执行的可执行程序(*.exe)的工具，这样，你就可以不用装python而在windows系统上运行这个可执行程序。\n\npy2exe已经被用于创建wxPython,Tkinter,Pmw,PyGTK,pygame,win32com client和server,和其它的独立程序。py2exe是发布在开源许可证下的。\n\n<br>\n## 安装py2exe ##\n从[http://prdownloads.sourceforge.net/py2exe](http://prdownloads.sourceforge.net/py2exe \"http://prdownloads.sourceforge.net/py2exe\")下载并运行与你所安装的Python对应的py2exe版本的installer，这将安装py2exe和相应的例子；这些例子被安装在lib\\site-packages\\py2exe\\samples目录下。\n\n<br>\n## py2exe的用法 ##\n如果你有一个名为helloworld.py的python脚本，你想把它转换为运行在windows上的可执行程序，并运行在没有安装python的windows系统上，那么首先你应写一个用于发布程序的设置脚本例如mysetup.py，在其中的setup函数前插入语句import py2exe 。\nmysetup.py示例如下:\n``` python\n# mysetup.py\nfrom distutils.core import setup\nimport py2exe\n\nsetup(console=[\"helloworld.py\"])\n```\n\n然后按下面的方法运行mysetup.py:\n`python mysetup.py py2exe`\n上面的命令执行后将产生一个名为dist的子目录，其中包含了helloworld.exe,python24.dll,library.zip这些文件。\n如果你的helloworld.py脚本中用了已编译的C扩展模块，那么这些模块也会被拷贝在个子目录中，同样，所有的dll文件在运行时都是需要的，除了系统的dll文件。\ndist子目录中的文件包含了你的程序所必须的东西，你应将这个子目录中的所有内容一起发布。\n\n默认情况下，py2exe在目录dist下创建以下这些必须的文件：\n1. 一个或多个exe文件。\n2. python##.dll。 \n3. 几个.pyd文件，它们是已编译的扩展名，它们是exe文件所需要的；加上其它的.dll文件，这些.dll是.pyd所需要的。\n4. 一个library.zip文件，它包含了已编译的纯的python模块如.pyc或.pyo\n上面的mysetup.py创建了一个控制台的helloword.exe程序，如果你要创建一个图形用户界的程序，那么你只需要将mysetup.py中的console=[\"helloworld.py\"]替换为windows=[\"myscript.py\"]既可。\n\npy2exe一次能够创建多个exe文件，你需要将这些脚本文件的列表传递给console或windows的关键字参数。如果你有几个相关联的脚本，那么这是很有用的。\n运行下面个命令，将显示py2exe命令的所有命令行标记。\n`python mysetup.py py2exe --help`\n\n<br>\n## 指定额外的文件 ##\n一些应用程序在运行时需要额外的文件，诸如配置文件、字体、位图。\n如果在安装脚本中用data_files可选项指定了那些额外的文件，那么py2exe能将这些文件拷贝到dist子目录中。data_files应包含一个元组(target-dir, files)列表，其中的files是这些额外的文件的列表。\n示例如下：\n``` python\n# mysetup.py\nfrom distutils.core import setup\nimport glob\nimport py2exe\n\nsetup(console=[\"helloworld.py\"],\n      data_files=[(\"bitmaps\",\n                   [\"bm/large.gif\", \"bm/small.gif\"]),\n                  (\"fonts\",\n                   glob.glob(\"fonts\\\\*.fnt\"))],\n)\n```\n说明：data_files选项将创建一个子目录dist\\bitmaps，其中包含两个.gif文件；一个子目录dist\\fonts，其中包含了所有的.fnt文件。\n\n<br>\n## Windows NT services ##\n你可以通过传递一个service关键字参数给setup函数来建造Windows NT services\n,这个service参数的值必须是一个Python模块名(包含一service类)的列表。\n示例如下：\n``` python\n# mysetup.py\nfrom distutils.core import setup\nimport py2exe\n\nsetup(service=[\"MyService\"])\n```\n所建造的可执行的service是可以通过在其后跟一定的命令行参数标记来自行安装和卸载的。你可以通过在这个可执行的service(exe)后跟一-help参数来得到更多的帮助。\n\n<br>\n## COM servers ##\n你可以通过传递一个com_server 关键字参数给setup函数来建造Windows NT services\n,这个service参数的值必须是一个Python模块名(包含一个或多个COM server 类)的列表。\n示例如下：\n``` python\n# mysetup.py\nfrom distutils.core import setup\nimport py2exe\n\nsetup(com_server=[\"win32com.server.interp\"])\n```\n默认情况下，DLL和EXE servers被建造，你不需要它们的话你可以简单的删除它们。\n","slug":"py2exe使用方法","updated":1431306848000,"excerpt":"","_id":"1sn562dxluf91hov","comments":true,"layout":"post","photos":[],"link":""},{"title":"QT内置的ICON资源","date":1430989073000,"categories":["2zuml5ffoy5vkypb"],"tags":["3dn0rj9c995wvm7y"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/fjb2080/article/details/7225692\" title=\"http://blog.csdn.net/fjb2080/article/details/7225692\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/fjb2080/article/details/7225692</a></p>\n</blockquote>\n<p>QT内置的ICON资源保存在QStyle类里。</p>\n<p>可以通过成员函数<br><code>QStyle::standardIcon</code><br>来获取。</p>\n<p>保存的icon有：<br><code>enum QStyle::StandardPixmap</code> This enum describes the available standard pixmaps. A standard pixmap is a pixmap that can follow some existing GUI style or guideline.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Constant</th>\n<th style=\"text-align:right\">Value</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_TitleBarMinButton</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">Minimize button on title bars (e.g., in QMdiSubWindow).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_TitleBarMenuButton</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:center\">Menu button on a title bar.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_TitleBarMaxButton</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:center\">Maximize button on title bars.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_TitleBarCloseButton</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:center\">Close button on title bars.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_TitleBarNormalButton</td>\n<td style=\"text-align:right\">4</td>\n<td style=\"text-align:center\">Normal (restore) button on title bars.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_TitleBarShadeButton</td>\n<td style=\"text-align:right\">5</td>\n<td style=\"text-align:center\">Shade button on title bars.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_TitleBarUnshadeButton</td>\n<td style=\"text-align:right\">6</td>\n<td style=\"text-align:center\">Unshade button on title bars.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_TitleBarContextHelpButton</td>\n<td style=\"text-align:right\">7</td>\n<td style=\"text-align:center\">The Context help button on title bars.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MessageBoxInformation</td>\n<td style=\"text-align:right\">9</td>\n<td style=\"text-align:center\">The “information” icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MessageBoxWarning</td>\n<td style=\"text-align:right\">10</td>\n<td style=\"text-align:center\">The “warning” icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MessageBoxCritical</td>\n<td style=\"text-align:right\">11</td>\n<td style=\"text-align:center\">The “critical” icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MessageBoxQuestion</td>\n<td style=\"text-align:right\">12</td>\n<td style=\"text-align:center\">The “question” icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DesktopIcon</td>\n<td style=\"text-align:right\">13</td>\n<td style=\"text-align:center\">The “desktop” icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_TrashIcon</td>\n<td style=\"text-align:right\">14</td>\n<td style=\"text-align:center\">The “trash” icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_ComputerIcon</td>\n<td style=\"text-align:right\">15</td>\n<td style=\"text-align:center\">The “My computer” icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DriveFDIcon</td>\n<td style=\"text-align:right\">16</td>\n<td style=\"text-align:center\">The floppy icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DriveHDIcon</td>\n<td style=\"text-align:right\">17</td>\n<td style=\"text-align:center\">The harddrive icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DriveCDIcon</td>\n<td style=\"text-align:right\">18</td>\n<td style=\"text-align:center\">The CD icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DriveDVDIcon</td>\n<td style=\"text-align:right\">19</td>\n<td style=\"text-align:center\">The DVD icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DriveNetIcon</td>\n<td style=\"text-align:right\">20</td>\n<td style=\"text-align:center\">The network icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DirHomeIcon</td>\n<td style=\"text-align:right\">55</td>\n<td style=\"text-align:center\">The home directory icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DirOpenIcon</td>\n<td style=\"text-align:right\">21</td>\n<td style=\"text-align:center\">The open directory icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DirClosedIcon</td>\n<td style=\"text-align:right\">22</td>\n<td style=\"text-align:center\">The closed directory icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DirIcon</td>\n<td style=\"text-align:right\">37</td>\n<td style=\"text-align:center\">The directory icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DirLinkIcon</td>\n<td style=\"text-align:right\">23</td>\n<td style=\"text-align:center\">The link to directory icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_FileIcon</td>\n<td style=\"text-align:right\">24</td>\n<td style=\"text-align:center\">The file icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_FileLinkIcon</td>\n<td style=\"text-align:right\">25</td>\n<td style=\"text-align:center\">The link to file icon.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_FileDialogStart</td>\n<td style=\"text-align:right\">28</td>\n<td style=\"text-align:center\">The “start” icon in a file dialog.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_FileDialogEnd</td>\n<td style=\"text-align:right\">29</td>\n<td style=\"text-align:center\">The “end” icon in a file dialog.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_FileDialogToParent</td>\n<td style=\"text-align:right\">30</td>\n<td style=\"text-align:center\">The “parent directory” icon in a file dialog.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_FileDialogNewFolder</td>\n<td style=\"text-align:right\">31</td>\n<td style=\"text-align:center\">The “create new folder” icon in a file dialog.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_FileDialogDetailedView</td>\n<td style=\"text-align:right\">32</td>\n<td style=\"text-align:center\">The detailed view icon in a file dialog.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_FileDialogInfoView</td>\n<td style=\"text-align:right\">33</td>\n<td style=\"text-align:center\">The file info icon in a file dialog.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_FileDialogContentsView</td>\n<td style=\"text-align:right\">34</td>\n<td style=\"text-align:center\">The contents view icon in a file dialog.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_FileDialogListView</td>\n<td style=\"text-align:right\">35</td>\n<td style=\"text-align:center\">The list view icon in a file dialog.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_FileDialogBack</td>\n<td style=\"text-align:right\">36</td>\n<td style=\"text-align:center\">The back arrow in a file dialog.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DockWidgetCloseButton</td>\n<td style=\"text-align:right\">8</td>\n<td style=\"text-align:center\">Close button on dock windows (see also QDockWidget).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_ToolBarHorizontalExtensionButton</td>\n<td style=\"text-align:right\">26</td>\n<td style=\"text-align:center\">Extension button for horizontal toolbars.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_ToolBarVerticalExtensionButton</td>\n<td style=\"text-align:right\">27</td>\n<td style=\"text-align:center\">Extension button for vertical toolbars.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DialogOkButton</td>\n<td style=\"text-align:right\">38</td>\n<td style=\"text-align:center\">Icon for a standard OK button in a QDialogButtonBox.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DialogCancelButton</td>\n<td style=\"text-align:right\">39</td>\n<td style=\"text-align:center\">Icon for a standard Cancel button in a QDialogButtonBox.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DialogHelpButton</td>\n<td style=\"text-align:right\">40</td>\n<td style=\"text-align:center\">Icon for a standard Help button in a QDialogButtonBox.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DialogOpenButton</td>\n<td style=\"text-align:right\">41</td>\n<td style=\"text-align:center\">Icon for a standard Open button in a QDialogButtonBox.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DialogSaveButton</td>\n<td style=\"text-align:right\">42</td>\n<td style=\"text-align:center\">Icon for a standard Save button in a QDialogButtonBox.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DialogCloseButton</td>\n<td style=\"text-align:right\">43</td>\n<td style=\"text-align:center\">Icon for a standard Close button in a QDialogButtonBox.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DialogApplyButton</td>\n<td style=\"text-align:right\">44</td>\n<td style=\"text-align:center\">Icon for a standard Apply button in a QDialogButtonBox.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DialogResetButton</td>\n<td style=\"text-align:right\">45</td>\n<td style=\"text-align:center\">Icon for a standard Reset button in a QDialogButtonBox.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DialogDiscardButton</td>\n<td style=\"text-align:right\">46</td>\n<td style=\"text-align:center\">Icon for a standard Discard button in a QDialogButtonBox.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DialogYesButton</td>\n<td style=\"text-align:right\">47</td>\n<td style=\"text-align:center\">Icon for a standard Yes button in a QDialogButtonBox.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_DialogNoButton</td>\n<td style=\"text-align:right\">48</td>\n<td style=\"text-align:center\">Icon for a standard No button in a QDialogButtonBox.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_ArrowUp</td>\n<td style=\"text-align:right\">49</td>\n<td style=\"text-align:center\">Icon arrow pointing up.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_ArrowDown</td>\n<td style=\"text-align:right\">50</td>\n<td style=\"text-align:center\">Icon arrow pointing down.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_ArrowLeft</td>\n<td style=\"text-align:right\">51</td>\n<td style=\"text-align:center\">Icon arrow pointing left.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_ArrowRight</td>\n<td style=\"text-align:right\">52</td>\n<td style=\"text-align:center\">Icon arrow pointing right.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_ArrowBack</td>\n<td style=\"text-align:right\">53</td>\n<td style=\"text-align:center\">Equivalent to SP_ArrowLeft when the current layout direction isQt::LeftToRight, otherwise SP_ArrowRight.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_ArrowForward</td>\n<td style=\"text-align:right\">54</td>\n<td style=\"text-align:center\">Equivalent to SP_ArrowRight when the current layout direction isQt::LeftToRight, otherwise SP_ArrowLeft.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_CommandLink</td>\n<td style=\"text-align:right\">56</td>\n<td style=\"text-align:center\">Icon used to indicate a Vista style command link glyph.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_VistaShield</td>\n<td style=\"text-align:right\">57</td>\n<td style=\"text-align:center\">Icon used to indicate UAC prompts on Windows Vista. This will return a null pixmap or icon on all other platforms.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_BrowserReload</td>\n<td style=\"text-align:right\">58</td>\n<td style=\"text-align:center\">Icon indicating that the current page should be reloaded.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_BrowserStop</td>\n<td style=\"text-align:right\">59</td>\n<td style=\"text-align:center\">Icon indicating that the page loading should stop.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MediaPlay</td>\n<td style=\"text-align:right\">60</td>\n<td style=\"text-align:center\">Icon indicating that media should begin playback.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MediaStop</td>\n<td style=\"text-align:right\">61</td>\n<td style=\"text-align:center\">Icon indicating that media should stop playback.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MediaPause</td>\n<td style=\"text-align:right\">62</td>\n<td style=\"text-align:center\">Icon indicating that media should pause playback.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MediaSkipForward</td>\n<td style=\"text-align:right\">63</td>\n<td style=\"text-align:center\">Icon indicating that media should skip forward.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MediaSkipBackward</td>\n<td style=\"text-align:right\">64</td>\n<td style=\"text-align:center\">Icon indicating that media should skip backward.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MediaSeekForward</td>\n<td style=\"text-align:right\">65</td>\n<td style=\"text-align:center\">Icon indicating that media should seek forward.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MediaSeekBackward</td>\n<td style=\"text-align:right\">66</td>\n<td style=\"text-align:center\">Icon indicating that media should seek backward.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MediaVolume</td>\n<td style=\"text-align:right\">67</td>\n<td style=\"text-align:center\">Icon indicating a volume control.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_MediaVolumeMuted</td>\n<td style=\"text-align:right\">68</td>\n<td style=\"text-align:center\">Icon indicating a muted volume control.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QStyle::SP_CustomBase</td>\n<td style=\"text-align:right\">0xf0000000</td>\n<td style=\"text-align:center\">Base value for custom standard pixmaps; custom values must be greater than this value.</td>\n</tr>\n</tbody>\n</table>\n<p>实例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">labelIcon = QtGui.QLabel(self)</div><div class=\"line\">labelIcon.setGeometry(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">16</span>, <span class=\"number\">16</span>)</div><div class=\"line\">labelIcon.setPixmap(QtGui.QApplication.style().standardPixmap(</div><div class=\"line\">    QtGui.QStyle.StandardPixmap(QtGui.QStyle.SP_MessageBoxInformation)).scaled(labelIcon.size(),</div><div class=\"line\">    QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-05-07-QT内置的ICON资源.md","raw":"title: QT内置的ICON资源\ndate: 2015-05-07 16:57:53\ncategories:\n- Qt\ntags:\n- 内置ICON\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/fjb2080/article/details/7225692](http://blog.csdn.net/fjb2080/article/details/7225692 \"http://blog.csdn.net/fjb2080/article/details/7225692\")\n\nQT内置的ICON资源保存在QStyle类里。\n\n可以通过成员函数\n`QStyle::standardIcon`\n来获取。\n\n保存的icon有：\n`enum QStyle::StandardPixmap` This enum describes the available standard pixmaps. A standard pixmap is a pixmap that can follow some existing GUI style or guideline.\n\n|Constant|Value|Description|\n|:--|--:|:-:|\n|QStyle::SP_TitleBarMinButton \t            |1 \t       |Minimize button on title bars (e.g., in QMdiSubWindow).\n|QStyle::SP_TitleBarMenuButton \t            |0 \t       |Menu button on a title bar.\n|QStyle::SP_TitleBarMaxButton \t            |2 \t       |Maximize button on title bars.\n|QStyle::SP_TitleBarCloseButton \t        |3 \t       |Close button on title bars.\n|QStyle::SP_TitleBarNormalButton \t        |4 \t       |Normal (restore) button on title bars.\n|QStyle::SP_TitleBarShadeButton \t        |5 \t       |Shade button on title bars.\n|QStyle::SP_TitleBarUnshadeButton \t        |6 \t       |Unshade button on title bars.\n|QStyle::SP_TitleBarContextHelpButton \t    |7 \t       |The Context help button on title bars.\n|QStyle::SP_MessageBoxInformation \t        |9 \t       |The \"information\" icon.\n|QStyle::SP_MessageBoxWarning \t            |10 \t   |The \"warning\" icon.\n|QStyle::SP_MessageBoxCritical \t            |11 \t   |The \"critical\" icon.\n|QStyle::SP_MessageBoxQuestion \t            |12 \t   |The \"question\" icon.\n|QStyle::SP_DesktopIcon \t                |13 \t   |The \"desktop\" icon.\n|QStyle::SP_TrashIcon \t                    |14 \t   |The \"trash\" icon.\n|QStyle::SP_ComputerIcon \t                |15 \t   |The \"My computer\" icon.\n|QStyle::SP_DriveFDIcon \t                |16 \t   |The floppy icon.\n|QStyle::SP_DriveHDIcon \t                |17 \t   |The harddrive icon.\n|QStyle::SP_DriveCDIcon \t                |18 \t   |The CD icon.\n|QStyle::SP_DriveDVDIcon \t                |19 \t   |The DVD icon.\n|QStyle::SP_DriveNetIcon \t                |20 \t   |The network icon.\n|QStyle::SP_DirHomeIcon \t                |55 \t   |The home directory icon.\n|QStyle::SP_DirOpenIcon \t                |21 \t   |The open directory icon.\n|QStyle::SP_DirClosedIcon \t                |22 \t   |The closed directory icon.\n|QStyle::SP_DirIcon \t                    |37 \t   |The directory icon.\n|QStyle::SP_DirLinkIcon \t                |23 \t   |The link to directory icon.\n|QStyle::SP_FileIcon \t                    |24 \t   |The file icon.\n|QStyle::SP_FileLinkIcon \t                |25 \t   |The link to file icon.\n|QStyle::SP_FileDialogStart \t            |28 \t   |The \"start\" icon in a file dialog.\n|QStyle::SP_FileDialogEnd \t                |29 \t   |The \"end\" icon in a file dialog.\n|QStyle::SP_FileDialogToParent \t            |30 \t   |The \"parent directory\" icon in a file dialog.\n|QStyle::SP_FileDialogNewFolder \t        |31 \t   |The \"create new folder\" icon in a file dialog.\n|QStyle::SP_FileDialogDetailedView \t        |32 \t   |The detailed view icon in a file dialog.\n|QStyle::SP_FileDialogInfoView \t            |33 \t   |The file info icon in a file dialog.\n|QStyle::SP_FileDialogContentsView \t        |34 \t   |The contents view icon in a file dialog.\n|QStyle::SP_FileDialogListView \t            |35 \t   |The list view icon in a file dialog.\n|QStyle::SP_FileDialogBack \t                |36 \t   |The back arrow in a file dialog.\n|QStyle::SP_DockWidgetCloseButton \t        |8 \t       |Close button on dock windows (see also QDockWidget).\n|QStyle::SP_ToolBarHorizontalExtensionButton|26 \t   |Extension button for horizontal toolbars.\n|QStyle::SP_ToolBarVerticalExtensionButton \t|27 \t   |Extension button for vertical toolbars.\n|QStyle::SP_DialogOkButton \t                |38 \t   |Icon for a standard OK button in a QDialogButtonBox.\n|QStyle::SP_DialogCancelButton \t            |39 \t   |Icon for a standard Cancel button in a QDialogButtonBox.\n|QStyle::SP_DialogHelpButton \t            |40 \t   |Icon for a standard Help button in a QDialogButtonBox.\n|QStyle::SP_DialogOpenButton \t            |41 \t   |Icon for a standard Open button in a QDialogButtonBox.\n|QStyle::SP_DialogSaveButton \t            |42 \t   |Icon for a standard Save button in a QDialogButtonBox.\n|QStyle::SP_DialogCloseButton \t            |43 \t   |Icon for a standard Close button in a QDialogButtonBox.\n|QStyle::SP_DialogApplyButton \t            |44 \t   |Icon for a standard Apply button in a QDialogButtonBox.\n|QStyle::SP_DialogResetButton \t            |45 \t   |Icon for a standard Reset button in a QDialogButtonBox.\n|QStyle::SP_DialogDiscardButton \t        |46 \t   |Icon for a standard Discard button in a QDialogButtonBox.\n|QStyle::SP_DialogYesButton \t            |47 \t   |Icon for a standard Yes button in a QDialogButtonBox.\n|QStyle::SP_DialogNoButton \t                |48 \t   |Icon for a standard No button in a QDialogButtonBox.\n|QStyle::SP_ArrowUp \t                    |49 \t   |Icon arrow pointing up.\n|QStyle::SP_ArrowDown \t                    |50 \t   |Icon arrow pointing down.\n|QStyle::SP_ArrowLeft \t                    |51 \t   |Icon arrow pointing left.\n|QStyle::SP_ArrowRight \t                    |52 \t   |Icon arrow pointing right.\n|QStyle::SP_ArrowBack \t                    |53 \t   |Equivalent to SP_ArrowLeft when the current layout direction isQt::LeftToRight, otherwise SP_ArrowRight.\n|QStyle::SP_ArrowForward \t                |54 \t   |Equivalent to SP_ArrowRight when the current layout direction isQt::LeftToRight, otherwise SP_ArrowLeft.\n|QStyle::SP_CommandLink \t                |56 \t   |Icon used to indicate a Vista style command link glyph.\n|QStyle::SP_VistaShield \t                |57 \t   |Icon used to indicate UAC prompts on Windows Vista. This will return a null pixmap or icon on all other platforms.\n|QStyle::SP_BrowserReload \t                |58 \t   |Icon indicating that the current page should be reloaded.\n|QStyle::SP_BrowserStop \t                |59 \t   |Icon indicating that the page loading should stop.\n|QStyle::SP_MediaPlay \t                    |60 \t   |Icon indicating that media should begin playback.\n|QStyle::SP_MediaStop \t                    |61 \t   |Icon indicating that media should stop playback.\n|QStyle::SP_MediaPause \t                    |62 \t   |Icon indicating that media should pause playback.\n|QStyle::SP_MediaSkipForward \t            |63 \t   |Icon indicating that media should skip forward.\n|QStyle::SP_MediaSkipBackward \t            |64 \t   |Icon indicating that media should skip backward.\n|QStyle::SP_MediaSeekForward \t            |65 \t   |Icon indicating that media should seek forward.\n|QStyle::SP_MediaSeekBackward \t            |66 \t   |Icon indicating that media should seek backward.\n|QStyle::SP_MediaVolume \t                |67 \t   |Icon indicating a volume control.\n|QStyle::SP_MediaVolumeMuted \t            |68 \t   |Icon indicating a muted volume control.\n|QStyle::SP_CustomBase \t                    |0xf0000000|Base value for custom standard pixmaps; custom values must be greater than this value.\n\n实例:\n``` python\nlabelIcon = QtGui.QLabel(self)\nlabelIcon.setGeometry(0, 0, 16, 16)\nlabelIcon.setPixmap(QtGui.QApplication.style().standardPixmap(\n    QtGui.QStyle.StandardPixmap(QtGui.QStyle.SP_MessageBoxInformation)).scaled(labelIcon.size(),\n    QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))\n```\n","slug":"QT内置的ICON资源","updated":1431437599000,"excerpt":"","_id":"kxbs8lxoliuk9vo5","comments":true,"layout":"post","photos":[],"link":""},{"title":"PyChecker使用指南","date":1431082305000,"categories":["ldi4kaat0baj4vp1"],"tags":["mug5r49a1gt5io03"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/thoughtwise/article/details/5719455\" title=\"http://blog.csdn.net/thoughtwise/article/details/5719455\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/thoughtwise/article/details/5719455</a></p>\n</blockquote>\n<h2 id=\"简介\">简介</h2>\n<p>PyChecker是一个对Python源代码进行语法检查的工具。<br>主页：<a href=\"http://pychecker.sourceforge.net\" title=\"http://pychecker.sourceforge.net\" target=\"_blank\" rel=\"external\">http://pychecker.sourceforge.net</a></p>\n<p>PyChecker is a static analysis tool for finding bugs in Python source code. It finds problems that are typically caught by a compiler for less dynamic languages, like C and C++. It is similar to lint.</p>\n<p>目前最新版本是2008-08-18 更新的pychecker-0.8.18。</p>\n<p><br></p>\n<h2 id=\"安装\">安装</h2>\n<p>前提：本地安装好Python2.x， 推荐2.6版本，虽然2.7版本也发布了。3.0版差异太大，相当于全新版本，不保证兼容性，不推荐使用。<br>最好将IPython也一并安装了。</p>\n<p>下载地址：<a href=\"http://sourceforge.net/projects/pychecker\" title=\"http://sourceforge.net/projects/pychecker\" target=\"_blank\" rel=\"external\">http://sourceforge.net/projects/pychecker</a></p>\n<p>从网页上下载pychecker-0.8.18.tar.gz，解压。</p>\n<p>然后在pychecker-0.8.18目录(其下有setup.py脚本)， 执行命令行<code>python setup.py install</code>执行安装。这也是在Windows下python软件的通用安装方式。</p>\n<p><br></p>\n<h2 id=\"使用\">使用</h2>\n<p>安装好后，试试在pychecker-0.8.18目录执行命令行<code>pychecker setup.py</code>，检查setup.py的语法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"constant\">E</span><span class=\"symbol\">:/pychecker-</span><span class=\"number\">0</span>.<span class=\"number\">8.18</span>&gt;pychecker setup.py</div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">E</span><span class=\"symbol\">:/pychecker-</span><span class=\"number\">0</span>.<span class=\"number\">8.18</span>&gt;<span class=\"constant\">C</span><span class=\"symbol\">:/Python26/python</span>.exe <span class=\"constant\">C</span><span class=\"symbol\">:/Python26/Lib/site-packages/pychecker/checker</span>.py se</div><div class=\"line\">tup.py</div><div class=\"line\"><span class=\"constant\">Processing</span> <span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">setup</span> (<span class=\"title\">setup</span>.<span class=\"title\">py</span>)...</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">Warnings</span>...</div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">C</span><span class=\"symbol\">:/Python26/lib/distutils/command/bdist_wininst</span>.<span class=\"symbol\">py:</span><span class=\"number\">271</span><span class=\"symbol\">:</span> <span class=\"constant\">Statement</span> appears to have no effect</div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">C</span><span class=\"symbol\">:/Python26/lib/distutils/command/build_scripts</span>.<span class=\"symbol\">py:</span><span class=\"number\">80</span><span class=\"symbol\">:</span> <span class=\"constant\">No</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">attribute</span> (<span class=\"title\">dry_run</span>) <span class=\"title\">found</span></span></div><div class=\"line\"><span class=\"constant\">C</span><span class=\"symbol\">:/Python26/lib/distutils/command/build_scripts</span>.<span class=\"symbol\">py:</span><span class=\"number\">97</span><span class=\"symbol\">:</span> <span class=\"constant\">No</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">attribute</span> (<span class=\"title\">dry_run</span>) <span class=\"title\">found</span></span></div><div class=\"line\"><span class=\"constant\">C</span><span class=\"symbol\">:/Python26/lib/distutils/command/build_scripts</span>.<span class=\"symbol\">py:</span><span class=\"number\">120</span><span class=\"symbol\">:</span> (file) shadows builtin</div><div class=\"line\"><span class=\"constant\">C</span><span class=\"symbol\">:/Python26/lib/distutils/command/build_scripts</span>.<span class=\"symbol\">py:</span><span class=\"number\">121</span><span class=\"symbol\">:</span> <span class=\"constant\">No</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">attribute</span> (<span class=\"title\">dry_run</span>) <span class=\"title\">found</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">C</span><span class=\"symbol\">:/Python26/lib/distutils/command/install_data</span>.<span class=\"symbol\">py:</span><span class=\"number\">62</span><span class=\"symbol\">:</span> (dir) shadows builtin</div><div class=\"line\"><span class=\"constant\">C</span><span class=\"symbol\">:/Python26/lib/distutils/command/install_data</span>.<span class=\"symbol\">py:</span><span class=\"number\">64</span><span class=\"symbol\">:</span> (dir) shadows builtin</div><div class=\"line\"><span class=\"constant\">C</span><span class=\"symbol\">:/Python26/lib/distutils/command/install_data</span>.<span class=\"symbol\">py:</span><span class=\"number\">66</span><span class=\"symbol\">:</span> (dir) shadows builtin</div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">C</span><span class=\"symbol\">:/Python26/lib/distutils/command/install_scripts</span>.<span class=\"symbol\">py:</span><span class=\"number\">52</span><span class=\"symbol\">:</span> (file) shadows builtin</div><div class=\"line\"><span class=\"constant\">C</span><span class=\"symbol\">:/Python26/lib/distutils/command/install_scripts</span>.<span class=\"symbol\">py:</span><span class=\"number\">53</span><span class=\"symbol\">:</span> <span class=\"constant\">No</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">attribute</span> (<span class=\"title\">dry_run</span>) <span class=\"title\">found</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">19</span> errors suppressed, use -<span class=\"comment\">#/--limit to increase the number of errors displayed</span></div></pre></td></tr></table></figure>\n\n\n<p>这里pychecker 是个bat脚本，实际执行的是C:/Python26/python.exe C:/Python26/Lib/site-packages/pychecker/checker.py 。</p>\n<p>这里检查结果将setup.py依赖的文件中语法错误或告警也检查出来了。</p>\n<p>如果只想检查setup.py自身的语法，可以用<code>--only</code>参数</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"constant\">E</span><span class=\"symbol\">:/pychecker-</span><span class=\"number\">0</span>.<span class=\"number\">8.18</span>&gt;pychecker --only setup.py</div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">E</span><span class=\"symbol\">:/pychecker-</span><span class=\"number\">0</span>.<span class=\"number\">8.18</span>&gt;<span class=\"constant\">C</span><span class=\"symbol\">:/Python26/python</span>.exe <span class=\"constant\">C</span><span class=\"symbol\">:/Python26/Lib/site-packages/pychecker/checker</span>.py --only setup.py</div><div class=\"line\"><span class=\"constant\">Processing</span> <span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">setup</span> (<span class=\"title\">setup</span>.<span class=\"title\">py</span>)...</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">Warnings</span>...</div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">None</span></div></pre></td></tr></table></figure>\n\n<p>更多的参数，可以使用<code>pychecker --help</code>查看</p>\n","source":"_posts/2015-05-08-PyChecker使用指南.md","raw":"title: PyChecker使用指南\ndate: 2015-05-08 18:51:45\ncategories:\n- Python\ntags:\n- PyChecker\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/thoughtwise/article/details/5719455](http://blog.csdn.net/thoughtwise/article/details/5719455 \"http://blog.csdn.net/thoughtwise/article/details/5719455\")\n\n## 简介 ##\nPyChecker是一个对Python源代码进行语法检查的工具。\n主页：[http://pychecker.sourceforge.net](http://pychecker.sourceforge.net \"http://pychecker.sourceforge.net\")\n\nPyChecker is a static analysis tool for finding bugs in Python source code. It finds problems that are typically caught by a compiler for less dynamic languages, like C and C++. It is similar to lint.\n\n目前最新版本是2008-08-18 更新的pychecker-0.8.18。\n\n<br>\n## 安装 ##\n前提：本地安装好Python2.x， 推荐2.6版本，虽然2.7版本也发布了。3.0版差异太大，相当于全新版本，不保证兼容性，不推荐使用。\n最好将IPython也一并安装了。\n\n下载地址：[http://sourceforge.net/projects/pychecker](http://sourceforge.net/projects/pychecker \"http://sourceforge.net/projects/pychecker\")\n\n从网页上下载pychecker-0.8.18.tar.gz，解压。\n\n然后在pychecker-0.8.18目录(其下有setup.py脚本)， 执行命令行`python setup.py install`执行安装。这也是在Windows下python软件的通用安装方式。\n\n<br>\n## 使用 ##\n安装好后，试试在pychecker-0.8.18目录执行命令行`pychecker setup.py`，检查setup.py的语法\n```\nE:/pychecker-0.8.18>pychecker setup.py\n\nE:/pychecker-0.8.18>C:/Python26/python.exe C:/Python26/Lib/site-packages/pychecker/checker.py se\ntup.py\nProcessing module setup (setup.py)...\n\nWarnings...\n\nC:/Python26/lib/distutils/command/bdist_wininst.py:271: Statement appears to have no effect\n\nC:/Python26/lib/distutils/command/build_scripts.py:80: No class attribute (dry_run) found\nC:/Python26/lib/distutils/command/build_scripts.py:97: No class attribute (dry_run) found\nC:/Python26/lib/distutils/command/build_scripts.py:120: (file) shadows builtin\nC:/Python26/lib/distutils/command/build_scripts.py:121: No class attribute (dry_run) found\n\nC:/Python26/lib/distutils/command/install_data.py:62: (dir) shadows builtin\nC:/Python26/lib/distutils/command/install_data.py:64: (dir) shadows builtin\nC:/Python26/lib/distutils/command/install_data.py:66: (dir) shadows builtin\n\nC:/Python26/lib/distutils/command/install_scripts.py:52: (file) shadows builtin\nC:/Python26/lib/distutils/command/install_scripts.py:53: No class attribute (dry_run) found\n\n19 errors suppressed, use -#/--limit to increase the number of errors displayed\n```\n \n这里pychecker 是个bat脚本，实际执行的是C:/Python26/python.exe C:/Python26/Lib/site-packages/pychecker/checker.py 。\n\n这里检查结果将setup.py依赖的文件中语法错误或告警也检查出来了。\n\n如果只想检查setup.py自身的语法，可以用`--only`参数\n\n```\nE:/pychecker-0.8.18>pychecker --only setup.py\n\nE:/pychecker-0.8.18>C:/Python26/python.exe C:/Python26/Lib/site-packages/pychecker/checker.py --only setup.py\nProcessing module setup (setup.py)...\n\nWarnings...\n\nNone\n```\n更多的参数，可以使用`pychecker --help`查看\n","slug":"PyChecker使用指南","updated":1431306848000,"excerpt":"","_id":"bwjeo26sxe9v4x6a","comments":true,"layout":"post","photos":[],"link":""},{"title":"Notepad++命令行参数","date":1431161330000,"categories":["x8qrf2i2578tohs4"],"tags":["hf4k1nde4uh9xzzt","8a5irnnnilrgj2vz"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/lihaozy/archive/2012/08/03/2621034.html\" title=\"http://www.cnblogs.com/lihaozy/archive/2012/08/03/2621034.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/lihaozy/archive/2012/08/03/2621034.html</a></p>\n</blockquote>\n<p><code>Notepad++.exe [-multiInst] [-noPlugin] [-ro] [-nosession] [-notabbar] [-n##] [-l$$$] [FILES]</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">Notepad++ 支持命令行参数。以下就是 Notepad++ 支持的命令行选项（区分大小写）： p&gt;</div><div class=\"line\"></div><div class=\"line\">-<span class=\"ruby\">n行号</span></div><div class=\"line\">    文件打开后光标所在的行号.</div><div class=\"line\">-<span class=\"ruby\">c</span></div><div class=\"line\">    启动列编辑模式.</div><div class=\"line\">-<span class=\"ruby\">-help</span></div><div class=\"line\">    显示命令行帮助，比如命令行的格式</div><div class=\"line\">-<span class=\"ruby\">loadingTime</span></div><div class=\"line\">    显示 Notepad++ 打开所有文件所消耗的时间.结果以对话框形式显示，时间精确到0.01秒。</div><div class=\"line\">-<span class=\"ruby\">multiInst</span></div><div class=\"line\">    允许多个 Notepad++ 同时运行。默认情况下，如果 Notepad++ 已经运行的话，文件将会由此 Notepad++ 实例打开，如果开启了多实例模式，文件由新的 Notepad++ 实例打开.</div><div class=\"line\">-<span class=\"ruby\">noPlugin</span></div><div class=\"line\">    不加载任何插件。如果你担心插件可能不安全，或者不想加载任何插件的话，可以使用此选项.</div><div class=\"line\">-<span class=\"ruby\">ro</span></div><div class=\"line\">    所有的文件都以只读模式打开.</div><div class=\"line\">-<span class=\"ruby\">nosession</span></div><div class=\"line\">    在 Notepad++ 启动后不加载之前保持的会话.在 Notepad++ 退出时也不保持当前会话。</div><div class=\"line\">-<span class=\"ruby\">notabbar</span></div><div class=\"line\">    隐藏工具栏</div><div class=\"line\">-<span class=\"ruby\">systemtray</span></div><div class=\"line\">    Notepad++ 启动后最小化到托盘，也称作 通知区域。</div><div class=\"line\">-<span class=\"ruby\">x行号</span></div><div class=\"line\">    指定Notepad++启动后光标所在的行号</div><div class=\"line\">-<span class=\"ruby\">y列号</span></div><div class=\"line\">    指定 Notepad++ 启动后光标所在的列号.</div><div class=\"line\">-<span class=\"ruby\">l语言缩写名</span></div><div class=\"line\">    指定文件的语言格式. $$$ 表示以下任意一种语言的缩写字符串:</div><div class=\"line\">    normal, php, c, cpp, cs, objc, d, java, rc, html, xml, makefile, pascal, batch, ini, nfo, asp, sql, vb, javascript, css, perl, python, lua, tex, cobol, fortran, bash, actionscript, nsis, tcl, lisp, scheme, asm, diff, props, postscript, ruby, smalltalk, vhdl, kix, autoit, Gui4Cli, powershell, caml, ada, verilog, matlab, haskell, inno, cmake, yaml,r, jsp</div><div class=\"line\">    命令行的其他参数都将被当作文件名。总是把你的文件名用引号括起来，以防你的文件中包含空格时，Notepad++ 将其分割为多个文件名.</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-05-09-Notepad-命令行参数.md","raw":"title: Notepad++命令行参数\ndate: 2015-05-09 16:48:50\ncategories:\n- 杂类\ntags:\n- Notepad++\n- 命令行参数\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/lihaozy/archive/2012/08/03/2621034.html](http://www.cnblogs.com/lihaozy/archive/2012/08/03/2621034.html \"http://www.cnblogs.com/lihaozy/archive/2012/08/03/2621034.html\")\n\n`Notepad++.exe [-multiInst] [-noPlugin] [-ro] [-nosession] [-notabbar] [-n##] [-l$$$] [FILES]`\n\n```\nNotepad++ 支持命令行参数。以下就是 Notepad++ 支持的命令行选项（区分大小写）： p>\n\n-n行号\n    文件打开后光标所在的行号.\n-c\n    启动列编辑模式.\n--help\n    显示命令行帮助，比如命令行的格式\n-loadingTime\n    显示 Notepad++ 打开所有文件所消耗的时间.结果以对话框形式显示，时间精确到0.01秒。\n-multiInst\n    允许多个 Notepad++ 同时运行。默认情况下，如果 Notepad++ 已经运行的话，文件将会由此 Notepad++ 实例打开，如果开启了多实例模式，文件由新的 Notepad++ 实例打开.\n-noPlugin\n    不加载任何插件。如果你担心插件可能不安全，或者不想加载任何插件的话，可以使用此选项.\n-ro\n    所有的文件都以只读模式打开.\n-nosession\n    在 Notepad++ 启动后不加载之前保持的会话.在 Notepad++ 退出时也不保持当前会话。\n-notabbar\n    隐藏工具栏\n-systemtray\n    Notepad++ 启动后最小化到托盘，也称作 通知区域。\n-x行号\n    指定Notepad++启动后光标所在的行号\n-y列号\n    指定 Notepad++ 启动后光标所在的列号.\n-l语言缩写名\n    指定文件的语言格式. $$$ 表示以下任意一种语言的缩写字符串:\n    normal, php, c, cpp, cs, objc, d, java, rc, html, xml, makefile, pascal, batch, ini, nfo, asp, sql, vb, javascript, css, perl, python, lua, tex, cobol, fortran, bash, actionscript, nsis, tcl, lisp, scheme, asm, diff, props, postscript, ruby, smalltalk, vhdl, kix, autoit, Gui4Cli, powershell, caml, ada, verilog, matlab, haskell, inno, cmake, yaml,r, jsp\n    命令行的其他参数都将被当作文件名。总是把你的文件名用引号括起来，以防你的文件中包含空格时，Notepad++ 将其分割为多个文件名. \n```","slug":"Notepad-命令行参数","updated":1431306848000,"excerpt":"","_id":"1zcfq9mqowwsacrg","comments":true,"layout":"post","photos":[],"link":""},{"title":"自定义QTabWidget样式","date":1431235658000,"categories":["2zuml5ffoy5vkypb"],"tags":["nmldk4hu366t8ktw","sdwid57j2p3h8k0k","lb6hmaejkkr4m9rx"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>记录一下如果用<code>QSS</code>实现如下效果的<code>QTabWidget</code>控件:<br><img src=\"result.png\" alt=\"效果图\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">QTabWidget</span><span class=\"id\">#tabWidget</span><span class=\"pseudo\">:pane</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">border-width</span>:<span class=\"value\"> <span class=\"number\">0</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"hexcolor\">#ffffff</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">QTabBar</span><span class=\"pseudo\">:tab</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">border-image</span>:<span class=\"value\"> <span class=\"function\">url</span>(:/tab-normal.png)</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">90px</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">35px</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> <span class=\"hexcolor\">#999999</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">font</span>:<span class=\"value\"> <span class=\"number\">12px</span> <span class=\"string\">\"Microsoft Yahei\"</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">QTabBar</span><span class=\"pseudo\">:tab</span><span class=\"pseudo\">:selected</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">border-image</span>:<span class=\"value\"> <span class=\"function\">url</span>(:/tab-selected.png)</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> <span class=\"hexcolor\">#333333</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">QTabBar</span><span class=\"pseudo\">:tab</span><span class=\"pseudo\">:hover</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> <span class=\"hexcolor\">#333333</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>图片资源: <code>PS: 图片资源右边有一条浅灰色的竖线以区分每个Tab，可以调整QTabWidget宽度使最后一个Tab不显示这条竖线 :)</code><br><img src=\"tab-normal.png\" alt=\"tab-normal.png\"></p>\n<p><img src=\"tab-selected.png\" alt=\"tab-selected.png\"></p>\n<p><br><br>还有另外一种半透明效果的:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">QTabWidget</span><span class=\"pseudo\">:pane</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">border</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">QTabBar</span><span class=\"pseudo\">:tab</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"function\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">120</span>)</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> <span class=\"hexcolor\">#a59400</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">128px</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">19px</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">border-top-left-radius</span>:<span class=\"value\"> <span class=\"number\">3px</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">border-top-right-radius</span>:<span class=\"value\"> <span class=\"number\">3px</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\"> <span class=\"number\">2px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">QTabBar</span><span class=\"pseudo\">:tab</span><span class=\"pseudo\">:selected</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"function\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">166</span>)</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> <span class=\"hexcolor\">#fae119</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">QTabBar</span><span class=\"pseudo\">:tab</span><span class=\"pseudo\">:hover</span>:!<span class=\"tag\">selected</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"function\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">156</span>)</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p><img src=\"result2.png\" alt=\"效果图\"></p>\n","source":"_posts/2015-05-10-自定义QTabWidget样式.md","raw":"title: 自定义QTabWidget样式\ndate: 2015-05-10 13:27:38\ncategories:\n- Qt\ntags:\n- PyQt\n- QSS\n- QTabWidget\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n记录一下如果用`QSS`实现如下效果的`QTabWidget`控件:\n![效果图](result.png)\n\n``` css\nQTabWidget#tabWidget:pane {\n    border-width: 0;\n    background: #ffffff;\n}\n\nQTabBar:tab {\n    border-image: url(:/tab-normal.png);\n    width: 90px;\n    height: 35px;\n    color: #999999;\n    font: 12px \"Microsoft Yahei\";\n}\n\nQTabBar:tab:selected {\n    border-image: url(:/tab-selected.png);\n    color: #333333;\n}\n\nQTabBar:tab:hover {\n    color: #333333;\n}\n```\n\n图片资源: `PS: 图片资源右边有一条浅灰色的竖线以区分每个Tab，可以调整QTabWidget宽度使最后一个Tab不显示这条竖线 :)`\n![tab-normal.png](tab-normal.png)\n\n![tab-selected.png](tab-selected.png)\n\n<br>\n还有另外一种半透明效果的:\n``` css\nQTabWidget:pane {\n    border: none;\n}\n\nQTabBar:tab {\n    background: rgba(0, 0, 0, 120);\n    color: #a59400;\n    width: 128px;\n    height: 19px;\n    border-top-left-radius: 3px;\n    border-top-right-radius: 3px;\n    margin-right: 2px;\n}\n\nQTabBar:tab:selected {\n    background: rgba(0, 0, 0, 166);\n    color: #fae119;\n}\n\nQTabBar:tab:hover:!selected {\n    background: rgba(0, 0, 0, 156);\n}\n```\n![效果图](result2.png)\n","slug":"自定义QTabWidget样式","updated":1436690412000,"excerpt":"","_id":"iqthgkqq6c5mvs5k","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python的lambda匿名函数","date":1429504019000,"categories":["ldi4kaat0baj4vp1"],"tags":["sw3pwlvurasnip25"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/coderzh/archive/2010/04/30/python-cookbook-lambda.html\" title=\"http://www.cnblogs.com/coderzh/archive/2010/04/30/python-cookbook-lambda.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/coderzh/archive/2010/04/30/python-cookbook-lambda.html</a></p>\n</blockquote>\n<h2 id=\"介绍\">介绍</h2>\n<p>lambda函数也叫匿名函数，即，函数没有具体的名称。先来看一个最简单例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x**<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> f(<span class=\"number\">4</span>)</div></pre></td></tr></table></figure>\n\n<p>Python中使用lambda的话，写成这样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">g = <span class=\"keyword\">lambda</span> x : x**<span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">print</span> g(<span class=\"number\">4</span>)</div></pre></td></tr></table></figure>\n\n<p>lambda表达式在很多编程语言都有对应的实现。比如C#：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> g = x =&gt; x**<span class=\"number\">2</span></div><div class=\"line\">Console.WriteLine(g(<span class=\"number\">4</span>))</div></pre></td></tr></table></figure>\n\n<p>那么，lambda表达式有什么用处呢？很多人提出了质疑，lambda和普通的函数相比，就是省去了函数名称而已，同时这样的匿名函数，又不能共享在别的地方调用。其实说的没错，lambda在Python这种动态的语言中确实没有起到什么惊天动地的作用，因为有很多别的方法能够代替lambda。同时，使用lambda的写法有时显得并没有那么pythonic。甚至有人提出之后的Python版本要取消lambda。<br>回过头来想想，Python中的lambda真的没有用武之地吗？其实不是的，至少我能想到的点，主要有：</p>\n<ol>\n<li>使用Python写一些执行脚本时，使用lambda可以省去定义函数的过程，让代码更加精简。</li>\n<li>对于一些抽象的，不会别的地方再复用的函数，有时候给函数起个名字也是个难题，使用lambda不需要考虑命名的问题。</li>\n<li>使用lambda在某些时候让代码更容易理解。</li>\n</ol>\n<p><br></p>\n<h2 id=\"lambda基础\">lambda基础</h2>\n<p>lambda语句中，冒号前是参数，可以有多个，用逗号隔开，冒号右边的返回值。lambda语句构建的其实是一个函数对象，见证一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">g = <span class=\"keyword\">lambda</span> x : x**<span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">print</span> g</div><div class=\"line\"></div><div class=\"line\">&lt;function &lt;<span class=\"keyword\">lambda</span>&gt; at <span class=\"number\">0x00AFAAF0</span>&gt;</div></pre></td></tr></table></figure>\n\n<p>C#3.0开始，也有了lambda表达式，省去了使用delegate的麻烦写法。C#中的lambda表达式关键字是=&gt;，看下面的一个例子：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] {<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>};</div><div class=\"line\"><span class=\"keyword\">var</span> result = array.Where(n =&gt; n &gt; <span class=\"number\">3</span>); <span class=\"comment\">// [5, 6, 9]</span></div></pre></td></tr></table></figure>\n\n<p>C#使用了扩展方法，才使得数组对象拥有了像Where,Sum之类方便的方法。Python中，也有几个定义好的全局函数方便使用的，他们就是filter, map, reduce。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&gt;&gt;&gt;</span> foo = [<span class=\"number\">2</span>, <span class=\"number\">18</span>, <span class=\"number\">9</span>, <span class=\"number\">22</span>, <span class=\"number\">17</span>, <span class=\"number\">24</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">27</span>]</span></div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&gt;&gt;&gt;</span> print filter(lambda <span class=\"symbol\">x:</span> x % <span class=\"number\">3</span> == <span class=\"number\">0</span>, foo)</span></div><div class=\"line\">[<span class=\"number\">18</span>, <span class=\"number\">9</span>, <span class=\"number\">24</span>, <span class=\"number\">12</span>, <span class=\"number\">27</span>]</div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&gt;&gt;&gt;</span> print map(lambda <span class=\"symbol\">x:</span> x * <span class=\"number\">2</span> + <span class=\"number\">10</span>, foo)</span></div><div class=\"line\">[<span class=\"number\">14</span>, <span class=\"number\">46</span>, <span class=\"number\">28</span>, <span class=\"number\">54</span>, <span class=\"number\">44</span>, <span class=\"number\">58</span>, <span class=\"number\">26</span>, <span class=\"number\">34</span>, <span class=\"number\">64</span>]</div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&gt;&gt;&gt;</span> print reduce(lambda x, <span class=\"symbol\">y:</span> x + y, foo)</span></div><div class=\"line\"><span class=\"number\">139</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h2 id=\"非lambda不可？\">非lambda不可？</h2>\n<p>上面例子中的map的作用，和C#的Where扩展方法一样，非常简单方便。但是，Python是否非要使用lambda才能做到这样的简洁程度呢？在对象遍历处理方面，其实Python的for..in..if语法已经很强大，并且在易读上胜过了lambda。比如上面map的例子，可以写成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> [x * <span class=\"number\">2</span> + <span class=\"number\">10</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> foo]</div></pre></td></tr></table></figure>\n\n<p>非常的简洁，易懂。filter的例子可以写成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> foo <span class=\"keyword\">if</span> x % <span class=\"number\">3</span> == <span class=\"number\">0</span>]</div></pre></td></tr></table></figure>\n\n<p>同样也是比lambda的方式更容易理解。<br>所以，什么时候使用lambda，什么时候不用，需要具体情况具体分析，只要表达的意图清晰就好。一般情况下，如果for..in..if能做的，我都不会选择lambda。</p>\n<p><br></p>\n<h2 id=\"lambda_broken?\">lambda broken?</h2>\n<p>在数学教学中，经常会使用到lambda，比如有一位老兄就遇到这样一个问题。他想创建一个函数数组<code>fs=[f0,...,f9] where fi(n)=i+n</code>，于是乎，就定义了这么一个lambda函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs = [(<span class=\"keyword\">lambda</span> n: i + n) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</div></pre></td></tr></table></figure>\n\n<p>但是，奇怪的是，</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; fs[<span class=\"link_label\">3</span>](<span class=\"link_url\">4</span>)</div><div class=\"line\">13</div><div class=\"line\">&gt;&gt;&gt; fs[<span class=\"link_label\">4</span>](<span class=\"link_url\">4</span>)</div><div class=\"line\">13</div><div class=\"line\">&gt;&gt;&gt; fs[<span class=\"link_label\">5</span>](<span class=\"link_url\">4</span>)</div><div class=\"line\">13</div></pre></td></tr></table></figure>\n\n<p>结果并没有达到这位老兄的预期，预期的结果应该是：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt; fs[<span class=\"link_label\">3</span>](<span class=\"link_url\">4</span>)</div><div class=\"line\">7</div><div class=\"line\">&gt;&gt;&gt; fs[<span class=\"link_label\">4</span>](<span class=\"link_url\">4</span>)</div><div class=\"line\">8</div><div class=\"line\">&gt;&gt;&gt; fs[<span class=\"link_label\">5</span>](<span class=\"link_url\">4</span>)</div><div class=\"line\">9</div></pre></td></tr></table></figure>\n\n<p>问题其实出在变量i上。上面的代码换个简单的不使用lambda的缩减版本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">i = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fs</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> n + i</div><div class=\"line\"><span class=\"keyword\">print</span> fs(<span class=\"number\">1</span>) <span class=\"comment\"># 2</span></div><div class=\"line\"></div><div class=\"line\">i = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">print</span> fs(<span class=\"number\">1</span>) <span class=\"comment\"># 3</span></div></pre></td></tr></table></figure>\n\n<p>可见，上面没有达到预期的原因是lambda中的i使用的是匿名函数外的全局变量。修改一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs = [(<span class=\"keyword\">lambda</span> n, i=i : i + n) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</div><div class=\"line\"><span class=\"prompt\">&gt;&gt;&gt; </span>fs[<span class=\"number\">3</span>](<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"number\">7</span></div><div class=\"line\"><span class=\"prompt\">&gt;&gt;&gt; </span>fs[<span class=\"number\">4</span>](<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"number\">8</span></div><div class=\"line\"><span class=\"prompt\">&gt;&gt;&gt; </span>fs[<span class=\"number\">5</span>](<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"number\">9</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-04-20-Python的lambda匿名函数.md","raw":"title: Python的lambda匿名函数\ndate: 2015-04-20 12:26:59\ncategories:\n- Python\ntags:\n- lambda\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/coderzh/archive/2010/04/30/python-cookbook-lambda.html](http://www.cnblogs.com/coderzh/archive/2010/04/30/python-cookbook-lambda.html \"http://www.cnblogs.com/coderzh/archive/2010/04/30/python-cookbook-lambda.html\")\n\n## 介绍 ##\nlambda函数也叫匿名函数，即，函数没有具体的名称。先来看一个最简单例子：\n``` python\ndef f(x):\n    return x**2\n\nprint f(4)\n```\n\nPython中使用lambda的话，写成这样\n``` python\ng = lambda x : x**2\nprint g(4)\n```\n\nlambda表达式在很多编程语言都有对应的实现。比如C#：\n``` cs\nvar g = x => x**2\nConsole.WriteLine(g(4))\n```\n\n那么，lambda表达式有什么用处呢？很多人提出了质疑，lambda和普通的函数相比，就是省去了函数名称而已，同时这样的匿名函数，又不能共享在别的地方调用。其实说的没错，lambda在Python这种动态的语言中确实没有起到什么惊天动地的作用，因为有很多别的方法能够代替lambda。同时，使用lambda的写法有时显得并没有那么pythonic。甚至有人提出之后的Python版本要取消lambda。\n回过头来想想，Python中的lambda真的没有用武之地吗？其实不是的，至少我能想到的点，主要有：\n1. 使用Python写一些执行脚本时，使用lambda可以省去定义函数的过程，让代码更加精简。\n2. 对于一些抽象的，不会别的地方再复用的函数，有时候给函数起个名字也是个难题，使用lambda不需要考虑命名的问题。\n3. 使用lambda在某些时候让代码更容易理解。\n\n<br>\n## lambda基础 ##\nlambda语句中，冒号前是参数，可以有多个，用逗号隔开，冒号右边的返回值。lambda语句构建的其实是一个函数对象，见证一下：\n``` python\ng = lambda x : x**2\nprint g\n\n<function <lambda> at 0x00AFAAF0>\n```\n\nC#3.0开始，也有了lambda表达式，省去了使用delegate的麻烦写法。C#中的lambda表达式关键字是=>，看下面的一个例子：\n``` cs\nvar array = new int[] {2, 3, 5, 7, 9};\nvar result = array.Where(n => n > 3); // [5, 6, 9]\n```\n\nC#使用了扩展方法，才使得数组对象拥有了像Where,Sum之类方便的方法。Python中，也有几个定义好的全局函数方便使用的，他们就是filter, map, reduce。\n```\n>>> foo = [2, 18, 9, 22, 17, 24, 8, 12, 27]\n>>>\n>>> print filter(lambda x: x % 3 == 0, foo)\n[18, 9, 24, 12, 27]\n>>>\n>>> print map(lambda x: x * 2 + 10, foo)\n[14, 46, 28, 54, 44, 58, 26, 34, 64]\n>>>\n>>> print reduce(lambda x, y: x + y, foo)\n139\n```\n\n<br>\n## 非lambda不可？ ##\n上面例子中的map的作用，和C#的Where扩展方法一样，非常简单方便。但是，Python是否非要使用lambda才能做到这样的简洁程度呢？在对象遍历处理方面，其实Python的for..in..if语法已经很强大，并且在易读上胜过了lambda。比如上面map的例子，可以写成：\n``` python\nprint [x * 2 + 10 for x in foo]\n```\n\n非常的简洁，易懂。filter的例子可以写成：\n``` python\nprint [x for x in foo if x % 3 == 0]\n```\n\n同样也是比lambda的方式更容易理解。\n所以，什么时候使用lambda，什么时候不用，需要具体情况具体分析，只要表达的意图清晰就好。一般情况下，如果for..in..if能做的，我都不会选择lambda。\n\n<br>\n## lambda broken? ##\n在数学教学中，经常会使用到lambda，比如有一位老兄就遇到这样一个问题。他想创建一个函数数组`fs=[f0,...,f9] where fi(n)=i+n`，于是乎，就定义了这么一个lambda函数：\n``` python\nfs = [(lambda n: i + n) for i in range(10)]\n```\n\n但是，奇怪的是，\n```\n>>> fs[3](4)\n13\n>>> fs[4](4)\n13\n>>> fs[5](4)\n13\n```\n\n结果并没有达到这位老兄的预期，预期的结果应该是：\n```\n>>> fs[3](4)\n7\n>>> fs[4](4)\n8\n>>> fs[5](4)\n9\n```\n\n问题其实出在变量i上。上面的代码换个简单的不使用lambda的缩减版本：\n``` python\ni = 1\ndef fs(n):\n    return n + i\nprint fs(1) # 2\n\ni = 2\nprint fs(1) # 3\n```\n\n可见，上面没有达到预期的原因是lambda中的i使用的是匿名函数外的全局变量。修改一下：\n``` python\nfs = [(lambda n, i=i : i + n) for i in range(10)]\n>>> fs[3](4)\n7\n>>> fs[4](4)\n8\n>>> fs[5](4)\n9\n```\n","slug":"Python的lambda匿名函数","updated":1431306848000,"excerpt":"","_id":"5zjqpuy8t13fyoj4","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python字符串格式化千分位逗号分隔","date":1431507095000,"categories":["ldi4kaat0baj4vp1"],"tags":["bcy0qwypjvfdesn2","cj3x87kfwlgkedgh","nxcejl8ilwzrar20"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>在显示大数字的时候，通常会每隔三位用逗号分隔开来显示，这样用户就会更加容易识别出数字的大小，这个可以用字符串处理函数<code>format()</code>来实现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"{:,}\"</span>.format(<span class=\"number\">99999999</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 结果</span></div><div class=\"line\"><span class=\"comment\"># 99,999,999</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-05-13-Python字符串格式化千分位逗号分隔.md","raw":"title: Python字符串格式化千分位逗号分隔\ndate: 2015-05-13 16:51:35\ncategories:\n- Python\ntags:\n- 千分位逗号分隔\n- 格式化\n- 字符串\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n在显示大数字的时候，通常会每隔三位用逗号分隔开来显示，这样用户就会更加容易识别出数字的大小，这个可以用字符串处理函数`format()`来实现。\n``` python\nprint \"{:,}\".format(99999999)\n\n# 结果\n# 99,999,999\n```\n","slug":"Python字符串格式化千分位逗号分隔","updated":1431766779000,"excerpt":"","_id":"u5a10r1jwq1rh3td","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt重写paintEvent绘制窗体阴影","date":1431439064000,"categories":["ccfn720olj32wb0n"],"tags":["ycxziuf98rkp8m02","0072x8lllpqntwm2","5lg6u3ckbubdyzp8"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>Qt窗体做阴影效果的方法有很多种，有直接使用带阴影效果美术资源的，这里就不详说这种方法了，还有一种方法就是重写paintEvent绘制阴影的方法。<br><br><br>代码如下: (以下为PyQt代码的实现，C++ Qt实现的方法原理也是一样的。)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">paintEvent</span><span class=\"params\">(self, event)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    绘制阴影</div><div class=\"line\">    :param event:</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    path = QtGui.QPainterPath()</div><div class=\"line\">    path.setFillRule(QtCore.Qt.WindingFill)</div><div class=\"line\">    path.addRect(<span class=\"number\">10</span>, <span class=\"number\">10</span>, self.width() - <span class=\"number\">20</span>, self.height() - <span class=\"number\">20</span>)</div><div class=\"line\">    painter = QtGui.QPainter(self)</div><div class=\"line\">    painter.setRenderHint(QtGui.QPainter.Antialiasing, <span class=\"keyword\">True</span>)</div><div class=\"line\">    painter.fillPath(path, QtGui.QBrush(QtCore.Qt.white))</div><div class=\"line\">    color = QtGui.QColor(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">10</span>):</div><div class=\"line\">        path = QtGui.QPainterPath()</div><div class=\"line\">        path.setFillRule(QtCore.Qt.WindingFill)</div><div class=\"line\">        path.addRect(<span class=\"number\">10</span> - i, <span class=\"number\">10</span> - i, self.width() - (<span class=\"number\">10</span> - i) * <span class=\"number\">2</span>, self.height() - (<span class=\"number\">10</span> - i) * <span class=\"number\">2</span>)</div><div class=\"line\">        color.setAlpha(<span class=\"number\">150</span> - math.sqrt(i) * <span class=\"number\">50</span>)</div><div class=\"line\">        painter.setPen(color)</div><div class=\"line\">        painter.drawPath(path)</div></pre></td></tr></table></figure>\n\n<p>做出来的阴影效果类似于下图:<br><img src=\"http://i.imgur.com/afURmb0.png\" alt=\"效果图\"></p>\n<p><br><br>之前写的一篇自定义Tooltips的文章用的就是这种方法，大家可以参考一下。</p>\n<blockquote>\n<p><a href=\"http://moky.cc/2015/03/17/%E7%BB%98%E5%88%B6%E6%94%AF%E6%8C%81%E5%AF%8C%E6%96%87%E6%9C%AC%E5%B8%A6%E9%98%B4%E5%BD%B1%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E7%9A%84Tooltips/\" target=\"_blank\" rel=\"external\">绘制支持富文本带阴影自适应大小的Tooltips</a></p>\n</blockquote>\n","source":"_posts/2015-05-12-Qt重写paintEvent绘制窗体阴影.md","raw":"title: Qt重写paintEvent绘制窗体阴影\ndate: 2015-05-12 21:57:44\ncategories:\n- PyQt\ntags:\n- Qt\n- paintEvent\n- 绘制阴影\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\nQt窗体做阴影效果的方法有很多种，有直接使用带阴影效果美术资源的，这里就不详说这种方法了，还有一种方法就是重写paintEvent绘制阴影的方法。\n<br>\n代码如下: (以下为PyQt代码的实现，C++ Qt实现的方法原理也是一样的。)\n``` python\n    def paintEvent(self, event):\n        \"\"\"\n        绘制阴影\n        :param event:\n        :return:\n        \"\"\"\n        path = QtGui.QPainterPath()\n        path.setFillRule(QtCore.Qt.WindingFill)\n        path.addRect(10, 10, self.width() - 20, self.height() - 20)\n        painter = QtGui.QPainter(self)\n        painter.setRenderHint(QtGui.QPainter.Antialiasing, True)\n        painter.fillPath(path, QtGui.QBrush(QtCore.Qt.white))\n        color = QtGui.QColor(0, 0, 0, 50)\n        for i in range(0, 10):\n            path = QtGui.QPainterPath()\n            path.setFillRule(QtCore.Qt.WindingFill)\n            path.addRect(10 - i, 10 - i, self.width() - (10 - i) * 2, self.height() - (10 - i) * 2)\n            color.setAlpha(150 - math.sqrt(i) * 50)\n            painter.setPen(color)\n            painter.drawPath(path)\n```\n做出来的阴影效果类似于下图:\n![效果图](http://i.imgur.com/afURmb0.png)\n\n<br>\n之前写的一篇自定义Tooltips的文章用的就是这种方法，大家可以参考一下。\n> [绘制支持富文本带阴影自适应大小的Tooltips](http://moky.cc/2015/03/17/%E7%BB%98%E5%88%B6%E6%94%AF%E6%8C%81%E5%AF%8C%E6%96%87%E6%9C%AC%E5%B8%A6%E9%98%B4%E5%BD%B1%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E7%9A%84Tooltips/)\n","slug":"Qt重写paintEvent绘制窗体阴影","updated":1432714685000,"excerpt":"","_id":"3uxh60a7w5jaykt8","comments":true,"layout":"post","photos":[],"link":""},{"title":"自定义QScrollBar样式","date":1431318985000,"categories":["2zuml5ffoy5vkypb"],"tags":["nmldk4hu366t8ktw","sdwid57j2p3h8k0k","jllo95ybn9c6u65y"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>QScrollBar是Qt日常开发里使用得比较频繁的一个控件，默认的系统样式已经无法满足开发需求，所以我们就需要定义QSS样式自定义QScrollBar的样式了。QScrollBar主要由handle、add-line、sub-line、add-page、sub-page、up-arrow和down-arrow几部分组成，以下为常用的QScrollBar样式设置。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">QScrollBar</span></div><div class=\"line\"><span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> transparent</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">8px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::handle</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background-color</span>:<span class=\"value\"> <span class=\"hexcolor\">#6c7bad</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">border-radius</span>:<span class=\"value\"> <span class=\"number\">4px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::handle</span><span class=\"pseudo\">:hover</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background-color</span>:<span class=\"value\"> <span class=\"hexcolor\">#6a7fc5</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::handle</span><span class=\"pseudo\">:pressed</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background-color</span>:<span class=\"value\"> <span class=\"hexcolor\">#5b75cb</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::add-line</span>, <span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::sub-line</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> transparent</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">0px</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">0px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::add-page</span>, <span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::sub-page</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> transparent</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::up-arrow</span>, <span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::down-arrow</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> transparent</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">0px</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">0px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>运行结果：<br><img src=\"QScrollBar-qss.png\" alt=\"QScrollBar-qss.png\"></p>\n<p><br><br>还有一种是半透明效果的:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">:vertical</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"function\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">100</span>)</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">10px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::handle</span><span class=\"pseudo\">:vertical</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"function\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">180</span>)</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">min-height</span>:<span class=\"value\"> <span class=\"number\">70px</span></span></span>;</div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">border-radius</span>:<span class=\"value\"> <span class=\"number\">5px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::handle</span><span class=\"pseudo\">:vertical</span><span class=\"pseudo\">:hover</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"function\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>)</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::handle</span><span class=\"pseudo\">:vertical</span><span class=\"pseudo\">:pressed</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"function\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">200</span>)</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::add-line</span><span class=\"pseudo\">:vertical</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::sub-line</span><span class=\"pseudo\">:vertical</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::add-page</span><span class=\"pseudo\">:vertical</span>,</div><div class=\"line\"><span class=\"tag\">QScrollBar</span><span class=\"pseudo\">::sub-page</span><span class=\"pseudo\">:vertical</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>运行结果：<br><img src=\"QScrollBar-qss2.png\" alt=\"QScrollBar-qss2.png\"></p>\n","source":"_posts/2015-05-11-自定义QScrollBar样式.md","raw":"title: 自定义QScrollBar样式\ndate: 2015-05-11 12:36:25\ncategories:\n- Qt\ntags:\n- PyQt\n- QSS\n- QScrollBar\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\nQScrollBar是Qt日常开发里使用得比较频繁的一个控件，默认的系统样式已经无法满足开发需求，所以我们就需要定义QSS样式自定义QScrollBar的样式了。QScrollBar主要由handle、add-line、sub-line、add-page、sub-page、up-arrow和down-arrow几部分组成，以下为常用的QScrollBar样式设置。\n\n``` css\nQScrollBar\n{\n    background: transparent;\n    width: 8px;\n}\nQScrollBar::handle {\n    background-color: #6c7bad;\n    border-radius: 4px;\n}\nQScrollBar::handle:hover {\n    background-color: #6a7fc5;\n}\nQScrollBar::handle:pressed {\n    background-color: #5b75cb;\n}\nQScrollBar::add-line, QScrollBar::sub-line {\n    background: transparent;\n    height: 0px;\n    width: 0px;\n}\nQScrollBar::add-page, QScrollBar::sub-page {\n    background: transparent;\n}\nQScrollBar::up-arrow, QScrollBar::down-arrow {\n    background: transparent;\n    height: 0px;\n    width: 0px;\n}\n```\n\n运行结果：\n![QScrollBar-qss.png](QScrollBar-qss.png)\n\n<br>\n还有一种是半透明效果的:\n``` css\nQScrollBar:vertical {\n    background: rgba(0,0,0,100);\n    width: 10px;\n}\nQScrollBar::handle:vertical {\n    background: rgba(255,255,255,180);\n    min-height: 70px;\n\tborder-radius: 5px;\n}\nQScrollBar::handle:vertical:hover {\n    background: rgba(255,255,255,255);\n}\nQScrollBar::handle:vertical:pressed {\n    background: rgba(255,255,255,200);\n}\nQScrollBar::add-line:vertical {\n    background: none;\n}\n\nQScrollBar::sub-line:vertical {\n    background: none;\n}\n\nQScrollBar::add-page:vertical,\nQScrollBar::sub-page:vertical {\n    background: none;\n}\n```\n\n运行结果：\n![QScrollBar-qss2.png](QScrollBar-qss2.png)\n","slug":"自定义QScrollBar样式","updated":1436689636000,"excerpt":"","_id":"jyt1o9wvks4f88sb","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt中鼠标穿透的实现","date":1431594080000,"categories":["2zuml5ffoy5vkypb"],"tags":["ie1edueowa1un0x4"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>在Qt中，QWidget默认是非鼠标穿透的，如果将QWidget覆盖在其他控件上面，即使这个QWidget是透明的，鼠标也是无法点击下面的控件的。但是我们可以通过设置它的属性来实现鼠标穿透，代码如下:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">QWidget::setAttribute(Qt::WA_TransparentForMouseEvents,<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-05-14-Qt中鼠标穿透的实现.md","raw":"title: Qt中鼠标穿透的实现\ndate: 2015-05-14 17:01:20\ncategories:\n- Qt\ntags:\n- 鼠标穿透\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n在Qt中，QWidget默认是非鼠标穿透的，如果将QWidget覆盖在其他控件上面，即使这个QWidget是透明的，鼠标也是无法点击下面的控件的。但是我们可以通过设置它的属性来实现鼠标穿透，代码如下:\n``` cpp\nQWidget::setAttribute(Qt::WA_TransparentForMouseEvents,true);\n```\n","slug":"Qt中鼠标穿透的实现","updated":1431767187000,"excerpt":"","_id":"p8sadt787a28weuo","comments":true,"layout":"post","photos":[],"link":""},{"title":"QTimer和QThread的调度时间精度","date":1431662865000,"categories":["2zuml5ffoy5vkypb"],"tags":["r6ojfrl8s8wakh38","3dbr054fi1tql2ug","b1gu720oehyj990h","kcxnswfk2b1olapy"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/dijunfeng/article/details/7272475\" title=\"http://blog.csdn.net/dijunfeng/article/details/7272475\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dijunfeng/article/details/7272475</a></p>\n</blockquote>\n<p><br><br>最近做的一个模拟嵌入式设备的项目中，要求事件的响应精度在1毫秒左右，特地编写代码测试了一下QTimer和QThread中的msleep函数的时间精度。</p>\n<p>QT的帮助中对于QTimer的时间精度问题是这么写的：</p>\n<blockquote>\n<p>Timers will never time out earlier than the specified timeout value and they are not guaranteed to time out at the exact value specified. In many situations, they may time out late by a period of time that depends on the accuracy of the system timers.</p>\n<p>The accuracy of timers depends on the underlying operating system and hardware. Most platforms support a resolution of 1 millisecond, though the accuracy of the timer will not equal this resolution in many real-world situations.</p>\n<p>If Qt is unable to deliver the requested number of timer clicks, it will silently discard some.</p>\n</blockquote>\n<p><br><br>测试函数用到了windows的高精度时间读取函数，如下所示:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;Windows.h&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;math.h&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> TIMER_INTVL  1000  <span class=\"comment\">//毫秒</span></span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> ARRAY_LEN    1  <span class=\"comment\">//数组长度</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//传入调用时间间隔，打印出最大和平均时间误差</span></div><div class=\"line\"><span class=\"keyword\">void</span> testTimer(<span class=\"keyword\">int</span> intvl_us)</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> inited = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> LARGE_INTEGER lastT;</div><div class=\"line\">    <span class=\"keyword\">static</span> LARGE_INTEGER freq;</div><div class=\"line\">    LARGE_INTEGER now;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> usarray[ARRAY_LEN];</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxus = <span class=\"number\">0</span>, averus = <span class=\"number\">0</span>, difus;<span class=\"comment\">//时间差</span></div><div class=\"line\">    QString info(<span class=\"string\">\"最大时间差：\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!inited)</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"built_in\">memset</span>(usarray, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*ARRAY_LEN);</div><div class=\"line\">        QueryPerformanceCounter(&lastT);<span class=\"comment\">//获取第一次进入时的时间</span></div><div class=\"line\">        QueryPerformanceFrequency(&freq);<span class=\"comment\">//获取时钟频率</span></div><div class=\"line\">        inited = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    }</div><div class=\"line\">    QueryPerformanceCounter(&now);</div><div class=\"line\">    difus = ((now.QuadPart-lastT.QuadPart)*<span class=\"number\">1000000</span>)/freq.QuadPart;</div><div class=\"line\">    difus = <span class=\"built_in\">abs</span>(difus-intvl_us);</div><div class=\"line\">    usarray[index++] = difus;</div><div class=\"line\">    maxus = maxus&gt;difus?maxus:difus;</div><div class=\"line\">    <span class=\"keyword\">if</span>(index == ARRAY_LEN)</div><div class=\"line\">    {</div><div class=\"line\">        index = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;ARRAY_LEN; i++)</div><div class=\"line\">            averus += usarray[i];</div><div class=\"line\">        averus /= ARRAY_LEN;</div><div class=\"line\">        info = info + QString::number(maxus) + <span class=\"string\">\"  平均误差 \"</span> + QString::number(averus);</div><div class=\"line\">        gSimDrvDlg-&gt;putInfo(info);</div><div class=\"line\">        maxus = <span class=\"number\">0</span>;</div><div class=\"line\">        averus = <span class=\"number\">0</span>;</div><div class=\"line\">    }</div><div class=\"line\">    lastT = now;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br><br>把此函数设为QTimer的超时响应函数，在32位windows7下测试QTimer的不同定时周期的调度误差如下：</p>\n<p><strong>1ms周期：</strong><br><em>最大：30、40毫秒<br>平均：100微秒左右</em></p>\n<p><strong>10ms周期：</strong><br><em>最大：2、3毫秒，跳动比较大，也有20毫秒多过<br>平均：200多微秒</em></p>\n<p><strong>100ms周期：</strong><br><em>最大：20多毫秒<br>平均：10毫秒左右</em></p>\n<p><strong>1秒周期：</strong><br><em>误差十几毫秒</em></p>\n<p>把此函数稍加改动，也可以放到QThread的run()函数中测试一下QThread::msleep的时间精度。<br>在windows下，由于操作系统的本身设计理念问题，定时器的调度误差是比较大的。</p>\n","source":"_posts/2015-05-15-QTimer和QThread的调度时间精度.md","raw":"title: QTimer和QThread的调度时间精度\ndate: 2015-05-15 12:07:45\ncategories:\n- Qt\ntags:\n- QTimer\n- QThread\n- 时间精度\n- 计时器精度\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/dijunfeng/article/details/7272475](http://blog.csdn.net/dijunfeng/article/details/7272475 \"http://blog.csdn.net/dijunfeng/article/details/7272475\")\n\n<br>\n最近做的一个模拟嵌入式设备的项目中，要求事件的响应精度在1毫秒左右，特地编写代码测试了一下QTimer和QThread中的msleep函数的时间精度。\n\nQT的帮助中对于QTimer的时间精度问题是这么写的：\n> Timers will never time out earlier than the specified timeout value and they are not guaranteed to time out at the exact value specified. In many situations, they may time out late by a period of time that depends on the accuracy of the system timers.\n> \n> The accuracy of timers depends on the underlying operating system and hardware. Most platforms support a resolution of 1 millisecond, though the accuracy of the timer will not equal this resolution in many real-world situations.\n> \n> If Qt is unable to deliver the requested number of timer clicks, it will silently discard some.\n\n<br>\n测试函数用到了windows的高精度时间读取函数，如下所示:\n``` cpp\n#include <Windows.h>\n#include <math.h>\n#define TIMER_INTVL  1000  //毫秒\n#define ARRAY_LEN    1  //数组长度\n\n//传入调用时间间隔，打印出最大和平均时间误差\nvoid testTimer(int intvl_us)\n{\n    static bool inited = false;\n    static LARGE_INTEGER lastT;\n    static LARGE_INTEGER freq;\n    LARGE_INTEGER now;\n    static int usarray[ARRAY_LEN];\n    static int index = 0;\n    static int maxus = 0, averus = 0, difus;//时间差\n    QString info(\"最大时间差：\");\n    if(!inited)\n    {\n        memset(usarray, 0, sizeof(int)*ARRAY_LEN);\n        QueryPerformanceCounter(&lastT);//获取第一次进入时的时间\n        QueryPerformanceFrequency(&freq);//获取时钟频率\n        inited = true;\n        return;\n    }\n    QueryPerformanceCounter(&now);\n    difus = ((now.QuadPart-lastT.QuadPart)*1000000)/freq.QuadPart;\n    difus = abs(difus-intvl_us);\n    usarray[index++] = difus;\n    maxus = maxus>difus?maxus:difus;\n    if(index == ARRAY_LEN)\n    {\n        index = 0;\n        for(int i=0; i<ARRAY_LEN; i++)\n            averus += usarray[i];\n        averus /= ARRAY_LEN;\n        info = info + QString::number(maxus) + \"  平均误差 \" + QString::number(averus);\n        gSimDrvDlg->putInfo(info);\n        maxus = 0;\n        averus = 0;\n    }\n    lastT = now;\n}\n```\n<br>\n把此函数设为QTimer的超时响应函数，在32位windows7下测试QTimer的不同定时周期的调度误差如下：\n\n**1ms周期：**\n*最大：30、40毫秒\n平均：100微秒左右*\n\n**10ms周期：**\n*最大：2、3毫秒，跳动比较大，也有20毫秒多过\n平均：200多微秒*\n\n**100ms周期：**\n*最大：20多毫秒\n平均：10毫秒左右*\n\n**1秒周期：**\n*误差十几毫秒*\n\n把此函数稍加改动，也可以放到QThread的run()函数中测试一下QThread::msleep的时间精度。\n在windows下，由于操作系统的本身设计理念问题，定时器的调度误差是比较大的。\n","slug":"QTimer和QThread的调度时间精度","updated":1431767634000,"excerpt":"","_id":"jdez5mqfltze4mqw","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt字符串显示不全显示省略号的实现","date":1431764526000,"categories":["ccfn720olj32wb0n"],"tags":["ycxziuf98rkp8m02","yah5vm2u5sbbrryf"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>在使用QLabel显示长文本（如长昵称、简介文本等）的时候，会因为QLabel的固定宽度使一部分文字截断得很不友好，一般的交互处理是在即将截断的文本后面显示省略号，以下为PyQt的实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 根据label截断文本</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_truncatedText</span><span class=\"params\">(self, str_text, label)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> QtGui.QFontMetrics(label.font()).elidedText(str_text, QtCore.Qt.ElideRight, label.width())</div></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 根据截断文本</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_truncatedText</span><span class=\"params\">(self, str_text, width)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> QtGui.QFontMetrics(label.font()).elidedText(str_text, QtCore.Qt.ElideRight, width)</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-05-16-Qt字符串显示不全显示省略号的实现.md","raw":"title: Qt字符串显示不全显示省略号的实现\ndate: 2015-05-16 16:22:06\ncategories:\n- PyQt\ntags:\n- Qt\n- 截断文字\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n在使用QLabel显示长文本（如长昵称、简介文本等）的时候，会因为QLabel的固定宽度使一部分文字截断得很不友好，一般的交互处理是在即将截断的文本后面显示省略号，以下为PyQt的实现：\n``` python\n# 根据label截断文本\ndef _truncatedText(self, str_text, label):\n    return QtGui.QFontMetrics(label.font()).elidedText(str_text, QtCore.Qt.ElideRight, label.width())\n\n```\n或者\n``` python\n# 根据截断文本\ndef _truncatedText(self, str_text, width):\n    return QtGui.QFontMetrics(label.font()).elidedText(str_text, QtCore.Qt.ElideRight, width)\n\n```\n","slug":"Qt字符串显示不全显示省略号的实现","updated":1432714663000,"excerpt":"","_id":"jyyef3adlbkolk92","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt非window子窗体的透明度设置","date":1435844655000,"categories":["2zuml5ffoy5vkypb"],"tags":["0q3x686sq60pwc8e"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/yiyaaixuexi/article/details/6780551\" title=\"http://blog.csdn.net/yiyaaixuexi/article/details/6780551\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/yiyaaixuexi/article/details/6780551</a></p>\n</blockquote>\n<h2 id=\"问题的由来\">问题的由来</h2>\n<p>心血来潮，想利用<code>QTimer</code>配合<code>setWindowOpacity()</code>方法来实现一个窗体淡入的效果。<br><br></p>\n<h2 id=\"实验代码\">实验代码</h2>\n<p>粗糙的实验代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> Widget::on_pushButton_clicked()  </div><div class=\"line\">{  </div><div class=\"line\">   QTimer *timerOpacity = <span class=\"keyword\">new</span> QTimer(<span class=\"keyword\">this</span>);  </div><div class=\"line\">   connect(timerOpacity,SIGNAL(timeout()),<span class=\"keyword\">this</span>,SLOT(changeOpacity()));  </div><div class=\"line\">   timerOpacity-&gt;start(<span class=\"number\">100</span>);  </div><div class=\"line\">}  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">void</span> Widget::changeOpacity()  </div><div class=\"line\">{  </div><div class=\"line\">    <span class=\"keyword\">if</span> (opalevel &gt; <span class=\"number\">8</span>) <span class=\"keyword\">return</span>;  </div><div class=\"line\">    <span class=\"keyword\">double</span> opacity[<span class=\"number\">9</span>] =  {<span class=\"number\">0.9</span>,<span class=\"number\">0.8</span>,<span class=\"number\">0.7</span>,<span class=\"number\">0.6</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.3</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.1</span>};  </div><div class=\"line\">    ui-&gt;stackedWidget-&gt;setWindowOpacity(opacity[opalevel]);  </div><div class=\"line\">    ui-&gt;widget-&gt;setWindowOpacity(opacity[opalevel]);  </div><div class=\"line\">    <span class=\"keyword\">this</span>-&gt;setWindowOpacity(opacity[opalevel]);  </div><div class=\"line\">  </div><div class=\"line\">    qDebug()&lt;&lt;<span class=\"string\">\"opalevel = \"</span>&lt;&lt; opalevel &lt;&lt;<span class=\"string\">\" ui-&gt;widget opacity:\"</span>&lt;&lt;ui-&gt;widget-&gt;windowOpacity();  </div><div class=\"line\">    qDebug()&lt;&lt;<span class=\"string\">\"opalevel = \"</span>&lt;&lt; opalevel &lt;&lt;<span class=\"string\">\" ui-&gt;stackedWidget opacity:\"</span>&lt;&lt;ui-&gt;stackedWidget-&gt;windowOpacity();  </div><div class=\"line\">    qDebug()&lt;&lt;<span class=\"string\">\"opalevel = \"</span>&lt;&lt; opalevel &lt;&lt;<span class=\"string\">\" ui opacity : \"</span>&lt;&lt; <span class=\"keyword\">this</span>-&gt;windowOpacity()&lt;&lt;endl;  </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h2 id=\"实验失败\">实验失败</h2>\n<p>现象是主窗体的有淡入的效果，即透明度有变化，但是子窗体没有，opacity始终为1 。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Log</span> ：</div><div class=\"line\">opalevel <span class=\"subst\">=</span>  <span class=\"number\">0</span>  ui<span class=\"subst\">-&gt;</span>widget opacity: <span class=\"number\">1</span> </div><div class=\"line\">opalevel <span class=\"subst\">=</span>  <span class=\"number\">0</span>  ui<span class=\"subst\">-&gt;</span>stackedWidget opacity: <span class=\"number\">1</span> </div><div class=\"line\">opalevel <span class=\"subst\">=</span>  <span class=\"number\">0</span>  ui opacity  <span class=\"number\">0.898039</span> </div><div class=\"line\"><span class=\"attribute\">...</span><span class=\"attribute\">...</span></div><div class=\"line\"> </div><div class=\"line\">opalevel <span class=\"subst\">=</span>  <span class=\"number\">8</span>  ui<span class=\"subst\">-&gt;</span>widget opacity: <span class=\"number\">1</span> </div><div class=\"line\">opalevel <span class=\"subst\">=</span>  <span class=\"number\">8</span>  ui<span class=\"subst\">-&gt;</span>stackedWidget opacity: <span class=\"number\">1</span> </div><div class=\"line\">opalevel <span class=\"subst\">=</span>  <span class=\"number\">8</span>  ui opacity  <span class=\"number\">0.0980392</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h2 id=\"失败原因\">失败原因</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> QWidget::setWindowOpacity(qreal opacity)  </div><div class=\"line\">{  </div><div class=\"line\">    Q_D(QWidget);  </div><div class=\"line\">    <span class=\"keyword\">if</span> (!isWindow())  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\"><span class=\"comment\">//...  </span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h2 id=\"解决方案\">解决方案</h2>\n<p><code>QGraphicsOpacityEffect</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/ in the constructor  </div><div class=\"line\">opacityEffect = <span class=\"keyword\">new</span> QGraphicsOpacityEffect;  </div><div class=\"line\">ui-&gt;widget-&gt;setGraphicsEffect(opacityEffect);  </div><div class=\"line\">...  </div><div class=\"line\"><span class=\"comment\">// in changeOpacity()  </span></div><div class=\"line\">opacityEffect-&gt;setOpacity(opacity[opalevel]);</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h2 id=\"效果图\">效果图</h2>\n<p><img src=\"http://hi.csdn.net/attachment/201109/15/6157840_1316107114d55K.gif\" alt=\"\"></p>\n","source":"_posts/2015-07-02-Qt非window子窗体的透明度设置.md","raw":"title: Qt非window子窗体的透明度设置\ndate: 2015-07-02 21:44:15\ncategories:\n- Qt\ntags:\n- 透明度\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/yiyaaixuexi/article/details/6780551](http://blog.csdn.net/yiyaaixuexi/article/details/6780551 \"http://blog.csdn.net/yiyaaixuexi/article/details/6780551\")\n\n## 问题的由来\n心血来潮，想利用`QTimer`配合`setWindowOpacity()`方法来实现一个窗体淡入的效果。\n<br>\n## 实验代码\n粗糙的实验代码：\n``` cpp\nvoid Widget::on_pushButton_clicked()  \n{  \n   QTimer *timerOpacity = new QTimer(this);  \n   connect(timerOpacity,SIGNAL(timeout()),this,SLOT(changeOpacity()));  \n   timerOpacity->start(100);  \n}  \n  \nvoid Widget::changeOpacity()  \n{  \n    if (opalevel > 8) return;  \n    double opacity[9] =  {0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1};  \n    ui->stackedWidget->setWindowOpacity(opacity[opalevel]);  \n    ui->widget->setWindowOpacity(opacity[opalevel]);  \n    this->setWindowOpacity(opacity[opalevel]);  \n  \n    qDebug()<<\"opalevel = \"<< opalevel <<\" ui->widget opacity:\"<<ui->widget->windowOpacity();  \n    qDebug()<<\"opalevel = \"<< opalevel <<\" ui->stackedWidget opacity:\"<<ui->stackedWidget->windowOpacity();  \n    qDebug()<<\"opalevel = \"<< opalevel <<\" ui opacity : \"<< this->windowOpacity()<<endl;  \n}\n```\n<br>\n## 实验失败\n现象是主窗体的有淡入的效果，即透明度有变化，但是子窗体没有，opacity始终为1 。\n```\nLog ：\nopalevel =  0  ui->widget opacity: 1 \nopalevel =  0  ui->stackedWidget opacity: 1 \nopalevel =  0  ui opacity  0.898039 \n......\n \nopalevel =  8  ui->widget opacity: 1 \nopalevel =  8  ui->stackedWidget opacity: 1 \nopalevel =  8  ui opacity  0.0980392 \n```\n<br>\n## 失败原因\n``` cpp\nvoid QWidget::setWindowOpacity(qreal opacity)  \n{  \n    Q_D(QWidget);  \n    if (!isWindow())  \n        return;  \n//...  \n}\n```\n<br>\n## 解决方案\n`QGraphicsOpacityEffect`\n``` cpp\n/ in the constructor  \nopacityEffect = new QGraphicsOpacityEffect;  \nui->widget->setGraphicsEffect(opacityEffect);  \n...  \n// in changeOpacity()  \nopacityEffect->setOpacity(opacity[opalevel]);  \n```\n<br>\n## 效果图\n![](http://hi.csdn.net/attachment/201109/15/6157840_1316107114d55K.gif)\n","slug":"Qt非window子窗体的透明度设置","updated":1436795408000,"excerpt":"","_id":"at03tlqg3qbrcwt7","comments":true,"layout":"post","photos":[],"link":""},{"title":"解决 Python ConfigParser 的文件编码问题","date":1435930345000,"categories":["ldi4kaat0baj4vp1"],"tags":["qo2eoio4u26wvbes","nhjv36aln5z9t26z"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://laochake.iteye.com/blog/443704\" title=\"http://laochake.iteye.com/blog/443704\" target=\"_blank\" rel=\"external\">http://laochake.iteye.com/blog/443704</a></p>\n</blockquote>\n<p>配置文件编码为UTF-8，内容如下：<br>Cfg.ini代码:</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">[section1]</span>  </div><div class=\"line\"><span class=\"setting\">p1=<span class=\"value\">中文字符串</span></span></div></pre></td></tr></table></figure>\n\n<p>如果用<code>config.readfp(open(&#39;cfg.ini&#39;))</code>，会出现乱码问题</p>\n<p>因为open函数不能指定编码，所以改用<code>codecs.open</code>，指定编码为utf-8，在eclipse pydev下测试通过。</p>\n<p>但因为UTF-8文本文件有两种格式：<code>带BOM</code>和<code>不带BOM</code></p>\n<p>而windows 记事本保存时只支持带BOM格式，为了兼容用记事本编辑过的文件能被正确读取，<br>最好把编码指定为<code>utf-8-sig</code>，完整的代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> codecs  </div><div class=\"line\"><span class=\"keyword\">import</span> ConfigParser  </div><div class=\"line\"> </div><div class=\"line\">cfgfile=<span class=\"string\">\"cfg.ini\"</span>  </div><div class=\"line\">config = ConfigParser.ConfigParser()  </div><div class=\"line\">config.readfp(codecs.open(cfgfile, <span class=\"string\">\"r\"</span>, <span class=\"string\">\"utf-8-sig\"</span>))  </div><div class=\"line\">p1 = config.get(<span class=\"string\">\"section1\"</span>,<span class=\"string\">\"p1\"</span>)  </div><div class=\"line\"><span class=\"keyword\">print</span> p1</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-07-03-解决-Python-ConfigParser-的文件编码问题.md","raw":"title: 解决 Python ConfigParser 的文件编码问题\ndate: 2015-07-03 21:32:25\ncategories:\n- Python\ntags:\n- ConfigParser\n- 文件编码\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://laochake.iteye.com/blog/443704](http://laochake.iteye.com/blog/443704 \"http://laochake.iteye.com/blog/443704\")\n\n配置文件编码为UTF-8，内容如下：\nCfg.ini代码:\n``` ini\n[section1]  \np1=中文字符串  \n```\n\n如果用`config.readfp(open('cfg.ini'))`，会出现乱码问题\n\n因为open函数不能指定编码，所以改用`codecs.open`，指定编码为utf-8，在eclipse pydev下测试通过。\n\n但因为UTF-8文本文件有两种格式：`带BOM`和`不带BOM`\n\n而windows 记事本保存时只支持带BOM格式，为了兼容用记事本编辑过的文件能被正确读取，\n最好把编码指定为`utf-8-sig`，完整的代码如下：\n``` python\nimport codecs  \nimport ConfigParser  \n \ncfgfile=\"cfg.ini\"  \nconfig = ConfigParser.ConfigParser()  \nconfig.readfp(codecs.open(cfgfile, \"r\", \"utf-8-sig\"))  \np1 = config.get(\"section1\",\"p1\")  \nprint p1\n```\n","slug":"解决-Python-ConfigParser-的文件编码问题","updated":1436794515000,"excerpt":"","_id":"ep5heraxgxkffo5l","comments":true,"layout":"post","photos":[],"link":""},{"title":"单例模式及C++实现代码","date":1436016059000,"categories":["7szs0nee4z8h0y8w"],"tags":["p97l8pgjp49g1kf1","frg3uhagpg3ifeth"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://www.cnblogs.com/cxjchen/p/3148582.html\" title=\"http://www.cnblogs.com/cxjchen/p/3148582.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/cxjchen/p/3148582.html</a></p>\n</blockquote>\n<h2 id=\"单例模式\">单例模式</h2>\n<p>单例模式，可以说设计模式中最常应用的一种模式了，据说也是面试官最喜欢的题目。但是如果没有学过设计模式的人，可能不会想到要去应用单例模式，面对单例模式适用的情况，可能会优先考虑使用全局或者静态变量的方式，这样比较简单，也是没学过设计模式的人所能想到的最简单的方式了。</p>\n<p>一般情况下，我们建立的一些类是属于工具性质的，基本不用存储太多的跟自身有关的数据，在这种情况下，每次都去new一个对象，即增加了开销，也使得代码更加臃肿。其实，我们只需要一个实例对象就可以。如果采用全局或者静态变量的方式，会影响封装性，难以保证别的代码不会对全局变量造成影响。</p>\n<p>考虑到这些需要，我们将默认的构造函数声明为私有的，这样就不会被外部所new了，甚至可以将析构函数也声明为私有的，这样就只有自己能够删除自己了。在Java和C#这样纯的面向对象的语言中，单例模式非常好实现，直接就可以在静态区初始化instance，然后通过getInstance返回，这种就被称为饿汉式单例类。也有些写法是在getInstance中new instance然后返回，这种就被称为懒汉式单例类，但这涉及到第一次getInstance的一个判断问题。</p>\n<p>下面的代码只是表示一下，跟具体哪种语言没有关系。</p>\n<p>单线程中：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Singleton* getInstance()</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">if</span> (instance == NULL)</div><div class=\"line\">        instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br><br>这样就可以了，保证只取得了一个实例。但是在多线程的环境下却不行了，因为很可能两个线程同时运行到if (instance == NULL)这一句，导致可能会产生两个实例。于是就要在代码中加锁。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Singleton* getInstance()</div><div class=\"line\">{</div><div class=\"line\">    lock();</div><div class=\"line\">    <span class=\"keyword\">if</span> (instance == NULL)</div><div class=\"line\">    {</div><div class=\"line\">       instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    }</div><div class=\"line\">    unlock();</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br><br>但这样写的话，会稍稍映像性能，因为每次判断是否为空都需要被锁定，如果有很多线程的话，就爱会造成大量线程的阻塞。于是大神们又想出了双重锁定。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Singleton* getInstance()</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">if</span> (instance == NULL)</div><div class=\"line\">    {</div><div class=\"line\">\tlock();</div><div class=\"line\">    \t<span class=\"keyword\">if</span> (instance == NULL)</div><div class=\"line\">    \t{</div><div class=\"line\">       \t\tinstance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">    \t}</div><div class=\"line\">    \tunlock();</div><div class=\"line\">    }</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br><br>这样只够极低的几率下，通过越过了if (instance == NULL)的线程才会有进入锁定临界区的可能性，这种几率还是比较低的，不会阻塞太多的线程，但为了防止一个线程进入临界区创建实例，另外的线程也进去临界区创建实例，又加上了一道防御if (instance == NULL)，这样就确保不会重复创建了。<br><br></p>\n<h2 id=\"常用的场景\">常用的场景</h2>\n<p>单例模式常常与工厂模式结合使用，因为工厂只需要创建产品实例就可以了，在多线程的环境下也不会造成任何的冲突，因此只需要一个工厂实例就可以了。<br><br></p>\n<h2 id=\"优点\">优点</h2>\n<ol>\n<li>减少了时间和空间的开销（new实例的开销）。</li>\n<li>提高了封装性，使得外部不易改动实例。</li>\n</ol>\n<p><br></p>\n<h2 id=\"缺点\">缺点</h2>\n<ol>\n<li>懒汉式是以时间换空间的方式。</li>\n<li>饿汉式是以空间换时间的方式。</li>\n</ol>\n<p><br></p>\n<h2 id=\"C++实现代码\">C++实现代码</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Singleton.h</span></div><div class=\"line\"><span class=\"preprocessor\">#ifndef _SINGLETON_H_</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> _SINGLETON_H_</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">class</span> Singleton{</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">\t<span class=\"keyword\">static</span> Singleton* getInstance();</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">\tSingleton();</div><div class=\"line\">\t<span class=\"comment\">//把复制构造函数和=操作符也设为私有,防止被复制</span></div><div class=\"line\">\tSingleton(<span class=\"keyword\">const</span> Singleton&);</div><div class=\"line\">\tSingleton& <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Singleton&);</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">static</span> Singleton* instance;</div><div class=\"line\">};</div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Singleton.cpp</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"Singleton.h\"</span></div><div class=\"line\"> </div><div class=\"line\">Singleton::Singleton(){</div><div class=\"line\">}</div><div class=\"line\"> </div><div class=\"line\">Singleton::Singleton(<span class=\"keyword\">const</span> Singleton&){</div><div class=\"line\">}</div><div class=\"line\"> </div><div class=\"line\">Singleton& Singleton::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Singleton&){</div><div class=\"line\">}</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//在此处初始化</span></div><div class=\"line\">Singleton* Singleton::instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">Singleton* Singleton::getInstance(){</div><div class=\"line\">\t<span class=\"keyword\">return</span> instance;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//main.cpp</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"Singleton.h\"</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;stdio.h&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">int</span> main(){</div><div class=\"line\">\tSingleton* singleton1 = Singleton::getInstance();</div><div class=\"line\">\tSingleton* singleton2 = Singleton::getInstance();</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">if</span> (singleton1 == singleton2)</div><div class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(stderr,<span class=\"string\">\"singleton1 = singleton2\\n\"</span>);</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-07-04-单例模式及C-实现代码.md","raw":"title: 单例模式及C++实现代码\ndate: 2015-07-04 21:20:59\ncategories:\n- C++\ntags:\n- 单例模式\n- singleton\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://www.cnblogs.com/cxjchen/p/3148582.html](http://www.cnblogs.com/cxjchen/p/3148582.html \"http://www.cnblogs.com/cxjchen/p/3148582.html\")\n\n## 单例模式\n单例模式，可以说设计模式中最常应用的一种模式了，据说也是面试官最喜欢的题目。但是如果没有学过设计模式的人，可能不会想到要去应用单例模式，面对单例模式适用的情况，可能会优先考虑使用全局或者静态变量的方式，这样比较简单，也是没学过设计模式的人所能想到的最简单的方式了。\n\n一般情况下，我们建立的一些类是属于工具性质的，基本不用存储太多的跟自身有关的数据，在这种情况下，每次都去new一个对象，即增加了开销，也使得代码更加臃肿。其实，我们只需要一个实例对象就可以。如果采用全局或者静态变量的方式，会影响封装性，难以保证别的代码不会对全局变量造成影响。\n\n考虑到这些需要，我们将默认的构造函数声明为私有的，这样就不会被外部所new了，甚至可以将析构函数也声明为私有的，这样就只有自己能够删除自己了。在Java和C#这样纯的面向对象的语言中，单例模式非常好实现，直接就可以在静态区初始化instance，然后通过getInstance返回，这种就被称为饿汉式单例类。也有些写法是在getInstance中new instance然后返回，这种就被称为懒汉式单例类，但这涉及到第一次getInstance的一个判断问题。\n\n下面的代码只是表示一下，跟具体哪种语言没有关系。\n\n单线程中：\n``` cpp\nSingleton* getInstance()\n{\n    if (instance == NULL)\n        instance = new Singleton();\n \n    return instance;\n}\n```\n<br>\n这样就可以了，保证只取得了一个实例。但是在多线程的环境下却不行了，因为很可能两个线程同时运行到if (instance == NULL)这一句，导致可能会产生两个实例。于是就要在代码中加锁。\n``` cpp\nSingleton* getInstance()\n{\n    lock();\n    if (instance == NULL)\n    {\n       instance = new Singleton();\n    }\n    unlock();\n \n    return instance;\n}\n```\n<br>\n但这样写的话，会稍稍映像性能，因为每次判断是否为空都需要被锁定，如果有很多线程的话，就爱会造成大量线程的阻塞。于是大神们又想出了双重锁定。\n``` cpp\nSingleton* getInstance()\n{\n    if (instance == NULL)\n    {\n\tlock();\n    \tif (instance == NULL)\n    \t{\n       \t\tinstance = new Singleton();\n    \t}\n    \tunlock();\n    }\n \n    return instance;\n}\n```\n<br>\n这样只够极低的几率下，通过越过了if (instance == NULL)的线程才会有进入锁定临界区的可能性，这种几率还是比较低的，不会阻塞太多的线程，但为了防止一个线程进入临界区创建实例，另外的线程也进去临界区创建实例，又加上了一道防御if (instance == NULL)，这样就确保不会重复创建了。 \n<br>\n## 常用的场景\n单例模式常常与工厂模式结合使用，因为工厂只需要创建产品实例就可以了，在多线程的环境下也不会造成任何的冲突，因此只需要一个工厂实例就可以了。\n<br>\n## 优点\n1. 减少了时间和空间的开销（new实例的开销）。\n2. 提高了封装性，使得外部不易改动实例。\n\n<br>\n## 缺点\n1. 懒汉式是以时间换空间的方式。\n2. 饿汉式是以空间换时间的方式。\n\n<br>\n## C++实现代码\n``` cpp\n//Singleton.h\n#ifndef _SINGLETON_H_\n#define _SINGLETON_H_\n \nclass Singleton{\npublic:\n\tstatic Singleton* getInstance();\n \nprivate:\n\tSingleton();\n\t//把复制构造函数和=操作符也设为私有,防止被复制\n\tSingleton(const Singleton&);\n\tSingleton& operator=(const Singleton&);\n \n\tstatic Singleton* instance;\n};\n#endif\n```\n\n``` cpp\n//Singleton.cpp\n#include \"Singleton.h\"\n \nSingleton::Singleton(){\n}\n \nSingleton::Singleton(const Singleton&){\n}\n \nSingleton& Singleton::operator=(const Singleton&){\n}\n \n//在此处初始化\nSingleton* Singleton::instance = new Singleton();\nSingleton* Singleton::getInstance(){\n\treturn instance;\n}\n``` \n\n``` cpp\n//main.cpp\n#include \"Singleton.h\"\n#include <stdio.h>\n  \nint main(){\n\tSingleton* singleton1 = Singleton::getInstance();\n\tSingleton* singleton2 = Singleton::getInstance();\n \n\tif (singleton1 == singleton2)\n\t\tfprintf(stderr,\"singleton1 = singleton2\\n\");\n \n\treturn 0;\n}\n```\n","slug":"单例模式及C-实现代码","updated":1436794237000,"excerpt":"","_id":"fszvq0tnl8mvrvc4","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt制作Aero特效窗口","date":1436187818000,"categories":["2zuml5ffoy5vkypb"],"tags":["zf6o7sehamgzfu3h","d692tbsiqm52whzs"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/huihui1988/article/details/5601497\" title=\"http://blog.csdn.net/huihui1988/article/details/5601497\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huihui1988/article/details/5601497</a></p>\n</blockquote>\n<p>初学QT，边看书边自己做点小东西。最近突然心血来潮，想自己做个小巧点的，界面美观一点的备忘当桌面上。想了半天，发现VISTA/WIN7的Aero效果就不错，况且自己现在就在用WIN7。于是上网找了下QT制作Aero效果的方法。Google之后终于找到了函数和用法。于是做了一个简单的Aero特效窗口。</p>\n<p>以下是头文件和实现文件：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//qtwin.h  </span></div><div class=\"line\"><span class=\"preprocessor\">#ifndef QTWIN_H  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> QTWIN_H  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QColor&gt;  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QWidget&gt;  </span></div><div class=\"line\"><span class=\"keyword\">class</span> WindowNotifier;  </div><div class=\"line\"><span class=\"keyword\">class</span> QtWin  </div><div class=\"line\">{  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> enableAeroWindow(QWidget *widget, <span class=\"keyword\">bool</span> enable = <span class=\"keyword\">true</span>);  </div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> extendFrameIntoClientArea(QWidget *widget,  </div><div class=\"line\">                                          <span class=\"keyword\">int</span> left = -<span class=\"number\">1</span>, <span class=\"keyword\">int</span> top = -<span class=\"number\">1</span>,  </div><div class=\"line\">                                          <span class=\"keyword\">int</span> right = -<span class=\"number\">1</span>, <span class=\"keyword\">int</span> bottom = -<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> isCompositionEnabled();  </div><div class=\"line\">    <span class=\"keyword\">static</span> QColor colorizatinColor();  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    <span class=\"keyword\">static</span> WindowNotifier *windowNotifier();  </div><div class=\"line\">};  </div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// QTWIN_H</span></span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//qtwin.cpp  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"qtwin.h\"  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QLibrary&gt;  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QApplication&gt;  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QWidget&gt;  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QList&gt;  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QPointer&gt;  </span></div><div class=\"line\"><span class=\"preprocessor\">#ifdef Q_WS_WIN  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;qt_windows.h&gt;  </span></div><div class=\"line\"><span class=\"comment\">// Blur behind data structures  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> DWM_BB_ENABLE                 0x00000001  <span class=\"comment\">// fEnable has been specified  </span></span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> DWM_BB_BLURREGION             0x00000002  <span class=\"comment\">// hRgnBlur has been specified  </span></span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> DWM_BB_TRANSITIONONMAXIMIZED  0x00000004  <span class=\"comment\">// fTransitionOnMaximized has been specified  </span></span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> WM_DWMCOMPOSITIONCHANGED        0x031E    <span class=\"comment\">// Composition changed window message  </span></span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _DWM_BLURBEHIND  </div><div class=\"line\">{  </div><div class=\"line\">    DWORD dwFlags;  </div><div class=\"line\">    BOOL fEnable;  </div><div class=\"line\">    HRGN hRgnBlur;  </div><div class=\"line\">    BOOL fTransitionOnMaximized;  </div><div class=\"line\">} DWM_BLURBEHIND, *PDWM_BLURBEHIND;  </div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _MARGINS  </div><div class=\"line\">{  </div><div class=\"line\">    <span class=\"keyword\">int</span> cxLeftWidth;  </div><div class=\"line\">    <span class=\"keyword\">int</span> cxRightWidth;  </div><div class=\"line\">    <span class=\"keyword\">int</span> cyTopHeight;  </div><div class=\"line\">    <span class=\"keyword\">int</span> cyBottomHeight;  </div><div class=\"line\">} MARGINS, *PMARGINS;  </div><div class=\"line\"><span class=\"keyword\">typedef</span> HRESULT (WINAPI *PtrDwmIsCompositionEnabled)(BOOL* pfEnabled);  </div><div class=\"line\"><span class=\"keyword\">typedef</span> HRESULT (WINAPI *PtrDwmExtendFrameIntoClientArea)(HWND hWnd, <span class=\"keyword\">const</span> MARGINS* pMarInset);  </div><div class=\"line\"><span class=\"keyword\">typedef</span> HRESULT (WINAPI *PtrDwmenableAeroWindow)(HWND hWnd, <span class=\"keyword\">const</span> DWM_BLURBEHIND* pBlurBehind);  </div><div class=\"line\"><span class=\"keyword\">typedef</span> HRESULT (WINAPI *PtrDwmGetColorizationColor)(DWORD *pcrColorization, BOOL *pfOpaqueBlend);  </div><div class=\"line\"><span class=\"keyword\">static</span> PtrDwmIsCompositionEnabled pDwmIsCompositionEnabled= <span class=\"number\">0</span>;  </div><div class=\"line\"><span class=\"keyword\">static</span> PtrDwmenableAeroWindow pDwmenableAeroWindow = <span class=\"number\">0</span>;  </div><div class=\"line\"><span class=\"keyword\">static</span> PtrDwmExtendFrameIntoClientArea pDwmExtendFrameIntoClientArea = <span class=\"number\">0</span>;  </div><div class=\"line\"><span class=\"keyword\">static</span> PtrDwmGetColorizationColor pDwmGetColorizationColor = <span class=\"number\">0</span>;  </div><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\"> *同步响应DWM状态消息 </div><div class=\"line\"> */  </div><div class=\"line\"><span class=\"keyword\">class</span> WindowNotifier : <span class=\"keyword\">public</span> QWidget  </div><div class=\"line\">{  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">    WindowNotifier() { winId(); }  </div><div class=\"line\">    <span class=\"keyword\">void</span> addWidget(QWidget *widget) { widgets.append(widget); }  </div><div class=\"line\">    <span class=\"keyword\">void</span> removeWidget(QWidget *widget) { widgets.removeAll(widget); }  </div><div class=\"line\">    <span class=\"keyword\">bool</span> winEvent(MSG *message, <span class=\"keyword\">long</span> *result);  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    QWidgetList widgets;  </div><div class=\"line\">};  </div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> resolveLibs()  </div><div class=\"line\">{  </div><div class=\"line\">    <span class=\"keyword\">if</span> (!pDwmIsCompositionEnabled) {  </div><div class=\"line\">        QLibrary dwmLib(QString::fromAscii(<span class=\"string\">\"dwmapi\"</span>));  </div><div class=\"line\">        pDwmIsCompositionEnabled =(PtrDwmIsCompositionEnabled)dwmLib.resolve(<span class=\"string\">\"DwmIsCompositionEnabled\"</span>);  </div><div class=\"line\">        pDwmExtendFrameIntoClientArea = (PtrDwmExtendFrameIntoClientArea)dwmLib.resolve(<span class=\"string\">\"DwmExtendFrameIntoClientArea\"</span>);  </div><div class=\"line\">        pDwmenableAeroWindow = (PtrDwmenableAeroWindow)dwmLib.resolve(<span class=\"string\">\"DwmenableAeroWindow\"</span>);  </div><div class=\"line\">        pDwmGetColorizationColor = (PtrDwmGetColorizationColor)dwmLib.resolve(<span class=\"string\">\"DwmGetColorizationColor\"</span>);  </div><div class=\"line\">    }  </div><div class=\"line\">    <span class=\"keyword\">return</span> pDwmIsCompositionEnabled != <span class=\"number\">0</span>;  </div><div class=\"line\">}  </div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span>  </span></div><div class=\"line\"><span class=\"comment\">/*! </span></div><div class=\"line\">  * 检查 DWM 是否开启 </div><div class=\"line\">  * </div><div class=\"line\">  */  </div><div class=\"line\"><span class=\"keyword\">bool</span> QtWin::isCompositionEnabled()  </div><div class=\"line\">{  </div><div class=\"line\"><span class=\"preprocessor\">#ifdef Q_WS_WIN  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resolveLibs()) {  </div><div class=\"line\">        HRESULT hr = S_OK;  </div><div class=\"line\">        BOOL isEnabled = <span class=\"keyword\">false</span>;  </div><div class=\"line\">        hr = pDwmIsCompositionEnabled(&isEnabled);  </div><div class=\"line\">        <span class=\"keyword\">if</span> (SUCCEEDED(hr))  </div><div class=\"line\">            <span class=\"keyword\">return</span> isEnabled;  </div><div class=\"line\">    }  </div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span>  </span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </div><div class=\"line\">}  </div><div class=\"line\"><span class=\"comment\">/*! </span></div><div class=\"line\">  * 对一个widget实现Aero效果. </div><div class=\"line\">  * </div><div class=\"line\">  */  </div><div class=\"line\"><span class=\"keyword\">bool</span> QtWin::enableAeroWindow(QWidget *widget, <span class=\"keyword\">bool</span> enable)  </div><div class=\"line\">{  </div><div class=\"line\">    Q_ASSERT(widget);  </div><div class=\"line\">    <span class=\"keyword\">bool</span> result = <span class=\"keyword\">false</span>;  </div><div class=\"line\"><span class=\"preprocessor\">#ifdef Q_WS_WIN  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resolveLibs()) {  </div><div class=\"line\">        DWM_BLURBEHIND bb = {<span class=\"number\">0</span>};  </div><div class=\"line\">        HRESULT hr = S_OK;  </div><div class=\"line\">        bb.fEnable = enable;  </div><div class=\"line\">        bb.dwFlags = DWM_BB_ENABLE;  </div><div class=\"line\">        bb.hRgnBlur = NULL;  </div><div class=\"line\">        widget-&gt;setAttribute(Qt::WA_TranslucentBackground, enable);  </div><div class=\"line\">        widget-&gt;setAttribute(Qt::WA_NoSystemBackground, enable);  </div><div class=\"line\">        hr = pDwmenableAeroWindow(widget-&gt;winId(), &bb);  </div><div class=\"line\">        <span class=\"keyword\">if</span> (SUCCEEDED(hr)) {  </div><div class=\"line\">            result = <span class=\"keyword\">true</span>;  </div><div class=\"line\">            windowNotifier()-&gt;addWidget(widget);  </div><div class=\"line\">        }  </div><div class=\"line\">    }  </div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span>  </span></div><div class=\"line\">    <span class=\"keyword\">return</span> result;  </div><div class=\"line\">}  </div><div class=\"line\"><span class=\"comment\">/*! </span></div><div class=\"line\">  * 设置Aero绘图区 </div><div class=\"line\">  */  </div><div class=\"line\"><span class=\"keyword\">bool</span> QtWin::extendFrameIntoClientArea(QWidget *widget, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)  </div><div class=\"line\">{  </div><div class=\"line\">    Q_ASSERT(widget);  </div><div class=\"line\">    Q_UNUSED(left);  </div><div class=\"line\">    Q_UNUSED(top);  </div><div class=\"line\">    Q_UNUSED(right);  </div><div class=\"line\">    Q_UNUSED(bottom);  </div><div class=\"line\">    <span class=\"keyword\">bool</span> result = <span class=\"keyword\">false</span>;  </div><div class=\"line\"><span class=\"preprocessor\">#ifdef Q_WS_WIN  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resolveLibs()) {  </div><div class=\"line\">        QLibrary dwmLib(QString::fromAscii(<span class=\"string\">\"dwmapi\"</span>));  </div><div class=\"line\">        HRESULT hr = S_OK;  </div><div class=\"line\">        MARGINS m = {left, top, right, bottom};  </div><div class=\"line\">        hr = pDwmExtendFrameIntoClientArea(widget-&gt;winId(), &m);  </div><div class=\"line\">        <span class=\"keyword\">if</span> (SUCCEEDED(hr)) {  </div><div class=\"line\">            result = <span class=\"keyword\">true</span>;  </div><div class=\"line\">            windowNotifier()-&gt;addWidget(widget);  </div><div class=\"line\">        }  </div><div class=\"line\">        widget-&gt;setAttribute(Qt::WA_TranslucentBackground, result);  </div><div class=\"line\">    }  </div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span>  </span></div><div class=\"line\">    <span class=\"keyword\">return</span> result;  </div><div class=\"line\">}  </div><div class=\"line\"><span class=\"comment\">/*! </span></div><div class=\"line\">  * 返回当前窗口颜色. </div><div class=\"line\">  */  </div><div class=\"line\">QColor QtWin::colorizatinColor()  </div><div class=\"line\">{  </div><div class=\"line\">    QColor resultColor = QApplication::palette().window().color();  </div><div class=\"line\"><span class=\"preprocessor\">#ifdef Q_WS_WIN  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resolveLibs()) {  </div><div class=\"line\">        DWORD color = <span class=\"number\">0</span>;  </div><div class=\"line\">        BOOL opaque = FALSE;  </div><div class=\"line\">        QLibrary dwmLib(QString::fromAscii(<span class=\"string\">\"dwmapi\"</span>));  </div><div class=\"line\">        HRESULT hr = S_OK;  </div><div class=\"line\">        hr = pDwmGetColorizationColor(&color, &opaque);  </div><div class=\"line\">        <span class=\"keyword\">if</span> (SUCCEEDED(hr))  </div><div class=\"line\">            resultColor = QColor(color);  </div><div class=\"line\">    }  </div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span>  </span></div><div class=\"line\">    <span class=\"keyword\">return</span> resultColor;  </div><div class=\"line\">}  </div><div class=\"line\"><span class=\"preprocessor\">#ifdef Q_WS_WIN  </span></div><div class=\"line\">WindowNotifier *QtWin::windowNotifier()  </div><div class=\"line\">{  </div><div class=\"line\">    <span class=\"keyword\">static</span> WindowNotifier *windowNotifierInstance = <span class=\"number\">0</span>;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (!windowNotifierInstance)  </div><div class=\"line\">        windowNotifierInstance = <span class=\"keyword\">new</span> WindowNotifier;  </div><div class=\"line\">    <span class=\"keyword\">return</span> windowNotifierInstance;  </div><div class=\"line\">}  </div><div class=\"line\"><span class=\"comment\">/* 所有窗口响应 DWM 状态变换消息 */</span>  </div><div class=\"line\"><span class=\"keyword\">bool</span> WindowNotifier::winEvent(MSG *message, <span class=\"keyword\">long</span> *result)  </div><div class=\"line\">{  </div><div class=\"line\">    <span class=\"keyword\">if</span> (message && message-&gt;message == WM_DWMCOMPOSITIONCHANGED) {  </div><div class=\"line\">        <span class=\"keyword\">bool</span> compositionEnabled = QtWin::isCompositionEnabled();  </div><div class=\"line\">        foreach(QWidget * widget, widgets) {  </div><div class=\"line\">            <span class=\"keyword\">if</span> (widget) {  </div><div class=\"line\">                widget-&gt;setAttribute(Qt::WA_NoSystemBackground, compositionEnabled);  </div><div class=\"line\">            }  </div><div class=\"line\">            widget-&gt;update();  </div><div class=\"line\">        }  </div><div class=\"line\">    }  </div><div class=\"line\">    <span class=\"keyword\">return</span> QWidget::winEvent(message, result);  </div><div class=\"line\">}  </div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//main.cpp</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QtGui/QApplication&gt;  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"widget.h\"  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"qtwin.h\"  </span></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])  </div><div class=\"line\">{  </div><div class=\"line\">    QApplication a(argc, argv);  </div><div class=\"line\">    Widget window;  </div><div class=\"line\">    window.setGeometry(<span class=\"number\">1040</span>,<span class=\"number\">0</span>,<span class=\"number\">240</span>,<span class=\"number\">120</span>);  </div><div class=\"line\">    window.setWindowFlags(Qt::CustomizeWindowHint);  </div><div class=\"line\"><span class=\"preprocessor\">#ifdef Q_WS_X11  </span></div><div class=\"line\">    window.setAttribute(Qt::WA_TranslucentBackground);  </div><div class=\"line\">    window.setAttribute(Qt::WA_NoSystemBackground, <span class=\"keyword\">false</span>);  </div><div class=\"line\">    QPalette pal = window.palette();  </div><div class=\"line\">    QColor bg = pal.window().color();  </div><div class=\"line\">    bg.setAlpha(<span class=\"number\">180</span>);  </div><div class=\"line\">    pal.setColor(QPalette::Window, bg);  </div><div class=\"line\">    window.setPalette(pal);  </div><div class=\"line\">    window.ensurePolished(); <span class=\"comment\">// workaround Oxygen filling the background  </span></div><div class=\"line\">    window.setAttribute(Qt::WA_StyledBackground, <span class=\"keyword\">false</span>);  </div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span>  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (QtWin::isCompositionEnabled()) {  </div><div class=\"line\">        QtWin::extendFrameIntoClientArea(&window);  </div><div class=\"line\">        window.setContentsMargins(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);  </div><div class=\"line\">    }  </div><div class=\"line\">    window.show();  </div><div class=\"line\">    <span class=\"keyword\">return</span> a.exec();  </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-07-06-Qt制作Aero特效窗口.md","raw":"title: Qt制作Aero特效窗口\ndate: 2015-07-06 21:03:38\ncategories:\n- Qt\ntags:\n- Aero\n- 毛玻璃\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/huihui1988/article/details/5601497](http://blog.csdn.net/huihui1988/article/details/5601497 \"http://blog.csdn.net/huihui1988/article/details/5601497\")\n\n初学QT，边看书边自己做点小东西。最近突然心血来潮，想自己做个小巧点的，界面美观一点的备忘当桌面上。想了半天，发现VISTA/WIN7的Aero效果就不错，况且自己现在就在用WIN7。于是上网找了下QT制作Aero效果的方法。Google之后终于找到了函数和用法。于是做了一个简单的Aero特效窗口。\n\n以下是头文件和实现文件：\n``` cpp\n//qtwin.h  \n#ifndef QTWIN_H  \n#define QTWIN_H  \n#include <QColor>  \n#include <QWidget>  \nclass WindowNotifier;  \nclass QtWin  \n{  \npublic:  \n    static bool enableAeroWindow(QWidget *widget, bool enable = true);  \n    static bool extendFrameIntoClientArea(QWidget *widget,  \n                                          int left = -1, int top = -1,  \n                                          int right = -1, int bottom = -1);  \n    static bool isCompositionEnabled();  \n    static QColor colorizatinColor();  \nprivate:  \n    static WindowNotifier *windowNotifier();  \n};  \n#endif // QTWIN_H \n```\n\n``` cpp\n//qtwin.cpp  \n#include \"qtwin.h\"  \n#include <QLibrary>  \n#include <QApplication>  \n#include <QWidget>  \n#include <QList>  \n#include <QPointer>  \n#ifdef Q_WS_WIN  \n#include <qt_windows.h>  \n// Blur behind data structures  \n#define DWM_BB_ENABLE                 0x00000001  // fEnable has been specified  \n#define DWM_BB_BLURREGION             0x00000002  // hRgnBlur has been specified  \n#define DWM_BB_TRANSITIONONMAXIMIZED  0x00000004  // fTransitionOnMaximized has been specified  \n#define WM_DWMCOMPOSITIONCHANGED        0x031E    // Composition changed window message  \ntypedef struct _DWM_BLURBEHIND  \n{  \n    DWORD dwFlags;  \n    BOOL fEnable;  \n    HRGN hRgnBlur;  \n    BOOL fTransitionOnMaximized;  \n} DWM_BLURBEHIND, *PDWM_BLURBEHIND;  \ntypedef struct _MARGINS  \n{  \n    int cxLeftWidth;  \n    int cxRightWidth;  \n    int cyTopHeight;  \n    int cyBottomHeight;  \n} MARGINS, *PMARGINS;  \ntypedef HRESULT (WINAPI *PtrDwmIsCompositionEnabled)(BOOL* pfEnabled);  \ntypedef HRESULT (WINAPI *PtrDwmExtendFrameIntoClientArea)(HWND hWnd, const MARGINS* pMarInset);  \ntypedef HRESULT (WINAPI *PtrDwmenableAeroWindow)(HWND hWnd, const DWM_BLURBEHIND* pBlurBehind);  \ntypedef HRESULT (WINAPI *PtrDwmGetColorizationColor)(DWORD *pcrColorization, BOOL *pfOpaqueBlend);  \nstatic PtrDwmIsCompositionEnabled pDwmIsCompositionEnabled= 0;  \nstatic PtrDwmenableAeroWindow pDwmenableAeroWindow = 0;  \nstatic PtrDwmExtendFrameIntoClientArea pDwmExtendFrameIntoClientArea = 0;  \nstatic PtrDwmGetColorizationColor pDwmGetColorizationColor = 0;  \n/* \n *同步响应DWM状态消息 \n */  \nclass WindowNotifier : public QWidget  \n{  \npublic:  \n    WindowNotifier() { winId(); }  \n    void addWidget(QWidget *widget) { widgets.append(widget); }  \n    void removeWidget(QWidget *widget) { widgets.removeAll(widget); }  \n    bool winEvent(MSG *message, long *result);  \nprivate:  \n    QWidgetList widgets;  \n};  \nstatic bool resolveLibs()  \n{  \n    if (!pDwmIsCompositionEnabled) {  \n        QLibrary dwmLib(QString::fromAscii(\"dwmapi\"));  \n        pDwmIsCompositionEnabled =(PtrDwmIsCompositionEnabled)dwmLib.resolve(\"DwmIsCompositionEnabled\");  \n        pDwmExtendFrameIntoClientArea = (PtrDwmExtendFrameIntoClientArea)dwmLib.resolve(\"DwmExtendFrameIntoClientArea\");  \n        pDwmenableAeroWindow = (PtrDwmenableAeroWindow)dwmLib.resolve(\"DwmenableAeroWindow\");  \n        pDwmGetColorizationColor = (PtrDwmGetColorizationColor)dwmLib.resolve(\"DwmGetColorizationColor\");  \n    }  \n    return pDwmIsCompositionEnabled != 0;  \n}  \n#endif  \n/*! \n  * 检查 DWM 是否开启 \n  * \n  */  \nbool QtWin::isCompositionEnabled()  \n{  \n#ifdef Q_WS_WIN  \n    if (resolveLibs()) {  \n        HRESULT hr = S_OK;  \n        BOOL isEnabled = false;  \n        hr = pDwmIsCompositionEnabled(&isEnabled);  \n        if (SUCCEEDED(hr))  \n            return isEnabled;  \n    }  \n#endif  \n    return false;  \n}  \n/*! \n  * 对一个widget实现Aero效果. \n  * \n  */  \nbool QtWin::enableAeroWindow(QWidget *widget, bool enable)  \n{  \n    Q_ASSERT(widget);  \n    bool result = false;  \n#ifdef Q_WS_WIN  \n    if (resolveLibs()) {  \n        DWM_BLURBEHIND bb = {0};  \n        HRESULT hr = S_OK;  \n        bb.fEnable = enable;  \n        bb.dwFlags = DWM_BB_ENABLE;  \n        bb.hRgnBlur = NULL;  \n        widget->setAttribute(Qt::WA_TranslucentBackground, enable);  \n        widget->setAttribute(Qt::WA_NoSystemBackground, enable);  \n        hr = pDwmenableAeroWindow(widget->winId(), &bb);  \n        if (SUCCEEDED(hr)) {  \n            result = true;  \n            windowNotifier()->addWidget(widget);  \n        }  \n    }  \n#endif  \n    return result;  \n}  \n/*! \n  * 设置Aero绘图区 \n  */  \nbool QtWin::extendFrameIntoClientArea(QWidget *widget, int left, int top, int right, int bottom)  \n{  \n    Q_ASSERT(widget);  \n    Q_UNUSED(left);  \n    Q_UNUSED(top);  \n    Q_UNUSED(right);  \n    Q_UNUSED(bottom);  \n    bool result = false;  \n#ifdef Q_WS_WIN  \n    if (resolveLibs()) {  \n        QLibrary dwmLib(QString::fromAscii(\"dwmapi\"));  \n        HRESULT hr = S_OK;  \n        MARGINS m = {left, top, right, bottom};  \n        hr = pDwmExtendFrameIntoClientArea(widget->winId(), &m);  \n        if (SUCCEEDED(hr)) {  \n            result = true;  \n            windowNotifier()->addWidget(widget);  \n        }  \n        widget->setAttribute(Qt::WA_TranslucentBackground, result);  \n    }  \n#endif  \n    return result;  \n}  \n/*! \n  * 返回当前窗口颜色. \n  */  \nQColor QtWin::colorizatinColor()  \n{  \n    QColor resultColor = QApplication::palette().window().color();  \n#ifdef Q_WS_WIN  \n    if (resolveLibs()) {  \n        DWORD color = 0;  \n        BOOL opaque = FALSE;  \n        QLibrary dwmLib(QString::fromAscii(\"dwmapi\"));  \n        HRESULT hr = S_OK;  \n        hr = pDwmGetColorizationColor(&color, &opaque);  \n        if (SUCCEEDED(hr))  \n            resultColor = QColor(color);  \n    }  \n#endif  \n    return resultColor;  \n}  \n#ifdef Q_WS_WIN  \nWindowNotifier *QtWin::windowNotifier()  \n{  \n    static WindowNotifier *windowNotifierInstance = 0;  \n    if (!windowNotifierInstance)  \n        windowNotifierInstance = new WindowNotifier;  \n    return windowNotifierInstance;  \n}  \n/* 所有窗口响应 DWM 状态变换消息 */  \nbool WindowNotifier::winEvent(MSG *message, long *result)  \n{  \n    if (message && message->message == WM_DWMCOMPOSITIONCHANGED) {  \n        bool compositionEnabled = QtWin::isCompositionEnabled();  \n        foreach(QWidget * widget, widgets) {  \n            if (widget) {  \n                widget->setAttribute(Qt::WA_NoSystemBackground, compositionEnabled);  \n            }  \n            widget->update();  \n        }  \n    }  \n    return QWidget::winEvent(message, result);  \n}  \n#endif\n```\n\n``` cpp\n//main.cpp\n#include <QtGui/QApplication>  \n#include \"widget.h\"  \n#include \"qtwin.h\"  \nint main(int argc, char *argv[])  \n{  \n    QApplication a(argc, argv);  \n    Widget window;  \n    window.setGeometry(1040,0,240,120);  \n    window.setWindowFlags(Qt::CustomizeWindowHint);  \n#ifdef Q_WS_X11  \n    window.setAttribute(Qt::WA_TranslucentBackground);  \n    window.setAttribute(Qt::WA_NoSystemBackground, false);  \n    QPalette pal = window.palette();  \n    QColor bg = pal.window().color();  \n    bg.setAlpha(180);  \n    pal.setColor(QPalette::Window, bg);  \n    window.setPalette(pal);  \n    window.ensurePolished(); // workaround Oxygen filling the background  \n    window.setAttribute(Qt::WA_StyledBackground, false);  \n#endif  \n    if (QtWin::isCompositionEnabled()) {  \n        QtWin::extendFrameIntoClientArea(&window);  \n        window.setContentsMargins(0, 0, 0, 0);  \n    }  \n    window.show();  \n    return a.exec();  \n}\n```\n","slug":"Qt制作Aero特效窗口","updated":1436792913000,"excerpt":"","_id":"suf0b0jxc2mav0dc","comments":true,"layout":"post","photos":[],"link":""},{"title":"如何修改Qt标准对话框的文字(例如,英文改成中文)","date":1436101884000,"categories":["2zuml5ffoy5vkypb"],"tags":["bq5kmcjkgq60y1bj","6tapig2p0jif2v5z"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/libaineu2004/article/details/19030129\" title=\"http://blog.csdn.net/libaineu2004/article/details/19030129\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/libaineu2004/article/details/19030129</a></p>\n</blockquote>\n<p>此篇文章参考qtcn论坛整理而成，因为文字和图片是本人亲自组织，所以仍算原创。<br><a href=\"http://www.qtcn.org/bbs/read-htm-tid-30650.html\" title=\"http://www.qtcn.org/bbs/read-htm-tid-30650.html\" target=\"_blank\" rel=\"external\">http://www.qtcn.org/bbs/read-htm-tid-30650.html</a><br><a href=\"http://blog.csdn.net/yangxiao_0203/article/details/7488967\" title=\"http://blog.csdn.net/yangxiao_0203/article/details/7488967\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/yangxiao_0203/article/details/7488967</a></p>\n<p>如图所示，QT自带的内建标准对话框QFontDialog、QColorDialog、QMessageBox。默认的文字全是英文的。QLineEdit和QTextEdit的右键菜单，默认的文字也全是英文的。<br>请问，如何可以把文字修改成中文或其他语言文字？<br><img src=\"http://www.qtcn.org/bbs/attachment/Mon_1402/17_118943_58b40f8aeeb5310.png?16\" alt=\"\"></p>\n<p><img src=\"http://www.qtcn.org/bbs/attachment/Mon_1402/17_118943_9743e39a4cbe620.png?20\" alt=\"\"></p>\n<p><img src=\"http://img.blog.csdn.net/20140410161351703\" alt=\"\"><br><br><br>解决方案如下：<br>简体中文的解决思路是打开Qt安装目录下的translations，找到qt_zh_CN.qm和qt_zh_CN.ts。<br>直接用qt_zh_CN.qm即可，如果确实有翻译不完全的，打开qt_zh_CN.ts翻译一下重新生成.qm文件即可。<br>即：把translation/qt_zh_CN.qm加载到QTranslator中。<br>其他国语言方法类似。<br><br><br>参考源码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"mainwindow.h\"</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QApplication&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QTranslator&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</div><div class=\"line\">{</div><div class=\"line\">    QApplication a(argc, argv);</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">//加载Qt标准对话框的中文翻译文件</span></div><div class=\"line\">    QTranslator tran;</div><div class=\"line\">    <span class=\"keyword\">bool</span> ok = tran.load(<span class=\"string\">\"qt_zh_CN.qm\"</span>, <span class=\"string\">\"C:\\\\qt\\\\4.8.5_VS2010\\\\translations\\\\\"</span>);<span class=\"comment\">//注,这里使用的是绝对路径,建议把.qm拷贝到工程目录下,然后使用相对路径.</span></div><div class=\"line\">    a.installTranslator(&tran);</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">//加载用户自定义的界面翻译文件</span></div><div class=\"line\"> </div><div class=\"line\">    QTranslator user;</div><div class=\"line\">    ok = user.load(<span class=\"string\">\"user_zh.qm\"</span>, <span class=\"string\">\":/\"</span>);</div><div class=\"line\">    a.installTranslator(&user);</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">//设置全局文字大小,非必需,根据自身情况使用</span></div><div class=\"line\">    QFont font  = a.font();</div><div class=\"line\">    font.setPointSize(<span class=\"number\">9</span>);</div><div class=\"line\">    a.setFont(font);</div><div class=\"line\"> </div><div class=\"line\">    MainWindow w;</div><div class=\"line\">    w.show();</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> a.exec();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br><br>最终效果图:<br><img src=\"http://img.blog.csdn.net/20140410161333046\" alt=\"\"></p>\n<p><img src=\"http://img.blog.csdn.net/20140410161348687\" alt=\"\"></p>\n<p><img src=\"http://img.blog.csdn.net/20140410161345062\" alt=\"\"><br><br><br>如果软件想动态得切换语言，则需要定义一个全局函数供调用，举例如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"mainwindow.h\"</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QApplication&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;QTranslator&gt;</span></div><div class=\"line\"> </div><div class=\"line\">QTranslator g_tran;<span class=\"comment\">//必须设置成全局变量，如果是局部变量，设置将失效。</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">void</span> setLanguage(<span class=\"keyword\">int</span> lan)<span class=\"comment\">//全局函数，可供其他文件调用</span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">bool</span> ok = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (lan == <span class=\"number\">1</span>)<span class=\"comment\">//中文</span></div><div class=\"line\">    {</div><div class=\"line\">        ok = g_tran.load(<span class=\"string\">\"qt_zh_CN.qm\"</span>, <span class=\"string\">\":/lan/\"</span>);<span class=\"comment\">//这里使用Qt资源文件,把.qm文件拷贝到项目路径/lan之下</span></div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lan == <span class=\"number\">2</span>)<span class=\"comment\">//英文</span></div><div class=\"line\">    {</div><div class=\"line\">        ok = g_tran.load(<span class=\"string\">\"\"</span>, <span class=\"string\">\":/lan/\"</span>);</div><div class=\"line\">    }</div><div class=\"line\"> </div><div class=\"line\">    QCoreApplication::installTranslator(&g_tran);</div><div class=\"line\">    <span class=\"comment\">//或者写成qApp-&gt;installTranslator(&g_tran);</span></div><div class=\"line\">}</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</div><div class=\"line\">{</div><div class=\"line\">    QApplication a(argc, argv);</div><div class=\"line\"> </div><div class=\"line\">    setLanguage(<span class=\"number\">1</span>);<span class=\"comment\">//调用全局函数</span></div><div class=\"line\"> </div><div class=\"line\">    MainWindow w;</div><div class=\"line\">    w.show();</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> a.exec();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-07-05-如何修改Qt标准对话框的文字-例如-英文改成中文.md","raw":"title: \"如何修改Qt标准对话框的文字(例如,英文改成中文)\"\ndate: 2015-07-05 21:11:24\ncategories:\n- Qt\ntags:\n- 汉化\n- 标准对话框\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/libaineu2004/article/details/19030129](http://blog.csdn.net/libaineu2004/article/details/19030129 \"http://blog.csdn.net/libaineu2004/article/details/19030129\")\n\n此篇文章参考qtcn论坛整理而成，因为文字和图片是本人亲自组织，所以仍算原创。\n[http://www.qtcn.org/bbs/read-htm-tid-30650.html](http://www.qtcn.org/bbs/read-htm-tid-30650.html \"http://www.qtcn.org/bbs/read-htm-tid-30650.html\")\n[http://blog.csdn.net/yangxiao_0203/article/details/7488967](http://blog.csdn.net/yangxiao_0203/article/details/7488967 \"http://blog.csdn.net/yangxiao_0203/article/details/7488967\")\n\n如图所示，QT自带的内建标准对话框QFontDialog、QColorDialog、QMessageBox。默认的文字全是英文的。QLineEdit和QTextEdit的右键菜单，默认的文字也全是英文的。\n请问，如何可以把文字修改成中文或其他语言文字？\n![](http://www.qtcn.org/bbs/attachment/Mon_1402/17_118943_58b40f8aeeb5310.png?16)\n\n![](http://www.qtcn.org/bbs/attachment/Mon_1402/17_118943_9743e39a4cbe620.png?20)\n\n![](http://img.blog.csdn.net/20140410161351703)\n<br>\n解决方案如下：\n简体中文的解决思路是打开Qt安装目录下的translations，找到qt_zh_CN.qm和qt_zh_CN.ts。\n直接用qt_zh_CN.qm即可，如果确实有翻译不完全的，打开qt_zh_CN.ts翻译一下重新生成.qm文件即可。\n即：把translation/qt_zh_CN.qm加载到QTranslator中。\n其他国语言方法类似。\n<br>\n参考源码：\n``` cpp\n#include \"mainwindow.h\"\n#include <QApplication>\n#include <QTranslator>\n \nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n \n    //加载Qt标准对话框的中文翻译文件\n    QTranslator tran;\n    bool ok = tran.load(\"qt_zh_CN.qm\", \"C:\\\\qt\\\\4.8.5_VS2010\\\\translations\\\\\");//注,这里使用的是绝对路径,建议把.qm拷贝到工程目录下,然后使用相对路径.\n    a.installTranslator(&tran);\n \n    //加载用户自定义的界面翻译文件\n \n    QTranslator user;\n    ok = user.load(\"user_zh.qm\", \":/\");\n    a.installTranslator(&user);\n \n    //设置全局文字大小,非必需,根据自身情况使用\n    QFont font  = a.font();\n    font.setPointSize(9);\n    a.setFont(font);\n \n    MainWindow w;\n    w.show();\n \n    return a.exec();\n}\n```\n<br>\n最终效果图:\n![](http://img.blog.csdn.net/20140410161333046)\n\n![](http://img.blog.csdn.net/20140410161348687)\n\n![](http://img.blog.csdn.net/20140410161345062)\n<br>\n如果软件想动态得切换语言，则需要定义一个全局函数供调用，举例如下：\n``` cpp\n#include \"mainwindow.h\"\n#include <QApplication>\n#include <QTranslator>\n \nQTranslator g_tran;//必须设置成全局变量，如果是局部变量，设置将失效。\n \nvoid setLanguage(int lan)//全局函数，可供其他文件调用\n{\n    bool ok = false;\n    if (lan == 1)//中文\n    {\n        ok = g_tran.load(\"qt_zh_CN.qm\", \":/lan/\");//这里使用Qt资源文件,把.qm文件拷贝到项目路径/lan之下\n    }\n    else if (lan == 2)//英文\n    {\n        ok = g_tran.load(\"\", \":/lan/\");\n    }\n \n    QCoreApplication::installTranslator(&g_tran);\n    //或者写成qApp->installTranslator(&g_tran);\n}\n \nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n \n    setLanguage(1);//调用全局函数\n \n    MainWindow w;\n    w.show();\n \n    return a.exec();\n}\n```\n","slug":"如何修改Qt标准对话框的文字-例如-英文改成中文","updated":1436793539000,"excerpt":"","_id":"orlmodgx70hawt21","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python中判断是否为Windows7或更高版本","date":1436259140000,"categories":["ldi4kaat0baj4vp1"],"tags":["4xagl40698e73q0t"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_windows7_orlater</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">import</span> platform</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> platform.system() != <span class=\"string\">\"Windows\"</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">    version = platform.win32_ver()</div><div class=\"line\">    version_num = version[<span class=\"number\">1</span>]</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        num = int(version_num[<span class=\"number\">0</span>]) * <span class=\"number\">10</span> + int(version_num[<span class=\"number\">2</span>])</div><div class=\"line\">    <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> num &gt;= <span class=\"number\">61</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-07-07-Python中判断是否为Windows7或更高版本.md","raw":"title: Python中判断是否为Windows7或更高版本\ndate: 2015-07-07 16:52:20\ncategories:\n- Python\ntags:\n- 系统版本判断\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n```\ndef is_windows7_orlater():\n    import platform\n \n    if platform.system() != \"Windows\":\n        return False\n    version = platform.win32_ver()\n    version_num = version[1]\n    try:\n        num = int(version_num[0]) * 10 + int(version_num[2])\n    except ValueError:\n        return False\n \n    if num >= 61:\n        return True\n    return False\n```","slug":"Python中判断是否为Windows7或更高版本","updated":1436691197000,"excerpt":"","_id":"3sntfkg41iqb2szk","comments":true,"layout":"post","photos":[],"link":""},{"title":"PyQt中利用winapi禁用系统默认阴影","date":1436345328000,"categories":["ccfn720olj32wb0n"],"tags":["d4sbhcb09t6d65wm","d0oe85rcu75hsz12"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">enableWindowShadow</span><span class=\"params\">(hWnd, bool_enabled)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">import</span> ctypes</div><div class=\"line\">    GCL_STYLE = (-<span class=\"number\">26</span>)</div><div class=\"line\">    CS_DROPSHADOW = <span class=\"number\">0x00020000</span></div><div class=\"line\">    hWnd = ctypes.c_long(self.winId())</div><div class=\"line\">    class_style = ctypes.windll.user32.GetClassLongA(hWnd, GCL_STYLE)</div><div class=\"line\">    <span class=\"keyword\">if</span> bool_enabled:</div><div class=\"line\">        class_style |= CS_DROPSHADOW</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        class_style &= ~CS_DROPSHADOW</div><div class=\"line\">    ctypes.windll.user32.SetClassLongA(hWnd, GCL_STYLE, class_style)</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-07-08-PyQt中利用winapi禁用系统默认阴影.md","raw":"title: PyQt中利用winapi禁用系统默认阴影\ndate: 2015-07-08 16:48:48\ncategories:\n- PyQt\ntags:\n- winapi\n- 禁用阴影\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n```\ndef enableWindowShadow(hWnd, bool_enabled):\n    import ctypes\n    GCL_STYLE = (-26)\n    CS_DROPSHADOW = 0x00020000\n    hWnd = ctypes.c_long(self.winId())\n    class_style = ctypes.windll.user32.GetClassLongA(hWnd, GCL_STYLE)\n    if bool_enabled:\n        class_style |= CS_DROPSHADOW\n    else:\n        class_style &= ~CS_DROPSHADOW\n    ctypes.windll.user32.SetClassLongA(hWnd, GCL_STYLE, class_style)\n```\n","slug":"PyQt中利用winapi禁用系统默认阴影","updated":1436690990000,"excerpt":"","_id":"voe883omz8fn86ff","comments":true,"layout":"post","photos":[],"link":""},{"title":"自定义窗口淡出淡入动画效果","date":1436430561000,"categories":["ccfn720olj32wb0n"],"tags":["n9ld5y198bgegv4r","yiaqy93clarkttn2"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>把下面代码加到你自定义的Widget里面即可:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">class MyWidget(QtGui<span class=\"built_in\">.</span>QWidget):</div><div class=\"line\">    def __init__(<span class=\"built_in\">self</span>)</div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_visible <span class=\"subst\">=</span> <span class=\"literal\">False</span></div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAniFinished <span class=\"subst\">=</span> <span class=\"literal\">True</span></div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAniFinished <span class=\"subst\">=</span> <span class=\"literal\">True</span></div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAni <span class=\"subst\">=</span> <span class=\"literal\">None</span></div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAni <span class=\"subst\">=</span> <span class=\"literal\">None</span></div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_initAni()</div><div class=\"line\"> </div><div class=\"line\">    def _initAni(<span class=\"built_in\">self</span>):</div><div class=\"line\">        <span class=\"string\">\"\"</span><span class=\"string\">\"</span></div><div class=\"line\">        初始化动画效果</div><div class=\"line\">        :return:</div><div class=\"line\">        \"<span class=\"string\">\"\"</span></div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAni <span class=\"subst\">=</span> QtCore<span class=\"built_in\">.</span>QPropertyAnimation(<span class=\"built_in\">self</span>, <span class=\"string\">\"windowOpacity\"</span>)</div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAni<span class=\"built_in\">.</span>setDuration(<span class=\"number\">100</span>)</div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAni<span class=\"built_in\">.</span>setStartValue(<span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAni<span class=\"built_in\">.</span>setEndValue(<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAni<span class=\"built_in\">.</span>finished<span class=\"built_in\">.</span>connect(<span class=\"built_in\">self</span><span class=\"built_in\">.</span>_setFadeInAniFinished)</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAni <span class=\"subst\">=</span> QtCore<span class=\"built_in\">.</span>QPropertyAnimation(<span class=\"built_in\">self</span>, <span class=\"string\">\"windowOpacity\"</span>)</div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAni<span class=\"built_in\">.</span>setDuration(<span class=\"number\">150</span>)</div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAni<span class=\"built_in\">.</span>setStartValue(<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAni<span class=\"built_in\">.</span>setEndValue(<span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAni<span class=\"built_in\">.</span>finished<span class=\"built_in\">.</span>connect(<span class=\"built_in\">self</span><span class=\"built_in\">.</span>_setFadeOutAniFinished)</div><div class=\"line\"> </div><div class=\"line\">    def setVisible(<span class=\"built_in\">self</span>, bool_visible):</div><div class=\"line\">        <span class=\"string\">\"\"</span><span class=\"string\">\"</span></div><div class=\"line\">        设置是否可见</div><div class=\"line\">        :param bool_visible:</div><div class=\"line\">        :return:</div><div class=\"line\">        \"<span class=\"string\">\"\"</span></div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_visible <span class=\"subst\">=</span> bool_visible</div><div class=\"line\">        <span class=\"keyword\">if</span> bool_visible:</div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"literal\">not</span> <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAniFinished:</div><div class=\"line\">                <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAni<span class=\"built_in\">.</span>stop()</div><div class=\"line\">                <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_setFadeOutAniFinished()</div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"literal\">not</span> <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAniFinished:</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAniFinished <span class=\"subst\">=</span> <span class=\"literal\">False</span></div><div class=\"line\">            super(TipsWindow, <span class=\"built_in\">self</span>)<span class=\"built_in\">.</span>setVisible(<span class=\"literal\">True</span>)</div><div class=\"line\">            <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAni<span class=\"built_in\">.</span>start()</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"literal\">not</span> <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAniFinished:</div><div class=\"line\">                <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAni<span class=\"built_in\">.</span>stop()</div><div class=\"line\">                <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_setFadeInAniFinished()</div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"literal\">not</span> <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAniFinished:</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAniFinished <span class=\"subst\">=</span> <span class=\"literal\">False</span></div><div class=\"line\">            <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAni<span class=\"built_in\">.</span>start()</div><div class=\"line\"> </div><div class=\"line\">    def isVisible(<span class=\"built_in\">self</span>):</div><div class=\"line\">        <span class=\"string\">\"\"</span><span class=\"string\">\"</span></div><div class=\"line\">        是否可见</div><div class=\"line\">        :return:</div><div class=\"line\">        \"<span class=\"string\">\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_visible</div><div class=\"line\"> </div><div class=\"line\">    def _setFadeInAniFinished(<span class=\"built_in\">self</span>):</div><div class=\"line\">        <span class=\"string\">\"\"</span><span class=\"string\">\"</span></div><div class=\"line\">        淡入动画结束</div><div class=\"line\">        :return:</div><div class=\"line\">        \"<span class=\"string\">\"\"</span></div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeInAniFinished <span class=\"subst\">=</span> <span class=\"literal\">True</span></div><div class=\"line\"> </div><div class=\"line\">    def _setFadeOutAniFinished(<span class=\"built_in\">self</span>):</div><div class=\"line\">        <span class=\"string\">\"\"</span><span class=\"string\">\"</span></div><div class=\"line\">        淡出动画结束</div><div class=\"line\">        :return:</div><div class=\"line\">        \"<span class=\"string\">\"\"</span></div><div class=\"line\">        super(TipsWindow, <span class=\"built_in\">self</span>)<span class=\"built_in\">.</span>setVisible(<span class=\"literal\">False</span>)</div><div class=\"line\">        <span class=\"built_in\">self</span><span class=\"built_in\">.</span>_fadeOutAniFinished <span class=\"subst\">=</span> <span class=\"literal\">True</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-07-09-自定义窗口淡出淡入动画效果.md","raw":"title: 自定义窗口淡出淡入动画效果\ndate: 2015-07-09 16:29:21\ncategories:\n- PyQt\ntags:\n- 淡出淡入\n- 动画\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n把下面代码加到你自定义的Widget里面即可:\n```\nclass MyWidget(QtGui.QWidget):\n    def __init__(self)\n        self._visible = False\n        self._fadeInAniFinished = True\n        self._fadeOutAniFinished = True\n        self._fadeInAni = None\n        self._fadeOutAni = None\n        self._initAni()\n \n    def _initAni(self):\n        \"\"\"\n        初始化动画效果\n        :return:\n        \"\"\"\n        self._fadeInAni = QtCore.QPropertyAnimation(self, \"windowOpacity\")\n        self._fadeInAni.setDuration(100)\n        self._fadeInAni.setStartValue(0)\n        self._fadeInAni.setEndValue(1)\n        self._fadeInAni.finished.connect(self._setFadeInAniFinished)\n \n        self._fadeOutAni = QtCore.QPropertyAnimation(self, \"windowOpacity\")\n        self._fadeOutAni.setDuration(150)\n        self._fadeOutAni.setStartValue(1)\n        self._fadeOutAni.setEndValue(0)\n        self._fadeOutAni.finished.connect(self._setFadeOutAniFinished)\n \n    def setVisible(self, bool_visible):\n        \"\"\"\n        设置是否可见\n        :param bool_visible:\n        :return:\n        \"\"\"\n        self._visible = bool_visible\n        if bool_visible:\n            if not self._fadeOutAniFinished:\n                self._fadeOutAni.stop()\n                self._setFadeOutAniFinished()\n            if not self._fadeInAniFinished:\n                return\n            self._fadeInAniFinished = False\n            super(TipsWindow, self).setVisible(True)\n            self._fadeInAni.start()\n        else:\n            if not self._fadeInAniFinished:\n                self._fadeInAni.stop()\n                self._setFadeInAniFinished()\n            if not self._fadeOutAniFinished:\n                return\n            self._fadeOutAniFinished = False\n            self._fadeOutAni.start()\n \n    def isVisible(self):\n        \"\"\"\n        是否可见\n        :return:\n        \"\"\"\n        return self._visible\n \n    def _setFadeInAniFinished(self):\n        \"\"\"\n        淡入动画结束\n        :return:\n        \"\"\"\n        self._fadeInAniFinished = True\n \n    def _setFadeOutAniFinished(self):\n        \"\"\"\n        淡出动画结束\n        :return:\n        \"\"\"\n        super(TipsWindow, self).setVisible(False)\n        self._fadeOutAniFinished = True\n```","slug":"自定义窗口淡出淡入动画效果","updated":1436690157000,"excerpt":"","_id":"jplx6ppamxqho8fn","comments":true,"layout":"post","photos":[],"link":""},{"title":"Qt里使QTooltips显示禁用Html支持","date":1436497519000,"categories":["ccfn720olj32wb0n"],"tags":["4fj8meu38p4tlgn7","r6aag4xfjzahgj5r"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">info = <span class=\"string\">\"&lt;p&gt;text&lt;/p&gt;\"</span></div><div class=\"line\">labelInfo.setToolTip(info.replace(<span class=\"string\">\"&lt;\"</span>, <span class=\"string\">\"&amp;lt;\"</span>))</div></pre></td></tr></table></figure>\n\n<p><br><br>还有个小窍门，默认的QTooltips如果显示宋体，而你想把它设置为微软雅黑的话，可以用下面的方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">info = <span class=\"string\">\"&lt;p&gt;text&lt;/p&gt;\"</span></div><div class=\"line\">labelInfo.setToolTip(<span class=\"string\">\"&lt;pre style=\\\"font-family: \\'Microsoft Yahei\\';\\\"&gt;%s&lt;/pre&gt;\"</span> % info.replace(<span class=\"string\">\"&lt;\"</span>, <span class=\"string\">\"&amp;lt;\"</span>))</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-07-10-Qt里使QTooltips显示禁用Html支持.md","raw":"title: Qt里使QTooltips显示禁用Html支持\ndate: 2015-07-10 11:05:19\ncategories:\n- PyQt\ntags:\n- QTooltips\n- 禁用Html支持\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n``` python\ninfo = \"<p>text</p>\"\nlabelInfo.setToolTip(info.replace(\"<\", \"&amp;lt;\"))\n```\n<br>\n还有个小窍门，默认的QTooltips如果显示宋体，而你想把它设置为微软雅黑的话，可以用下面的方法:\n``` python\ninfo = \"<p>text</p>\"\nlabelInfo.setToolTip(\"<pre style=\\\"font-family: \\'Microsoft Yahei\\';\\\">%s</pre>\" % info.replace(\"<\", \"&amp;lt;\"))\n```\n","slug":"Qt里使QTooltips显示禁用Html支持","updated":1436689272000,"excerpt":"","_id":"30i2jzydeq93rdci","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python中计算一个整形的位数","date":1436601482000,"categories":["ldi4kaat0baj4vp1"],"tags":["zursk8zfp9nmng22"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">input = <span class=\"number\">8985315</span></div><div class=\"line\">digits = <span class=\"number\">0</span></div><div class=\"line\">i = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">while</span> input / i &gt; <span class=\"number\">0</span>:</div><div class=\"line\">    digits += <span class=\"number\">1</span></div><div class=\"line\">    i *= <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">print</span> digits</div><div class=\"line\"><span class=\"comment\"># result: 7</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-07-11-Python中计算一个整形的位数.md","raw":"title: Python中计算一个整形的位数\ndate: 2015-07-11 15:58:02\ncategories:\n- Python\ntags:\n- 计算位数\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n``` python\ninput = 8985315\ndigits = 0\ni = 1\nwhile input / i > 0:\n    digits += 1\n    i *= 10\nprint digits\n# result: 7\n```","slug":"Python中计算一个整形的位数","updated":1436688166000,"excerpt":"","_id":"708dycs0c6vybjzy","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python单例模式实例","date":1436685557000,"categories":["ldi4kaat0baj4vp1"],"tags":["p97l8pgjp49g1kf1","frg3uhagpg3ifeth"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<h2 id=\"定义\">定义</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># singleton.py</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">singleton</span><span class=\"params\">(cls, *args, **kw)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">        单列模式</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    instances = {}</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_singleton</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> instances:</div><div class=\"line\">            instances[cls] = cls(*args, **kw)</div><div class=\"line\">        <span class=\"keyword\">return</span> instances[cls]</div><div class=\"line\">    <span class=\"keyword\">return</span> _singleton</div></pre></td></tr></table></figure>\n\n<h2 id=\"实例\">实例</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> singleton  <span class=\"comment\"># 导入上面的定义</span></div><div class=\"line\"><span class=\"decorator\">@singleton</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyController</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-07-12-Python单例模式实例.md","raw":"title: Python单例模式实例\ndate: 2015-07-12 15:19:17\ncategories:\n- Python\ntags:\n- 单例模式\n- singleton\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n## 定义 ##\n``` python\n# singleton.py\n\ndef singleton(cls, *args, **kw):\n    \"\"\"\n        单列模式\n    \"\"\"\n    instances = {}\n    def _singleton():\n        if cls not in instances:\n            instances[cls] = cls(*args, **kw)\n        return instances[cls]\n    return _singleton\n```\n\n## 实例 ##\n``` python\nimport singleton  # 导入上面的定义\n@singleton\nclass MyController():\n    ...\n```","slug":"Python单例模式实例","updated":1436687777000,"excerpt":"","_id":"xltntm2zyn4jtnrv","comments":true,"layout":"post","photos":[],"link":""},{"title":"自定义QScrollBar实例","date":1436689371000,"categories":[],"tags":[],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n","source":"_posts/2015-07-12-自定义QScrollBar实例.md","raw":"title: 自定义QScrollBar实例\ndate: 2015-07-12 16:22:51\ncategories:\ntags:\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n","slug":"自定义QScrollBar实例","updated":1436689371000,"excerpt":"","_id":"8rqoktgg68azf246","comments":true,"layout":"post","photos":[],"link":""},{"title":"C++中获取系统变量的几种方法","date":1436750111000,"categories":["7szs0nee4z8h0y8w"],"tags":["afgihlusvhtje3qu"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<h2 id=\"使用Qt里的QProcessEnvironment::systemEnvironment()\">使用<code>Qt</code>里的<code>QProcessEnvironment::systemEnvironment()</code></h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">QProcessEnvironment::systemEnvironment().value(<span class=\"string\">\"APPDATA\"</span>)</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h2 id=\"使用stdlib里的getenv()\">使用<code>stdlib</code>里的<code>getenv()</code></h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;stdlib.h&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;stdio.h&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">void</span>)</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">char</span> *pathvar;</div><div class=\"line\">    pathvar = getenv(<span class=\"string\">\"PATH\"</span>);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"pathvar=%s\"</span>,pathvar);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h2 id=\"使用winapi里的GetEnvironmentVariable()\">使用<code>winapi</code>里的<code>GetEnvironmentVariable()</code></h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">DWORD</span> WINAPI GetEnvironmentVariable(</div><div class=\"line\">  _In_opt_  LPCTSTR lpName,</div><div class=\"line\">  _Out_opt_ LPTSTR  lpBuffer,</div><div class=\"line\">  _In_      <span class=\"preprocessor\">DWORD</span>   nSize</div><div class=\"line\">)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-07-13-C-中获取系统变量的几种方法.md","raw":"title: C++中获取系统变量的几种方法\ndate: 2015-07-13 09:15:11\ncategories:\n- C++\ntags:\n- 系统变量\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n## 使用`Qt`里的`QProcessEnvironment::systemEnvironment()`\n``` cpp\nQProcessEnvironment::systemEnvironment().value(\"APPDATA\")\n```\n<br>\n## 使用`stdlib`里的`getenv()`\n``` cpp\n#include <stdlib.h>\n#include <stdio.h>\n \nint main(void)\n{\n    char *pathvar;\n    pathvar = getenv(\"PATH\");\n    printf(\"pathvar=%s\",pathvar);\n    return 0;\n}\n```\n<br>\n## 使用`winapi`里的`GetEnvironmentVariable()`\n```\nDWORD WINAPI GetEnvironmentVariable(\n  _In_opt_  LPCTSTR lpName,\n  _Out_opt_ LPTSTR  lpBuffer,\n  _In_      DWORD   nSize\n);\n```\n","slug":"C-中获取系统变量的几种方法","updated":1436751203000,"excerpt":"","_id":"dlfztt47qoy3ge9r","comments":true,"layout":"post","photos":[],"link":""},{"title":"C++之类的前置声明","date":1435758660000,"categories":["7szs0nee4z8h0y8w"],"tags":["o8nlgeymioibwicj"],"content":"<blockquote>\n<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href=\"http://blog.csdn.net/fjb2080/article/details/5533514\" title=\"http://blog.csdn.net/fjb2080/article/details/5533514\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/fjb2080/article/details/5533514</a></p>\n</blockquote>\n<p>刚开始学习c++的人都会遇到这样的问题：<br>定义一个类 class A，这个类里面使用了类B的对象b，然后定义了一个类B，里面也包含了一个类A的对象a，就成了这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//a.h  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"b.h\"  </span></div><div class=\"line\"><span class=\"keyword\">class</span> A  </div><div class=\"line\">{  </div><div class=\"line\">....  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    B b;  </div><div class=\"line\">};  </div><div class=\"line\"><span class=\"comment\">//b.h  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"a.h\"  </span></div><div class=\"line\"><span class=\"keyword\">class</span> B  </div><div class=\"line\">{  </div><div class=\"line\">....  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    A a;  </div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>一编译，就出现了一个互包含的问题了，这时就有人跳出来说，这个问题的解决办法可以这样，在a.h文件中声明类B，然后使用B的指针。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//a.h   </span></div><div class=\"line\"><span class=\"comment\">//#include \"b.h\"  </span></div><div class=\"line\"><span class=\"keyword\">class</span> B;   </div><div class=\"line\"><span class=\"keyword\">class</span> A   </div><div class=\"line\">{  </div><div class=\"line\"> ....   </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\"> B b;   </div><div class=\"line\">};   </div><div class=\"line\"><span class=\"comment\">//b.h   </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"a.h\"   </span></div><div class=\"line\"><span class=\"keyword\">class</span> B  </div><div class=\"line\">{  </div><div class=\"line\"> ....   </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\"> A a;   </div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>然后，问题就解决了。</p>\n<p>但是，有人知道问题是为什么就被解决的吗，也就是说，加了个前置声明为什么就解决了这样的问题。下面，让我来探讨一下这个前置声明。</p>\n<p>类的前置声明是有许多的好处的。</p>\n<p>我们使用前置声明的一个好处是，从上面看到，当我们在类A使用类B的前置声明时，我们修改类B时，只需要重新编译类B，而不需要重新编译a.h的（当然，在真正使用类B时，必须包含b.h）。</p>\n<p>另外一个好处是减小类A的大小，上面的代码没有体现，那么我们来看下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//a.h  </span></div><div class=\"line\"><span class=\"keyword\">class</span> B;  </div><div class=\"line\"><span class=\"keyword\">class</span> A  </div><div class=\"line\">{  </div><div class=\"line\">    ....  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    B *b;  </div><div class=\"line\">....  </div><div class=\"line\">};  </div><div class=\"line\"><span class=\"comment\">//b.h  </span></div><div class=\"line\"><span class=\"keyword\">class</span> B  </div><div class=\"line\">{  </div><div class=\"line\">....  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    <span class=\"keyword\">int</span> a;  </div><div class=\"line\">    <span class=\"keyword\">int</span> b;  </div><div class=\"line\">    <span class=\"keyword\">int</span> c;  </div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>我们看上面的代码，类B的大小是12（在32位机子上）。</p>\n<p>如果我们在类A中包含的是B的对象，那么类A的大小就是12（假设没有其它成员变量和虚函数）。如果包含的是类B的指针*b变量，那么类A的大小就是4，所以这样是可以减少类A的大小的，特别是对于在STL的容器里包含的是类的对象而不是指针的时候，这个就特别有用了。</p>\n<p>在前置声明时，我们只能使用的就是类的指针和引用（因为引用也是居于指针的实现的）。</p>\n<p>那么，我问你一个问题，为什么我们前置声明时，只能使用类型的指针和引用呢？</p>\n<p>如果你回答到：那是因为指针是固定大小，并且可以表示任意的类型，那么可以给你80分了。为什么只有80分，因为还没有完全回答到。</p>\n<p>想要更详细的答案，我们看下下面这个类：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> A  </div><div class=\"line\">{  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">    A(<span class=\"keyword\">int</span> a):_a(a),_b(_a){} <span class=\"comment\">// _b is new add  </span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">int</span> get_a() <span class=\"keyword\">const</span> {<span class=\"keyword\">return</span> _a;}  </div><div class=\"line\">    <span class=\"keyword\">int</span> get_b() <span class=\"keyword\">const</span> {<span class=\"keyword\">return</span> _b;} <span class=\"comment\">// new add  </span></div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    <span class=\"keyword\">int</span> _b; <span class=\"comment\">// new add  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> _a;  </div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>我们看下上面定义的这个类A，其中_b变量和get_b()函数是新增加进这个类的。</p>\n<p>那么我问你，在增加进_b变量和get_b()成员函数后这个类发生了什么改变，思考一下再回答。</p>\n<p>好了，我们来列举这些改变：</p>\n<p>第一个改变当然是增加了_b变量和get_b()成员函数；</p>\n<p>第二个改变是这个类的大小改变了，原来是4，现在是8。</p>\n<p>第三个改变是成员_a的偏移地址改变了，原来相对于类的偏移是0，现在是4了。</p>\n<p>上面的改变都是我们显式的、看得到的改变。还有一个隐藏的改变，想想是什么。。。</p>\n<p>这个隐藏的改变是类A的默认构造函数和默认拷贝构造函数发生了改变。</p>\n<p>由上面的改变可以看到，任何调用类A的成员变量或成员函数的行为都需要改变，因此，我们的a.h需要重新编译。</p>\n<p>如果我们的b.h是这样的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//b.h  </span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"a.h\"  </span></div><div class=\"line\"><span class=\"keyword\">class</span> B  </div><div class=\"line\">{  </div><div class=\"line\">...  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    A a;  </div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>那么我们的b.h也需要重新编译。</p>\n<p>如果是这样的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//b.h  </span></div><div class=\"line\"><span class=\"keyword\">class</span> A;  </div><div class=\"line\"><span class=\"keyword\">class</span> B  </div><div class=\"line\">{  </div><div class=\"line\">...  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    A *a;  </div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>那么我们的b.h就不需要重新编译。</p>\n<p>像我们这样前置声明类A：<br><code>class A;</code></p>\n<p>是一种不完整的声明，只要类B中没有执行需要了解类A的大小或者成员的操作，则这样的不完整声明允许声明指向A的指针和引用。</p>\n<p>而在前一个代码中的语句<br><code>A a;</code></p>\n<p>是需要了解A的大小的，不然是不可能知道如果给类B分配内存大小的，因此不完整的前置声明就不行，必须要包含a.h来获得类A的大小，同时也要重新编译类B。</p>\n<p>再回到前面的问题，使用前置声明只允许的声明是指针或引用的一个原因是只要这个声明没有执行需要了解类A的大小或者成员的操作就可以了，所以声明成指针或引用是没有执行需要了解类A的大小或者成员的操作的。</p>\n","source":"_posts/2015-07-01-C-之类的前置声明.md","raw":"title: C++之类的前置声明\ndate: 2015-07-01 21:51:00\ncategories:\n- C++\ntags:\n- 前置声明\n---\n>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n>[http://blog.csdn.net/fjb2080/article/details/5533514](http://blog.csdn.net/fjb2080/article/details/5533514 \"http://blog.csdn.net/fjb2080/article/details/5533514\")\n\n刚开始学习c++的人都会遇到这样的问题：\n定义一个类 class A，这个类里面使用了类B的对象b，然后定义了一个类B，里面也包含了一个类A的对象a，就成了这样：\n``` cpp\n//a.h  \n#include \"b.h\"  \nclass A  \n{  \n....  \nprivate:  \n    B b;  \n};  \n//b.h  \n#include \"a.h\"  \nclass B  \n{  \n....  \nprivate:  \n    A a;  \n};\n```\n\n一编译，就出现了一个互包含的问题了，这时就有人跳出来说，这个问题的解决办法可以这样，在a.h文件中声明类B，然后使用B的指针。\n``` cpp\n//a.h   \n//#include \"b.h\"  \nclass B;   \nclass A   \n{  \n ....   \nprivate:  \n B b;   \n};   \n//b.h   \n#include \"a.h\"   \nclass B  \n{  \n ....   \nprivate:  \n A a;   \n};\n```\n\n然后，问题就解决了。\n\n但是，有人知道问题是为什么就被解决的吗，也就是说，加了个前置声明为什么就解决了这样的问题。下面，让我来探讨一下这个前置声明。\n\n类的前置声明是有许多的好处的。\n\n我们使用前置声明的一个好处是，从上面看到，当我们在类A使用类B的前置声明时，我们修改类B时，只需要重新编译类B，而不需要重新编译a.h的（当然，在真正使用类B时，必须包含b.h）。\n\n另外一个好处是减小类A的大小，上面的代码没有体现，那么我们来看下：\n``` cpp\n//a.h  \nclass B;  \nclass A  \n{  \n    ....  \nprivate:  \n    B *b;  \n....  \n};  \n//b.h  \nclass B  \n{  \n....  \nprivate:  \n    int a;  \n    int b;  \n    int c;  \n};\n```\n\n我们看上面的代码，类B的大小是12（在32位机子上）。\n\n如果我们在类A中包含的是B的对象，那么类A的大小就是12（假设没有其它成员变量和虚函数）。如果包含的是类B的指针*b变量，那么类A的大小就是4，所以这样是可以减少类A的大小的，特别是对于在STL的容器里包含的是类的对象而不是指针的时候，这个就特别有用了。\n\n在前置声明时，我们只能使用的就是类的指针和引用（因为引用也是居于指针的实现的）。\n\n那么，我问你一个问题，为什么我们前置声明时，只能使用类型的指针和引用呢？\n\n如果你回答到：那是因为指针是固定大小，并且可以表示任意的类型，那么可以给你80分了。为什么只有80分，因为还没有完全回答到。\n\n想要更详细的答案，我们看下下面这个类：\n``` cpp\nclass A  \n{  \npublic:  \n    A(int a):_a(a),_b(_a){} // _b is new add  \n \n    int get_a() const {return _a;}  \n    int get_b() const {return _b;} // new add  \nprivate:  \n    int _b; // new add  \n    int _a;  \n};\n```\n\n我们看下上面定义的这个类A，其中_b变量和get_b()函数是新增加进这个类的。\n\n那么我问你，在增加进_b变量和get_b()成员函数后这个类发生了什么改变，思考一下再回答。\n\n好了，我们来列举这些改变：\n\n第一个改变当然是增加了_b变量和get_b()成员函数；\n\n第二个改变是这个类的大小改变了，原来是4，现在是8。\n\n第三个改变是成员_a的偏移地址改变了，原来相对于类的偏移是0，现在是4了。\n\n上面的改变都是我们显式的、看得到的改变。还有一个隐藏的改变，想想是什么。。。\n\n这个隐藏的改变是类A的默认构造函数和默认拷贝构造函数发生了改变。\n\n由上面的改变可以看到，任何调用类A的成员变量或成员函数的行为都需要改变，因此，我们的a.h需要重新编译。\n\n如果我们的b.h是这样的：\n``` cpp\n//b.h  \n#include \"a.h\"  \nclass B  \n{  \n...  \nprivate:  \n    A a;  \n};\n```\n\n那么我们的b.h也需要重新编译。\n\n如果是这样的：\n``` cpp\n//b.h  \nclass A;  \nclass B  \n{  \n...  \nprivate:  \n    A *a;  \n};\n```\n\n那么我们的b.h就不需要重新编译。\n\n像我们这样前置声明类A：\n`class A;`\n\n是一种不完整的声明，只要类B中没有执行需要了解类A的大小或者成员的操作，则这样的不完整声明允许声明指向A的指针和引用。\n\n而在前一个代码中的语句\n`A a;`\n\n是需要了解A的大小的，不然是不可能知道如果给类B分配内存大小的，因此不完整的前置声明就不行，必须要包含a.h来获得类A的大小，同时也要重新编译类B。\n\n再回到前面的问题，使用前置声明只允许的声明是指针或引用的一个原因是只要这个声明没有执行需要了解类A的大小或者成员的操作就可以了，所以声明成指针或引用是没有执行需要了解类A的大小或者成员的操作的。\n","slug":"C-之类的前置声明","updated":1436795788000,"excerpt":"","_id":"ba0f9uzvs9jm2kuk","comments":true,"layout":"post","photos":[],"link":""},{"title":"Python经验总结","date":1421213720000,"categories":["ldi4kaat0baj4vp1"],"tags":["3bwun56tv7lalf9k","4fxervx3aynbcrnz"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<ul>\n<li>连续空格替换为1个空格</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">s = <span class=\"string\">' 1    3 579'</span></div><div class=\"line\">s = <span class=\"string\">' '</span>.join(s.split())</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>获取文件名、当前路径、python所在路径</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">filename = os.path.basename(path_filename)</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">print</span> os.getcwd() </div><div class=\"line\"><span class=\"keyword\">print</span> sys.executable</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>时间格式化</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\">time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</div></pre></td></tr></table></figure>\n\n<h6 id=\"时间戳_—&gt;_时间字符串_‘%Y-%m-%d_%H:%M:%S’\">时间戳 —&gt;  时间字符串 ‘%Y-%m-%d %H:%M:%S’</h6>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">timestamp = time.time()</div><div class=\"line\">time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>, time.localtime(timestamp))</div></pre></td></tr></table></figure>\n\n\n<h6 id=\"时间字符串_—&gt;_时间戳_1407934120-0\">时间字符串 —&gt; 时间戳 1407934120.0</h6>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">str_time = <span class=\"string\">\"2014-08-13 20:48:40\"</span></div><div class=\"line\">time.mktime(time.strptime(str_time, <span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>))</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>字典反转</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> izip </div><div class=\"line\">dict(izip(d.itervalues(), d.iterkeys()))</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>字典排序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sortDict</span><span class=\"params\">(adict)</span>:</span></div><div class=\"line\">    l_keys = adict.keys()</div><div class=\"line\">    l_keys.sort()</div><div class=\"line\">    _dict = {}</div><div class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> l_keys:</div><div class=\"line\">        _dict[k] = adict[k]</div><div class=\"line\">    <span class=\"keyword\">return</span> _dict</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>合并字典</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_dict</span><span class=\"params\">(d1, d2)</span>:</span></div><div class=\"line\">    d3 = {}</div><div class=\"line\">    <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> d1.iteritems():</div><div class=\"line\">        d3[k] = v</div><div class=\"line\">    <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> d2.iteritems():</div><div class=\"line\">        <span class=\"keyword\">if</span> k <span class=\"keyword\">in</span> d3.keys():</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'d1 & d2 has the same key.'</span></div><div class=\"line\">        d3[k] = v</div><div class=\"line\">    <span class=\"keyword\">return</span> d3</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>判断文件或目录是否存在</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\">os.path.isfile(<span class=\"string\">'test.txt'</span>) <span class=\"comment\">#如果不存在就返回False</span></div><div class=\"line\">os.path.exists(directory) <span class=\"comment\">#如果目录不存在就返回False</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<ul>\n<li>二分法查找/插入元素的index</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> bisect</div><div class=\"line\">L = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>]</div><div class=\"line\">x = <span class=\"number\">6</span></div><div class=\"line\">a = bisect.bisect_left(L, x)</div><div class=\"line\">b = bisect.bisect_right(L, x)</div><div class=\"line\"><span class=\"keyword\">print</span> a,b</div><div class=\"line\">x = <span class=\"number\">7</span></div><div class=\"line\">a = bisect.bisect_left(L, x)</div><div class=\"line\">b = bisect.bisect_right(L, x)</div><div class=\"line\"><span class=\"keyword\">print</span> a,b</div><div class=\"line\">L = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>]</div><div class=\"line\">a = bisect.insort_left(L, x)</div><div class=\"line\"><span class=\"keyword\">print</span> L</div><div class=\"line\">L = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>]</div><div class=\"line\">b = bisect.insort_right(L, x)</div><div class=\"line\"><span class=\"keyword\">print</span> L</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-01-14-Python经验总结.md","raw":"title: Python经验总结\ndate: 2015-01-14 13:35:20\ncategories:\n- Python\ntags:\n- Python\n- 经验总结\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n- 连续空格替换为1个空格\n```python\ns = ' 1    3 579'\ns = ' '.join(s.split())\n```\n<br>\n- 获取文件名、当前路径、python所在路径\n```python\nfilename = os.path.basename(path_filename)\nimport os\nimport sys\nprint os.getcwd() \nprint sys.executable\n```\n<br>\n- 时间格式化\n```python\nimport time\ntime.strftime('%Y-%m-%d %H:%M:%S')\n```\n###### 时间戳 -->  时间字符串 '%Y-%m-%d %H:%M:%S'\n```python\ntimestamp = time.time()\ntime.strftime('%Y-%m-%d %H:%M:%S', time.localtime(timestamp)) \n```\n \n###### 时间字符串 --> 时间戳 1407934120.0\n```python\nstr_time = \"2014-08-13 20:48:40\"\ntime.mktime(time.strptime(str_time, \"%Y-%m-%d %H:%M:%S\"))\n```\n<br>\n- 字典反转\n```python\nfrom itertools import izip \ndict(izip(d.itervalues(), d.iterkeys()))\n```\n<br>\n- 字典排序\n```python\ndef sortDict(adict):\n    l_keys = adict.keys()\n    l_keys.sort()\n    _dict = {}\n    for k in l_keys:\n        _dict[k] = adict[k]\n    return _dict\n```\n<br>\n- 合并字典\n```python\ndef merge_dict(d1, d2):\n    d3 = {}\n    for k,v in d1.iteritems():\n        d3[k] = v\n    for k,v in d2.iteritems():\n        if k in d3.keys():\n            print 'd1 & d2 has the same key.'\n        d3[k] = v\n    return d3\n```\n<br>\n- 判断文件或目录是否存在\n```python\nimport os\nos.path.isfile('test.txt') #如果不存在就返回False\nos.path.exists(directory) #如果目录不存在就返回False\n```\n<br>\n- 二分法查找/插入元素的index\n```python\nimport bisect\nL = [1,3,5,7,9]\nx = 6\na = bisect.bisect_left(L, x)\nb = bisect.bisect_right(L, x)\nprint a,b\nx = 7\na = bisect.bisect_left(L, x)\nb = bisect.bisect_right(L, x)\nprint a,b\nL = [1,3,5,7,9]\na = bisect.insort_left(L, x)\nprint L\nL = [1,3,5,7,9]\nb = bisect.insort_right(L, x)\nprint L\n```\n","slug":"Python经验总结","updated":1431306846000,"excerpt":"","_id":"odrvcxd4589akkhb","comments":true,"layout":"post","photos":[],"link":""},{"title":"JSON解析器小练习","date":1421286601000,"categories":["25rjad5qpnh3qcyr"],"tags":["3bwun56tv7lalf9k","6r5n8un90pqlzpke","5z5r9t44ncq6fa96"],"content":"<blockquote>\n<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>\n</blockquote>\n<p>来到网易的第三天，我还是在Python的学习阶段，不过对Python一些理论性的东西已经有所理解。与此同时，主管也有给我一些小练习，让我边做边熟悉。是的，学习一种新的编程语言最有效率的方法就是边看书边打代码做小练习，这在我之前的学习中也深有体会。</p>\n<p>在此顺便记录一下小练习<code>JSON Parser</code>的代码：<code>初学勿喷</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> string</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonParser</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.data_json = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># JSON type: null, true and false.</span></div><div class=\"line\">    __list_jdt = [<span class=\"string\">u'null'</span>, <span class=\"string\">u'true'</span>, <span class=\"string\">u'false'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Read a string JSON data into the class, with no return value.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load</span><span class=\"params\">(self, s)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">u'[INFO] Load JSON string.'</span>)</div><div class=\"line\">        json_type = JsonParser.__get_json_obj_type(s)</div><div class=\"line\">        <span class=\"keyword\">if</span> json_type == list:</div><div class=\"line\">            self.data_json = list()</div><div class=\"line\">        <span class=\"keyword\">elif</span> json_type == dict:</div><div class=\"line\">            self.data_json = dict()</div><div class=\"line\">        self.__build_json_data(self.data_json, self.__parse_json_objects(s), json_type)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Reference to the dictionary data and return the JSON string.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dump</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> str(self.data_json)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Build with parent and child relationship, to align the JSON data structure, with no return value.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__build_json_data</span><span class=\"params\">(self, parent, obj, typ)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> typ == dict:</div><div class=\"line\">            count_bb = <span class=\"number\">0</span></div><div class=\"line\">            count_sb = <span class=\"number\">0</span></div><div class=\"line\">            obj_key = <span class=\"string\">''</span></div><div class=\"line\">            obj_value = []</div><div class=\"line\">            flg_d = <span class=\"keyword\">True</span></div><div class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(obj)):</div><div class=\"line\">                <span class=\"keyword\">if</span> flg_d:</div><div class=\"line\">                    <span class=\"keyword\">if</span> obj[i] == <span class=\"string\">':'</span>:</div><div class=\"line\">                        flg_d = <span class=\"keyword\">not</span> flg_d</div><div class=\"line\">                        obj_key = obj[i - <span class=\"number\">1</span>].replace(<span class=\"string\">'\"'</span>, <span class=\"string\">''</span>)</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    count_bb, count_sb = JsonParser.__cal_brackets(obj[i], count_bb, count_sb)</div><div class=\"line\">                    obj_value.append(obj[i])</div><div class=\"line\">                    <span class=\"keyword\">if</span> count_bb + count_sb == <span class=\"number\">0</span>:</div><div class=\"line\">                        flg_d = <span class=\"keyword\">not</span> flg_d</div><div class=\"line\">                        self.__build_dict(parent, obj_key, obj_value)</div><div class=\"line\">                        obj_key = <span class=\"string\">''</span></div><div class=\"line\">                        obj_value = []</div><div class=\"line\">        <span class=\"keyword\">elif</span> typ == list:</div><div class=\"line\">            count_bb = <span class=\"number\">0</span></div><div class=\"line\">            count_sb = <span class=\"number\">0</span></div><div class=\"line\">            list_obj = []</div><div class=\"line\">            <span class=\"keyword\">del</span> obj[<span class=\"number\">0</span>]</div><div class=\"line\">            <span class=\"keyword\">del</span> obj[len(obj) - <span class=\"number\">1</span>]</div><div class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(obj)):</div><div class=\"line\">                count_bb, count_sb = JsonParser.__cal_brackets(obj[i], count_bb, count_sb)</div><div class=\"line\">                list_obj.append(obj[i])</div><div class=\"line\">                <span class=\"keyword\">if</span> count_bb + count_sb == <span class=\"number\">0</span>:</div><div class=\"line\">                    self.__build_list(parent, list_obj)</div><div class=\"line\">                    list_obj = []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Build list data</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__build_list</span><span class=\"params\">(self, parent, list_obj)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> list_obj[<span class=\"number\">0</span>] != <span class=\"string\">','</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> list_obj[<span class=\"number\">0</span>] == <span class=\"string\">'{'</span>:</div><div class=\"line\">                parent.append(list_obj)</div><div class=\"line\">                parent[len(parent) - <span class=\"number\">1</span>] = dict()</div><div class=\"line\">                self.__build_json_data(parent[len(parent) - <span class=\"number\">1</span>], list_obj, dict)</div><div class=\"line\">            <span class=\"keyword\">elif</span> list_obj[<span class=\"number\">0</span>] == <span class=\"string\">'['</span>:</div><div class=\"line\">                parent.append(list_obj)</div><div class=\"line\">                parent[len(parent) - <span class=\"number\">1</span>] = list()</div><div class=\"line\">                self.__build_json_data(parent[len(parent) - <span class=\"number\">1</span>], list_obj, list)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Build dictionary data</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__build_dict</span><span class=\"params\">(self, parent, obj_key, obj_value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> obj_value[<span class=\"number\">0</span>] == <span class=\"string\">'{'</span>:</div><div class=\"line\">            parent[obj_key] = dict()</div><div class=\"line\">            self.__build_json_data(parent[obj_key], obj_value, dict)</div><div class=\"line\">        <span class=\"keyword\">elif</span> obj_value[<span class=\"number\">0</span>] == <span class=\"string\">'['</span>:</div><div class=\"line\">            parent[obj_key] = list()</div><div class=\"line\">            self.__build_json_data(parent[obj_key], obj_value, list)</div><div class=\"line\">        <span class=\"keyword\">elif</span> len(obj_value) == <span class=\"number\">1</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> obj_value[<span class=\"number\">0</span>] <span class=\"keyword\">in</span> self.__list_jdt:</div><div class=\"line\">                <span class=\"keyword\">if</span> obj_value[<span class=\"number\">0</span>] == self.__list_jdt[<span class=\"number\">0</span>]:</div><div class=\"line\">                    parent[obj_key] = <span class=\"keyword\">None</span></div><div class=\"line\">                <span class=\"keyword\">elif</span> obj_value[<span class=\"number\">0</span>] == self.__list_jdt[<span class=\"number\">1</span>]:</div><div class=\"line\">                    parent[obj_key] = <span class=\"keyword\">True</span></div><div class=\"line\">                <span class=\"keyword\">elif</span> obj_value[<span class=\"number\">0</span>] == self.__list_jdt[<span class=\"number\">2</span>]:</div><div class=\"line\">                    parent[obj_key] = <span class=\"keyword\">False</span></div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    <span class=\"keyword\">raise</span> JsonValueError(<span class=\"string\">u'JSON value exception.'</span>, obj_value[<span class=\"number\">0</span>])</div><div class=\"line\">            <span class=\"keyword\">elif</span> obj_value[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"string\">'\"'</span>:</div><div class=\"line\">                parent[obj_key] = obj_value[<span class=\"number\">0</span>].replace(<span class=\"string\">'\"'</span>, <span class=\"string\">''</span>)</div><div class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"string\">'.'</span> <span class=\"keyword\">in</span> obj_value[<span class=\"number\">0</span>]:</div><div class=\"line\">                <span class=\"keyword\">try</span>:</div><div class=\"line\">                    parent[obj_key] = string.atof(obj_value[<span class=\"number\">0</span>])</div><div class=\"line\">                <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">                    <span class=\"keyword\">raise</span> JsonValueError(<span class=\"string\">u'Invalid literal JSON value for float.'</span>, obj_value[<span class=\"number\">0</span>])</div><div class=\"line\">                <span class=\"keyword\">except</span>:</div><div class=\"line\">                    <span class=\"keyword\">raise</span> JsonError(<span class=\"string\">u'[ERROR] Unknown Json Error.'</span>)</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                <span class=\"keyword\">try</span>:</div><div class=\"line\">                    parent[obj_key] = string.atoi(obj_value[<span class=\"number\">0</span>])</div><div class=\"line\">                <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">                    <span class=\"keyword\">raise</span> JsonValueError(<span class=\"string\">u'Invalid literal JSON value for int.'</span>, obj_value[<span class=\"number\">0</span>])</div><div class=\"line\">                <span class=\"keyword\">except</span>:</div><div class=\"line\">                    <span class=\"keyword\">raise</span> JsonError(<span class=\"string\">u'[ERROR] Unknown Json Error.'</span>)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> JsonFormatError(<span class=\"string\">u'JSON format exception.'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># calculate the brackets</span></div><div class=\"line\">    <span class=\"decorator\">@staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__cal_brackets</span><span class=\"params\">(obj, count_bb, count_sb)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> obj == <span class=\"string\">'{'</span>:</div><div class=\"line\">            count_bb += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> obj == <span class=\"string\">'}'</span>:</div><div class=\"line\">            count_bb -= <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> obj == <span class=\"string\">'['</span>:</div><div class=\"line\">            count_sb += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> obj == <span class=\"string\">']'</span>:</div><div class=\"line\">            count_sb -= <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> count_bb, count_sb</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Return the quantity of quotes.</span></div><div class=\"line\">    <span class=\"decorator\">@staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__count_quotes</span><span class=\"params\">(s, flg)</span>:</span></div><div class=\"line\">        count = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">if</span> flg == <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span> cc <span class=\"keyword\">in</span> s:</div><div class=\"line\">                <span class=\"keyword\">if</span> cc == <span class=\"string\">'\"'</span>:</div><div class=\"line\">                    count += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> flg == <span class=\"number\">1</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span> cc <span class=\"keyword\">in</span> s:</div><div class=\"line\">                <span class=\"keyword\">if</span> cc == <span class=\"string\">'\\''</span>:</div><div class=\"line\">                    count += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> count</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Check if s is the JSON data type.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__is_json_type</span><span class=\"params\">(self, s)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> s[<span class=\"number\">0</span>] == <span class=\"string\">'\"'</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">        <span class=\"keyword\">elif</span> s <span class=\"keyword\">in</span> self.__list_jdt:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Parse the JSON string data to the object list.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__parse_json_objects</span><span class=\"params\">(self, str_json)</span>:</span></div><div class=\"line\">        list_json = []</div><div class=\"line\">        str_tmp = <span class=\"string\">''</span></div><div class=\"line\">        <span class=\"keyword\">for</span> sgm_i <span class=\"keyword\">in</span> str_json:</div><div class=\"line\">            <span class=\"keyword\">if</span> sgm_i == <span class=\"string\">u'\\n'</span>:</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\">            <span class=\"keyword\">if</span> sgm_i != <span class=\"string\">' '</span>:</div><div class=\"line\">                <span class=\"keyword\">if</span> sgm_i == <span class=\"string\">'{'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">'}'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">'['</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">']'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">':'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">','</span>:</div><div class=\"line\">                    <span class=\"keyword\">if</span> str_tmp != <span class=\"string\">''</span>:</div><div class=\"line\">                        <span class=\"keyword\">if</span> str_tmp[<span class=\"number\">0</span>] == <span class=\"string\">'\\''</span> <span class=\"keyword\">or</span> str_tmp[len(str_tmp) - <span class=\"number\">1</span>] == <span class=\"string\">'\\''</span>:</div><div class=\"line\">                            <span class=\"keyword\">raise</span> JsonFormatError(</div><div class=\"line\">                                <span class=\"string\">u'JSON standard does not allow single quoted strings. &gt;&gt;&gt; '</span> + str_tmp)</div><div class=\"line\">                        <span class=\"keyword\">if</span> (str_tmp[<span class=\"number\">0</span>] == <span class=\"string\">'\"'</span> <span class=\"keyword\">and</span> str_tmp[len(str_tmp) - <span class=\"number\">1</span>] != <span class=\"string\">'\"'</span>) \\</div><div class=\"line\">                                <span class=\"keyword\">or</span> (str_tmp[<span class=\"number\">0</span>] != <span class=\"string\">'\"'</span> <span class=\"keyword\">and</span> str_tmp[len(str_tmp) - <span class=\"number\">1</span>] == <span class=\"string\">'\"'</span>):</div><div class=\"line\">                            <span class=\"keyword\">raise</span> JsonFormatError(<span class=\"string\">u'JSON verification error, missing double quote. &gt;&gt;&gt; '</span> + str_tmp)</div><div class=\"line\">                        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> self.__is_json_type(str_tmp):</div><div class=\"line\">                            <span class=\"keyword\">try</span>:</div><div class=\"line\">                                <span class=\"keyword\">if</span> float(str_tmp) / <span class=\"number\">1</span> == float(<span class=\"string\">'inf'</span>) <span class=\"keyword\">or</span> float(str_tmp) / <span class=\"number\">1</span> == float(<span class=\"string\">'-inf'</span>):</div><div class=\"line\">                                    exit(<span class=\"number\">1</span>)</div><div class=\"line\">                            <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">                                print(<span class=\"string\">u'[ERROR] JSON standard does not allow identifiers. &gt;&gt;&gt; %s'</span> % str_tmp)</div><div class=\"line\">                                exit(<span class=\"number\">1</span>)</div><div class=\"line\">                            <span class=\"keyword\">except</span>:</div><div class=\"line\">                                print(<span class=\"string\">u'[ERROR] Upper limit of Python float type. &gt;&gt;&gt; %s'</span> % str_tmp)</div><div class=\"line\">                                exit(<span class=\"number\">1</span>)</div><div class=\"line\">                        <span class=\"keyword\">if</span> sgm_i == <span class=\"string\">':'</span> <span class=\"keyword\">and</span> str_tmp[<span class=\"number\">0</span>] != <span class=\"string\">'\"'</span>:</div><div class=\"line\">                            <span class=\"keyword\">raise</span> JsonFormatError(</div><div class=\"line\">                                <span class=\"string\">u'JSON standard allows only double quoted string as property key. &gt;&gt;&gt; '</span> + str_tmp)</div><div class=\"line\">                        list_json.append(str_tmp)</div><div class=\"line\">                        str_tmp = <span class=\"string\">''</span></div><div class=\"line\">                    list_json.append(sgm_i)</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    str_tmp = str_tmp + sgm_i</div><div class=\"line\">            <span class=\"keyword\">elif</span> len(str_tmp) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> str_tmp[<span class=\"number\">0</span>] == <span class=\"string\">'\"'</span> <span class=\"keyword\">and</span> JsonParser.__count_quotes(str_tmp, <span class=\"number\">0</span>) == <span class=\"number\">1</span>:</div><div class=\"line\">                str_tmp = str_tmp + sgm_i</div><div class=\"line\">        <span class=\"keyword\">return</span> list_json</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># To determine the JSON object type</span></div><div class=\"line\">    <span class=\"decorator\">@staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get_json_obj_type</span><span class=\"params\">(str_json)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> str_json:</div><div class=\"line\">            <span class=\"keyword\">if</span> ch == <span class=\"string\">u' '</span>:</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\">            <span class=\"keyword\">elif</span> ch == <span class=\"string\">u'['</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> list</div><div class=\"line\">            <span class=\"keyword\">elif</span> ch == <span class=\"string\">u'{'</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> dict</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                <span class=\"keyword\">raise</span> JsonInvalidKeywordError(</div><div class=\"line\">                    <span class=\"string\">u'JSON standard not allow to begin with this character (root character). &gt;&gt;&gt; %s'</span>, ch)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Parse None, True, False to JSON value</span></div><div class=\"line\">    <span class=\"decorator\">@staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__parse_jdt</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> s == <span class=\"string\">'None'</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'null'</span></div><div class=\"line\">        <span class=\"keyword\">if</span> s == <span class=\"string\">'True'</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'true'</span></div><div class=\"line\">        <span class=\"keyword\">if</span> s == <span class=\"string\">'False'</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'false'</span></div><div class=\"line\">        <span class=\"keyword\">return</span> s</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Parse the dictionary to JSON string.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__dict_to_json_str</span><span class=\"params\">(self, dict_json)</span>:</span></div><div class=\"line\">        str_json = str(dict_json)</div><div class=\"line\">        list_json = []</div><div class=\"line\">        str_tmp = <span class=\"string\">''</span></div><div class=\"line\">        <span class=\"keyword\">for</span> sgm_i <span class=\"keyword\">in</span> str_json:</div><div class=\"line\">            <span class=\"keyword\">if</span> sgm_i == <span class=\"string\">u'\\n'</span>:</div><div class=\"line\">                <span class=\"keyword\">continue</span></div><div class=\"line\">            <span class=\"keyword\">if</span> sgm_i != <span class=\"string\">' '</span>:</div><div class=\"line\">                <span class=\"keyword\">if</span> sgm_i == <span class=\"string\">'{'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">'}'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">'['</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">']'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">':'</span> <span class=\"keyword\">or</span> sgm_i == <span class=\"string\">','</span>:</div><div class=\"line\">                    <span class=\"keyword\">if</span> str_tmp != <span class=\"string\">''</span>:</div><div class=\"line\">                        <span class=\"keyword\">if</span> str_tmp[<span class=\"number\">0</span>] == <span class=\"string\">'\\''</span> <span class=\"keyword\">or</span> str_tmp[len(str_tmp) - <span class=\"number\">1</span>] == <span class=\"string\">'\\''</span>:</div><div class=\"line\">                            str_tmp = <span class=\"string\">'\"'</span> + str_tmp[<span class=\"number\">1</span>:len(str_tmp) - <span class=\"number\">1</span>] + <span class=\"string\">'\"'</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> sgm_i == <span class=\"string\">':'</span> <span class=\"keyword\">and</span> str_tmp[<span class=\"number\">0</span>] != <span class=\"string\">'\"'</span>:</div><div class=\"line\">                            <span class=\"keyword\">raise</span> JsonFormatError(</div><div class=\"line\">                                <span class=\"string\">u'JSON standard allows only double quoted string as property key. &gt;&gt;&gt; Key: '</span> + str_tmp)</div><div class=\"line\">                        <span class=\"keyword\">if</span> list_json[len(list_json) - <span class=\"number\">1</span>] == <span class=\"string\">':'</span>:</div><div class=\"line\">                            str_tmp = self.__parse_jdt(str_tmp)</div><div class=\"line\">                        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.__is_json_type(str_tmp):</div><div class=\"line\">                            <span class=\"keyword\">try</span>:</div><div class=\"line\">                                <span class=\"keyword\">if</span> float(str_tmp) / <span class=\"number\">1</span> == float(<span class=\"string\">'inf'</span>) <span class=\"keyword\">or</span> float(str_tmp) / <span class=\"number\">1</span> == float(<span class=\"string\">'-inf'</span>):</div><div class=\"line\">                                    exit(<span class=\"number\">1</span>)</div><div class=\"line\">                            <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">                                print(<span class=\"string\">u'[ERROR] JSON standard does not allow identifiers. &gt;&gt;&gt; %s'</span> % str_tmp)</div><div class=\"line\">                                exit(<span class=\"number\">1</span>)</div><div class=\"line\">                            <span class=\"keyword\">except</span>:</div><div class=\"line\">                                print(<span class=\"string\">u'[ERROR] Upper limit of Python float type. &gt;&gt;&gt; %s'</span> % str_tmp)</div><div class=\"line\">                                exit(<span class=\"number\">1</span>)</div><div class=\"line\">                        list_json.append(str_tmp)</div><div class=\"line\">                        str_tmp = <span class=\"string\">''</span></div><div class=\"line\">                    list_json.append(sgm_i)</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    str_tmp = str_tmp + sgm_i</div><div class=\"line\">            <span class=\"keyword\">elif</span> len(str_tmp) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> str_tmp[<span class=\"number\">0</span>] == <span class=\"string\">'\\''</span> <span class=\"keyword\">and</span> JsonParser.__count_quotes(str_tmp, <span class=\"number\">1</span>) == <span class=\"number\">1</span>:</div><div class=\"line\">                str_tmp = str_tmp + sgm_i</div><div class=\"line\">        str_tmp = <span class=\"string\">''</span></div><div class=\"line\">        <span class=\"keyword\">for</span> sgm_j <span class=\"keyword\">in</span> list_json:</div><div class=\"line\">            str_tmp += sgm_j</div><div class=\"line\">        <span class=\"keyword\">return</span> str_tmp</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Deep copy a JSON object</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__deep_copy</span><span class=\"params\">(self, obj)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> isinstance(obj, list):</div><div class=\"line\">            <span class=\"keyword\">return</span> [self.__deep_copy(item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> obj]</div><div class=\"line\">        <span class=\"keyword\">elif</span> isinstance(obj, dict):</div><div class=\"line\">            <span class=\"keyword\">return</span> dict((key, self.__deep_copy(obj[key])) <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> obj)</div><div class=\"line\">        <span class=\"keyword\">return</span> obj</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Load a external JSON file into json_dict.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loadJson</span><span class=\"params\">(self, f)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">u'[INFO] Load the JSON file: %s'</span> % f)</div><div class=\"line\">        str_json = <span class=\"string\">''</span></div><div class=\"line\">        file_json = open(f, <span class=\"string\">'r'</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">                line = file_json.readline()</div><div class=\"line\">                <span class=\"keyword\">if</span> len(line) == <span class=\"number\">0</span>:</div><div class=\"line\">                    <span class=\"keyword\">break</span></div><div class=\"line\">                str_json += line</div><div class=\"line\">        <span class=\"keyword\">except</span> IOError:</div><div class=\"line\">            print(<span class=\"string\">u'[ERROR] IO error, please check!'</span>)</div><div class=\"line\">            exit(<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">u'[ERROR] Program exception!'</span>)</div><div class=\"line\">            exit(<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">finally</span>:</div><div class=\"line\">            file_json.close()</div><div class=\"line\">        self.load(str_json)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Dump the class data into a JSON file, overwrite if file exist, failed if IO error.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dumpJson</span><span class=\"params\">(self, f)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">u'[INFO] Dump to JSON file: %s'</span> % f)</div><div class=\"line\">        file_json = open(f, <span class=\"string\">'w'</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            file_json.write(self.__dict_to_json_str(self.data_json))</div><div class=\"line\">        <span class=\"keyword\">except</span> IOError:</div><div class=\"line\">            print(<span class=\"string\">'[ERROR] IO error, please check!'</span>)</div><div class=\"line\">            exit(<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">finally</span>:</div><div class=\"line\">            file_json.close()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Load a object into class data and skip non-string type keys</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loadDict</span><span class=\"params\">(self, d)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">u'[INFO] Load dictionary.'</span>)</div><div class=\"line\">        str_json = str(d)</div><div class=\"line\">        str_tgt = <span class=\"string\">''</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(str_json)):</div><div class=\"line\">            <span class=\"keyword\">if</span> str_json[i] == <span class=\"string\">'\\''</span> <span class=\"keyword\">and</span> str_json[i - <span class=\"number\">1</span>] != <span class=\"string\">'\\\\'</span>:</div><div class=\"line\">                str_tgt += <span class=\"string\">'\"'</span></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                str_tgt += str_json[i]</div><div class=\"line\">        str_tgt = str_tgt.replace(<span class=\"string\">': None,'</span>, <span class=\"string\">': null,'</span>).replace(<span class=\"string\">': False,'</span>, <span class=\"string\">': false,'</span>).replace(<span class=\"string\">': True,'</span>, <span class=\"string\">': true,'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> isinstance(d, list):</div><div class=\"line\">            self.data_json = list()</div><div class=\"line\">            self.__build_json_data(self.data_json, self.__parse_json_objects(str_tgt), list)</div><div class=\"line\">        <span class=\"keyword\">elif</span> isinstance(d, dict):</div><div class=\"line\">            self.data_json = dict()</div><div class=\"line\">            self.__build_json_data(self.data_json, self.__parse_json_objects(str_tgt), dict)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Return a deep copy dump JSON object</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dumpDict</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">u'[INFO] Return a dump object.'</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> self.__deep_copy(self.data_json)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># Update the JSON data in dictionary</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, d)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            self.data_json.update(d)</div><div class=\"line\">        <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">            print(<span class=\"string\">u'[ERROR] Value error, please check!'</span>)</div><div class=\"line\">            exit(<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">u'[ERROR] Program exception!'</span>)</div><div class=\"line\">            exit(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonError</span><span class=\"params\">(Exception)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, msg)</span>:</span></div><div class=\"line\">        Exception.__init__(self, <span class=\"string\">u'%s'</span> % msg)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonFormatError</span><span class=\"params\">(JsonError)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, msg)</span>:</span></div><div class=\"line\">        JsonError.__init__(self, <span class=\"string\">u'[ERROR] %s'</span> % msg)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonValueError</span><span class=\"params\">(JsonError)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, msg, var)</span>:</span></div><div class=\"line\">        JsonError.__init__(self, <span class=\"string\">u'[ERROR] %s &gt;&gt;&gt; %s'</span> % (msg, var))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonInvalidKeywordError</span><span class=\"params\">(JsonError)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, msg, kw)</span>:</span></div><div class=\"line\">        JsonError.__init__(self, <span class=\"string\">u'[ERROR] %s &gt;&gt;&gt; %s'</span> % (msg, kw))</div></pre></td></tr></table></figure>\n\n","source":"_posts/2015-01-15-JSON解析器小练习.md","raw":"title: \"JSON解析器小练习\"\ndate: 2015-01-15 09:50:01\ncategories:\n- 猿人日常\ntags:\n- Python\n- JSON\n- 解析器\n---\n>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。\n\n来到网易的第三天，我还是在Python的学习阶段，不过对Python一些理论性的东西已经有所理解。与此同时，主管也有给我一些小练习，让我边做边熟悉。是的，学习一种新的编程语言最有效率的方法就是边看书边打代码做小练习，这在我之前的学习中也深有体会。\n\n在此顺便记录一下小练习`JSON Parser`的代码：`初学勿喷`\n```python\n# -*- coding: utf-8 -*-\nimport string\n\nclass JsonParser:\n    def __init__(self):\n        self.data_json = None\n\n    # JSON type: null, true and false.\n    __list_jdt = [u'null', u'true', u'false']\n\n    # Read a string JSON data into the class, with no return value.\n    def load(self, s):\n        print(u'[INFO] Load JSON string.')\n        json_type = JsonParser.__get_json_obj_type(s)\n        if json_type == list:\n            self.data_json = list()\n        elif json_type == dict:\n            self.data_json = dict()\n        self.__build_json_data(self.data_json, self.__parse_json_objects(s), json_type)\n\n    # Reference to the dictionary data and return the JSON string.\n    def dump(self):\n        return str(self.data_json)\n\n    # Build with parent and child relationship, to align the JSON data structure, with no return value.\n    def __build_json_data(self, parent, obj, typ):\n        if typ == dict:\n            count_bb = 0\n            count_sb = 0\n            obj_key = ''\n            obj_value = []\n            flg_d = True\n            for i in range(len(obj)):\n                if flg_d:\n                    if obj[i] == ':':\n                        flg_d = not flg_d\n                        obj_key = obj[i - 1].replace('\"', '')\n                else:\n                    count_bb, count_sb = JsonParser.__cal_brackets(obj[i], count_bb, count_sb)\n                    obj_value.append(obj[i])\n                    if count_bb + count_sb == 0:\n                        flg_d = not flg_d\n                        self.__build_dict(parent, obj_key, obj_value)\n                        obj_key = ''\n                        obj_value = []\n        elif typ == list:\n            count_bb = 0\n            count_sb = 0\n            list_obj = []\n            del obj[0]\n            del obj[len(obj) - 1]\n            for i in range(len(obj)):\n                count_bb, count_sb = JsonParser.__cal_brackets(obj[i], count_bb, count_sb)\n                list_obj.append(obj[i])\n                if count_bb + count_sb == 0:\n                    self.__build_list(parent, list_obj)\n                    list_obj = []\n\n    # Build list data\n    def __build_list(self, parent, list_obj):\n        if list_obj[0] != ',':\n            if list_obj[0] == '{':\n                parent.append(list_obj)\n                parent[len(parent) - 1] = dict()\n                self.__build_json_data(parent[len(parent) - 1], list_obj, dict)\n            elif list_obj[0] == '[':\n                parent.append(list_obj)\n                parent[len(parent) - 1] = list()\n                self.__build_json_data(parent[len(parent) - 1], list_obj, list)\n\n    # Build dictionary data\n    def __build_dict(self, parent, obj_key, obj_value):\n        if obj_value[0] == '{':\n            parent[obj_key] = dict()\n            self.__build_json_data(parent[obj_key], obj_value, dict)\n        elif obj_value[0] == '[':\n            parent[obj_key] = list()\n            self.__build_json_data(parent[obj_key], obj_value, list)\n        elif len(obj_value) == 1:\n            if obj_value[0] in self.__list_jdt:\n                if obj_value[0] == self.__list_jdt[0]:\n                    parent[obj_key] = None\n                elif obj_value[0] == self.__list_jdt[1]:\n                    parent[obj_key] = True\n                elif obj_value[0] == self.__list_jdt[2]:\n                    parent[obj_key] = False\n                else:\n                    raise JsonValueError(u'JSON value exception.', obj_value[0])\n            elif obj_value[0][0] == '\"':\n                parent[obj_key] = obj_value[0].replace('\"', '')\n            elif '.' in obj_value[0]:\n                try:\n                    parent[obj_key] = string.atof(obj_value[0])\n                except ValueError:\n                    raise JsonValueError(u'Invalid literal JSON value for float.', obj_value[0])\n                except:\n                    raise JsonError(u'[ERROR] Unknown Json Error.')\n            else:\n                try:\n                    parent[obj_key] = string.atoi(obj_value[0])\n                except ValueError:\n                    raise JsonValueError(u'Invalid literal JSON value for int.', obj_value[0])\n                except:\n                    raise JsonError(u'[ERROR] Unknown Json Error.')\n        else:\n            raise JsonFormatError(u'JSON format exception.')\n\n    # calculate the brackets\n    @staticmethod\n    def __cal_brackets(obj, count_bb, count_sb):\n        if obj == '{':\n            count_bb += 1\n        if obj == '}':\n            count_bb -= 1\n        if obj == '[':\n            count_sb += 1\n        if obj == ']':\n            count_sb -= 1\n        return count_bb, count_sb\n\n    # Return the quantity of quotes.\n    @staticmethod\n    def __count_quotes(s, flg):\n        count = 0\n        if flg == 0:\n            for cc in s:\n                if cc == '\"':\n                    count += 1\n        if flg == 1:\n            for cc in s:\n                if cc == '\\'':\n                    count += 1\n        return count\n\n    # Check if s is the JSON data type.\n    def __is_json_type(self, s):\n        if s[0] == '\"':\n            return True\n        elif s in self.__list_jdt:\n            return True\n        else:\n            return False\n\n    # Parse the JSON string data to the object list.\n    def __parse_json_objects(self, str_json):\n        list_json = []\n        str_tmp = ''\n        for sgm_i in str_json:\n            if sgm_i == u'\\n':\n                continue\n            if sgm_i != ' ':\n                if sgm_i == '{' or sgm_i == '}' or sgm_i == '[' or sgm_i == ']' or sgm_i == ':' or sgm_i == ',':\n                    if str_tmp != '':\n                        if str_tmp[0] == '\\'' or str_tmp[len(str_tmp) - 1] == '\\'':\n                            raise JsonFormatError(\n                                u'JSON standard does not allow single quoted strings. >>> ' + str_tmp)\n                        if (str_tmp[0] == '\"' and str_tmp[len(str_tmp) - 1] != '\"') \\\n                                or (str_tmp[0] != '\"' and str_tmp[len(str_tmp) - 1] == '\"'):\n                            raise JsonFormatError(u'JSON verification error, missing double quote. >>> ' + str_tmp)\n                        elif not self.__is_json_type(str_tmp):\n                            try:\n                                if float(str_tmp) / 1 == float('inf') or float(str_tmp) / 1 == float('-inf'):\n                                    exit(1)\n                            except ValueError:\n                                print(u'[ERROR] JSON standard does not allow identifiers. >>> %s' % str_tmp)\n                                exit(1)\n                            except:\n                                print(u'[ERROR] Upper limit of Python float type. >>> %s' % str_tmp)\n                                exit(1)\n                        if sgm_i == ':' and str_tmp[0] != '\"':\n                            raise JsonFormatError(\n                                u'JSON standard allows only double quoted string as property key. >>> ' + str_tmp)\n                        list_json.append(str_tmp)\n                        str_tmp = ''\n                    list_json.append(sgm_i)\n                else:\n                    str_tmp = str_tmp + sgm_i\n            elif len(str_tmp) > 0 and str_tmp[0] == '\"' and JsonParser.__count_quotes(str_tmp, 0) == 1:\n                str_tmp = str_tmp + sgm_i\n        return list_json\n\n    # To determine the JSON object type\n    @staticmethod\n    def __get_json_obj_type(str_json):\n        for ch in str_json:\n            if ch == u' ':\n                continue\n            elif ch == u'[':\n                return list\n            elif ch == u'{':\n                return dict\n            else:\n                raise JsonInvalidKeywordError(\n                    u'JSON standard not allow to begin with this character (root character). >>> %s', ch)\n\n    # Parse None, True, False to JSON value\n    @staticmethod\n    def __parse_jdt(s):\n        if s == 'None':\n            return 'null'\n        if s == 'True':\n            return 'true'\n        if s == 'False':\n            return 'false'\n        return s\n\n    # Parse the dictionary to JSON string.\n    def __dict_to_json_str(self, dict_json):\n        str_json = str(dict_json)\n        list_json = []\n        str_tmp = ''\n        for sgm_i in str_json:\n            if sgm_i == u'\\n':\n                continue\n            if sgm_i != ' ':\n                if sgm_i == '{' or sgm_i == '}' or sgm_i == '[' or sgm_i == ']' or sgm_i == ':' or sgm_i == ',':\n                    if str_tmp != '':\n                        if str_tmp[0] == '\\'' or str_tmp[len(str_tmp) - 1] == '\\'':\n                            str_tmp = '\"' + str_tmp[1:len(str_tmp) - 1] + '\"'\n                        if sgm_i == ':' and str_tmp[0] != '\"':\n                            raise JsonFormatError(\n                                u'JSON standard allows only double quoted string as property key. >>> Key: ' + str_tmp)\n                        if list_json[len(list_json) - 1] == ':':\n                            str_tmp = self.__parse_jdt(str_tmp)\n                        if not self.__is_json_type(str_tmp):\n                            try:\n                                if float(str_tmp) / 1 == float('inf') or float(str_tmp) / 1 == float('-inf'):\n                                    exit(1)\n                            except ValueError:\n                                print(u'[ERROR] JSON standard does not allow identifiers. >>> %s' % str_tmp)\n                                exit(1)\n                            except:\n                                print(u'[ERROR] Upper limit of Python float type. >>> %s' % str_tmp)\n                                exit(1)\n                        list_json.append(str_tmp)\n                        str_tmp = ''\n                    list_json.append(sgm_i)\n                else:\n                    str_tmp = str_tmp + sgm_i\n            elif len(str_tmp) > 0 and str_tmp[0] == '\\'' and JsonParser.__count_quotes(str_tmp, 1) == 1:\n                str_tmp = str_tmp + sgm_i\n        str_tmp = ''\n        for sgm_j in list_json:\n            str_tmp += sgm_j\n        return str_tmp\n\n    # Deep copy a JSON object\n    def __deep_copy(self, obj):\n        if isinstance(obj, list):\n            return [self.__deep_copy(item) for item in obj]\n        elif isinstance(obj, dict):\n            return dict((key, self.__deep_copy(obj[key])) for key in obj)\n        return obj\n\n    # Load a external JSON file into json_dict.\n    def loadJson(self, f):\n        print(u'[INFO] Load the JSON file: %s' % f)\n        str_json = ''\n        file_json = open(f, 'r')\n        try:\n            while True:\n                line = file_json.readline()\n                if len(line) == 0:\n                    break\n                str_json += line\n        except IOError:\n            print(u'[ERROR] IO error, please check!')\n            exit(1)\n        except:\n            print(u'[ERROR] Program exception!')\n            exit(1)\n        finally:\n            file_json.close()\n        self.load(str_json)\n\n    # Dump the class data into a JSON file, overwrite if file exist, failed if IO error.\n    def dumpJson(self, f):\n        print(u'[INFO] Dump to JSON file: %s' % f)\n        file_json = open(f, 'w')\n        try:\n            file_json.write(self.__dict_to_json_str(self.data_json))\n        except IOError:\n            print('[ERROR] IO error, please check!')\n            exit(1)\n        finally:\n            file_json.close()\n\n    # Load a object into class data and skip non-string type keys\n    def loadDict(self, d):\n        print(u'[INFO] Load dictionary.')\n        str_json = str(d)\n        str_tgt = ''\n        for i in range(len(str_json)):\n            if str_json[i] == '\\'' and str_json[i - 1] != '\\\\':\n                str_tgt += '\"'\n            else:\n                str_tgt += str_json[i]\n        str_tgt = str_tgt.replace(': None,', ': null,').replace(': False,', ': false,').replace(': True,', ': true,')\n        if isinstance(d, list):\n            self.data_json = list()\n            self.__build_json_data(self.data_json, self.__parse_json_objects(str_tgt), list)\n        elif isinstance(d, dict):\n            self.data_json = dict()\n            self.__build_json_data(self.data_json, self.__parse_json_objects(str_tgt), dict)\n\n    # Return a deep copy dump JSON object\n    def dumpDict(self):\n        print(u'[INFO] Return a dump object.')\n        return self.__deep_copy(self.data_json)\n\n    # Update the JSON data in dictionary\n    def update(self, d):\n        try:\n            self.data_json.update(d)\n        except ValueError:\n            print(u'[ERROR] Value error, please check!')\n            exit(1)\n        except:\n            print(u'[ERROR] Program exception!')\n            exit(1)\n\n\nclass JsonError(Exception):\n    def __init__(self, msg):\n        Exception.__init__(self, u'%s' % msg)\n\n\nclass JsonFormatError(JsonError):\n    def __init__(self, msg):\n        JsonError.__init__(self, u'[ERROR] %s' % msg)\n\n\nclass JsonValueError(JsonError):\n    def __init__(self, msg, var):\n        JsonError.__init__(self, u'[ERROR] %s >>> %s' % (msg, var))\n\n\nclass JsonInvalidKeywordError(JsonError):\n    def __init__(self, msg, kw):\n        JsonError.__init__(self, u'[ERROR] %s >>> %s' % (msg, kw))\n```\n","slug":"JSON解析器小练习","updated":1431306846000,"excerpt":"","_id":"bwlg5wz4y1qjwtg4","comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"PyQt","_id":"nmldk4hu366t8ktw","posts":["mjn5obsgcnd6detm","g0svv9li2jpb6k3d","sot44szsa3p7lq26","iqthgkqq6c5mvs5k","jyt1o9wvks4f88sb"]},{"name":"资源文件","_id":"sgppjax8q005utka","posts":["mjn5obsgcnd6detm"]},{"name":"qrc","_id":"crxl9ld2ghq8izj9","posts":["mjn5obsgcnd6detm"]},{"name":"无边框窗口","_id":"53pw2lh340xusfjq","posts":["g0svv9li2jpb6k3d"]},{"name":"任务栏","_id":"8ndaohvxlk2lql1z","posts":["g0svv9li2jpb6k3d"]},{"name":"SVN","_id":"evvgdtn5pqsys78s","posts":["6pusrcj3mb4g3bfv"]},{"name":"开发管理","_id":"gexy9pwbln4jsza2","posts":["6pusrcj3mb4g3bfv"]},{"name":"版本控制","_id":"az0s3islrhe48ovk","posts":["6pusrcj3mb4g3bfv"]},{"name":"Trunk","_id":"z8m8aoivyi0ctrfb","posts":["6pusrcj3mb4g3bfv"]},{"name":"Branch","_id":"s7wumccbwq84eiez","posts":["6pusrcj3mb4g3bfv"]},{"name":"Tags","_id":"075706iaeqolbwny","posts":["6pusrcj3mb4g3bfv"]},{"name":"Qt","_id":"ycxziuf98rkp8m02","posts":["9wcfjw7eb82cle3n","0lbqdvv8clo2h693","u1bsjt2ubkr67a8v","ue0pva1rwlnt6ls9","j573lu2v18wwjwts","z3oiy249wv9ik750","q3f4s1db7kqdia0y","fyuuojeoi40p5joe","vhifgrnxjej1xmpm","n5xovi3r15js9fua","1ozetm98t5y3cx4g","0i7fnqmj2dj2jxtz","0gxvdboiq6ljput7","74bft70ix6wn7pp0","hag00ij41u20ccja","3uxh60a7w5jaykt8","jyyef3adlbkolk92"]},{"name":"QFontMetrics","_id":"qsthc0q63bw2486c","posts":["9wcfjw7eb82cle3n"]},{"name":"setVisible","_id":"y2rbtgpyn4jgustx","posts":["0lbqdvv8clo2h693"]},{"name":"setHidden","_id":"ja7led5bn6zbhkxe","posts":["0lbqdvv8clo2h693"]},{"name":"show","_id":"7fmw7sesniw9p1dj","posts":["0lbqdvv8clo2h693"]},{"name":"hide","_id":"0whit5c4a4ieprce","posts":["0lbqdvv8clo2h693"]},{"name":"close","_id":"v7cpksxssnmbvwfx","posts":["0lbqdvv8clo2h693"]},{"name":"QLabel","_id":"64aols9iwmw96ty8","posts":["u1bsjt2ubkr67a8v","ue0pva1rwlnt6ls9","hag00ij41u20ccja"]},{"name":"显示网络图片","_id":"1a5ylj1ew4qcavay","posts":["ue0pva1rwlnt6ls9"]},{"name":"QThread","_id":"3dbr054fi1tql2ug","posts":["j573lu2v18wwjwts","jdez5mqfltze4mqw"]},{"name":"Linux","_id":"xdg529s3cek3qqt1","posts":["3jl34h1ml4zv1nnz","65y6y95ikqvh3tc3"]},{"name":"获取运行路径","_id":"ismvvc24c0hypp9w","posts":["3jl34h1ml4zv1nnz"]},{"name":"ASCII","_id":"2j5941kqa44n59dj","posts":["wtgogrza6xk7nnp3"]},{"name":"新起点","_id":"sdb4sy8v5fh8i517","posts":["zyq7op9lj65cukal"]},{"name":"奋斗","_id":"3zcnbn9setgxuor9","posts":["zyq7op9lj65cukal"]},{"name":"Python","_id":"3bwun56tv7lalf9k","posts":["n9k2aom6k5vc843e","j9ngn4ixnfc36jho","tm4uywu8k16m65ka","odrvcxd4589akkhb","bwlg5wz4y1qjwtg4"]},{"name":"正则表达式","_id":"yb0jyqwoc5uhl1xh","posts":["n9k2aom6k5vc843e","sfc4m8edt5bfx7eo","0i7fnqmj2dj2jxtz"]},{"name":"main","_id":"dyd0bryk8b1rst9g","posts":["j9ngn4ixnfc36jho"]},{"name":"assert","_id":"ssp1lgcx9ff9fg5o","posts":["tm4uywu8k16m65ka"]},{"name":"窗口风格","_id":"sysdkahssjfhuopp","posts":["sot44szsa3p7lq26"]},{"name":"百度云","_id":"rwnmq57079fl11vb","posts":["wbd5mbc7de90igql"]},{"name":"网站备案","_id":"sq0fmjp8ji4nq708","posts":["wbd5mbc7de90igql"]},{"name":"delete","_id":"ay58ftdklt83adfv","posts":["z3oiy249wv9ik750"]},{"name":"内存管理","_id":"0plw9xqd7tnl0999","posts":["z3oiy249wv9ik750"]},{"name":"C++","_id":"69s8fo898tszh9p1","posts":["z3oiy249wv9ik750"]},{"name":"QtWebkit","_id":"y6dal2tmjzagxp8r","posts":["q3f4s1db7kqdia0y"]},{"name":"Git","_id":"pyz872qzssac5sut","posts":["jtob0zmy721k28xg"]},{"name":"add","_id":"srie2a2zkeb1koh7","posts":["jtob0zmy721k28xg"]},{"name":"信号","_id":"bbbe0lvo08zcm4v3","posts":["fyuuojeoi40p5joe"]},{"name":"槽","_id":"bq9vy0j638f5yy4p","posts":["fyuuojeoi40p5joe"]},{"name":"mapToGlobal","_id":"yvm50e1cnpimnint","posts":["vhifgrnxjej1xmpm"]},{"name":"mapToParent","_id":"mfvwmsfpds4dlui1","posts":["vhifgrnxjej1xmpm"]},{"name":"fatal","_id":"xgsjmlcr489el37m","posts":["a5ymqm3pmrgx8c1m"]},{"name":"QtWebKit","_id":"qegbn5t5ggkds76e","posts":["n5xovi3r15js9fua"]},{"name":"QWebView","_id":"fgd1cobx78rlxtt7","posts":["n5xovi3r15js9fua"]},{"name":"透明网页","_id":"lwl993ip3oiriht5","posts":["n5xovi3r15js9fua"]},{"name":"uuid","_id":"7rp75tvzwlm9nlep","posts":["74uefl28uuzudds2","iie2w64o4z2snr3b"]},{"name":"border-image","_id":"ivqujun5i6tcl8vp","posts":["b68twshop34rdtzj"]},{"name":"百分数","_id":"p5c1ngyoz58xgbq0","posts":["lz3wn0v5waa6eu82"]},{"name":"格式化","_id":"cj3x87kfwlgkedgh","posts":["lz3wn0v5waa6eu82","v4y50s8d8zqnocvv","wdmdc6cpxuylhg2v","u5a10r1jwq1rh3td"]},{"name":"墨菲定律","_id":"lnejh3redqsqx2l8","posts":["8ozldxq0q2popr6a"]},{"name":"setMouseTracking","_id":"al9t7v05rpbezayz","posts":["1ozetm98t5y3cx4g"]},{"name":"time","_id":"fm37qj75fwxyspio","posts":["c12stl7ndbvue5an"]},{"name":"UnicodeEncodeError","_id":"lkec4u9615m3um6k","posts":["dmw1vsbuvjkr6aye"]},{"name":"ascii","_id":"qlo9snpo7be5n7wz","posts":["dmw1vsbuvjkr6aye"]},{"name":"format","_id":"woafk9p7mjvoa9uf","posts":["v4y50s8d8zqnocvv"]},{"name":"获得html标签数据","_id":"cw38nfexbau434l9","posts":["sfc4m8edt5bfx7eo"]},{"name":"获取屏幕分辨率","_id":"z7t8ewhigklgkon4","posts":["0gxvdboiq6ljput7"]},{"name":"Tooltips","_id":"g4x6xyai6qnhdp1n","posts":["74bft70ix6wn7pp0"]},{"name":"富文本","_id":"dzvr85vk4rur64rk","posts":["74bft70ix6wn7pp0"]},{"name":"阴影","_id":"hvbp1no0xepoxbmz","posts":["74bft70ix6wn7pp0"]},{"name":"自适应","_id":"0ft511erlbqglqp8","posts":["74bft70ix6wn7pp0"]},{"name":"字符个数","_id":"f990cqsp2h8pwon1","posts":["89xw3cwzeaosg4on"]},{"name":"字符串","_id":"nxcejl8ilwzrar20","posts":["89xw3cwzeaosg4on","u5a10r1jwq1rh3td"]},{"name":"小数运算","_id":"pmzty31pfn27c2cd","posts":["dq6dkp99qtivft8q"]},{"name":"除法","_id":"a519i2mbeyyesj5d","posts":["dq6dkp99qtivft8q"]},{"name":"文件操作","_id":"c4c29xhlr6ud44gm","posts":["r2390x5x5rkpm10s"]},{"name":"单例模式","_id":"p97l8pgjp49g1kf1","posts":["hk0vo11eb4hkkkny","fszvq0tnl8mvrvc4","xltntm2zyn4jtnrv"]},{"name":"禁止选择文本","_id":"hsekkaj3s0b44cfv","posts":["kn75l7qesxdpjz8p"]},{"name":"文件名分隔符","_id":"67scikgmyteqah09","posts":["icj6qh6wsdnnh8sv"]},{"name":"分割路径","_id":"4knexp4bgi0ndk3a","posts":["icj6qh6wsdnnh8sv"]},{"name":"printf","_id":"qfwf0tq8dfqa7i9q","posts":["wdmdc6cpxuylhg2v"]},{"name":"补零","_id":"a1e9p1tmnyc0vroi","posts":["wdmdc6cpxuylhg2v"]},{"name":"＆＆","_id":"4fz8rlqyel08jnb9","posts":["j4nzm2sasrmujc1u"]},{"name":"｜｜","_id":"yksaafhqz3r3q024","posts":["j4nzm2sasrmujc1u"]},{"name":"date","_id":"dbft5z8h6b87e181","posts":["65y6y95ikqvh3tc3"]},{"name":"注释","_id":"vibk2fx65um9jn6a","posts":["2zxi8tsyde0uloti"]},{"name":"剪贴板","_id":"o4efx3bv95c0kl5r","posts":["qkqph5e8290sjwo5"]},{"name":"复制到剪贴板","_id":"irnehcg1ybto5ien","posts":["qkqph5e8290sjwo5"]},{"name":"py2exe","_id":"eewkwewkkxuyjkv6","posts":["2dw6fsd7zq9ezqh8","1sn562dxluf91hov"]},{"name":"内置ICON","_id":"3dn0rj9c995wvm7y","posts":["kxbs8lxoliuk9vo5"]},{"name":"PyChecker","_id":"mug5r49a1gt5io03","posts":["bwjeo26sxe9v4x6a"]},{"name":"Notepad++","_id":"hf4k1nde4uh9xzzt","posts":["1zcfq9mqowwsacrg"]},{"name":"命令行参数","_id":"8a5irnnnilrgj2vz","posts":["1zcfq9mqowwsacrg"]},{"name":"QSS","_id":"sdwid57j2p3h8k0k","posts":["iqthgkqq6c5mvs5k","jyt1o9wvks4f88sb"]},{"name":"QTabWidget","_id":"lb6hmaejkkr4m9rx","posts":["iqthgkqq6c5mvs5k"]},{"name":"lambda","_id":"sw3pwlvurasnip25","posts":["5zjqpuy8t13fyoj4"]},{"name":"千分位逗号分隔","_id":"bcy0qwypjvfdesn2","posts":["u5a10r1jwq1rh3td"]},{"name":"paintEvent","_id":"0072x8lllpqntwm2","posts":["3uxh60a7w5jaykt8"]},{"name":"绘制阴影","_id":"5lg6u3ckbubdyzp8","posts":["3uxh60a7w5jaykt8"]},{"name":"QScrollBar","_id":"jllo95ybn9c6u65y","posts":["jyt1o9wvks4f88sb"]},{"name":"鼠标穿透","_id":"ie1edueowa1un0x4","posts":["p8sadt787a28weuo"]},{"name":"QTimer","_id":"r6ojfrl8s8wakh38","posts":["jdez5mqfltze4mqw"]},{"name":"时间精度","_id":"b1gu720oehyj990h","posts":["jdez5mqfltze4mqw"]},{"name":"计时器精度","_id":"kcxnswfk2b1olapy","posts":["jdez5mqfltze4mqw"]},{"name":"截断文字","_id":"yah5vm2u5sbbrryf","posts":["jyyef3adlbkolk92"]},{"name":"透明度","_id":"0q3x686sq60pwc8e","posts":["at03tlqg3qbrcwt7"]},{"name":"ConfigParser","_id":"qo2eoio4u26wvbes","posts":["ep5heraxgxkffo5l"]},{"name":"文件编码","_id":"nhjv36aln5z9t26z","posts":["ep5heraxgxkffo5l"]},{"name":"singleton","_id":"frg3uhagpg3ifeth","posts":["fszvq0tnl8mvrvc4","xltntm2zyn4jtnrv"]},{"name":"Aero","_id":"zf6o7sehamgzfu3h","posts":["suf0b0jxc2mav0dc"]},{"name":"毛玻璃","_id":"d692tbsiqm52whzs","posts":["suf0b0jxc2mav0dc"]},{"name":"汉化","_id":"bq5kmcjkgq60y1bj","posts":["orlmodgx70hawt21"]},{"name":"标准对话框","_id":"6tapig2p0jif2v5z","posts":["orlmodgx70hawt21"]},{"name":"系统版本判断","_id":"4xagl40698e73q0t","posts":["3sntfkg41iqb2szk"]},{"name":"winapi","_id":"d4sbhcb09t6d65wm","posts":["voe883omz8fn86ff"]},{"name":"禁用阴影","_id":"d0oe85rcu75hsz12","posts":["voe883omz8fn86ff"]},{"name":"淡出淡入","_id":"n9ld5y198bgegv4r","posts":["jplx6ppamxqho8fn"]},{"name":"动画","_id":"yiaqy93clarkttn2","posts":["jplx6ppamxqho8fn"]},{"name":"QTooltips","_id":"4fj8meu38p4tlgn7","posts":["30i2jzydeq93rdci"]},{"name":"禁用Html支持","_id":"r6aag4xfjzahgj5r","posts":["30i2jzydeq93rdci"]},{"name":"计算位数","_id":"zursk8zfp9nmng22","posts":["708dycs0c6vybjzy"]},{"name":"系统变量","_id":"afgihlusvhtje3qu","posts":["dlfztt47qoy3ge9r"]},{"name":"前置声明","_id":"o8nlgeymioibwicj","posts":["ba0f9uzvs9jm2kuk"]},{"name":"经验总结","_id":"4fxervx3aynbcrnz","posts":["odrvcxd4589akkhb"]},{"name":"JSON","_id":"6r5n8un90pqlzpke","posts":["bwlg5wz4y1qjwtg4"]},{"name":"解析器","_id":"5z5r9t44ncq6fa96","posts":["bwlg5wz4y1qjwtg4"]}]}